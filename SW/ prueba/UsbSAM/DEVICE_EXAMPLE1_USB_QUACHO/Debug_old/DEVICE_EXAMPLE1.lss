
DEVICE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003938  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005f0  20000000  00403938  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000027c  200005f0  00403f28  000205f0  2**2
                  ALLOC
  3 .stack        00002004  2000086c  004041a4  000205f0  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000205f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020619  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001bfb8  00000000  00000000  00020672  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003acc  00000000  00000000  0003c62a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006dc5  00000000  00000000  000400f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  00046ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bd0  00000000  00000000  00047a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016d7e  00000000  00000000  0004860b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011479  00000000  00000000  0005f389  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00057c32  00000000  00000000  00070802  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bb8  00000000  00000000  000c8434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 28 00 20 a1 32 40 00 9d 32 40 00 9d 32 40 00     p(. .2@..2@..2@.
  400010:	9d 32 40 00 9d 32 40 00 9d 32 40 00 00 00 00 00     .2@..2@..2@.....
	...
  40002c:	9d 32 40 00 9d 32 40 00 00 00 00 00 9d 32 40 00     .2@..2@......2@.
  40003c:	9d 32 40 00 9d 32 40 00 9d 32 40 00 9d 32 40 00     .2@..2@..2@..2@.
  40004c:	9d 32 40 00 9d 32 40 00 9d 32 40 00 9d 32 40 00     .2@..2@..2@..2@.
  40005c:	9d 32 40 00 61 35 40 00 9d 32 40 00 9d 32 40 00     .2@.a5@..2@..2@.
  40006c:	99 15 40 00 ad 15 40 00 c1 15 40 00 9d 32 40 00     ..@...@...@..2@.
  40007c:	9d 32 40 00 9d 32 40 00 9d 32 40 00 9d 32 40 00     .2@..2@..2@..2@.
  40008c:	9d 32 40 00 9d 32 40 00 9d 32 40 00 9d 32 40 00     .2@..2@..2@..2@.
  40009c:	9d 32 40 00 9d 32 40 00 9d 32 40 00 9d 32 40 00     .2@..2@..2@..2@.
  4000ac:	9d 32 40 00 9d 32 40 00 9d 32 40 00 9d 32 40 00     .2@..2@..2@..2@.
  4000bc:	9d 32 40 00 9d 32 40 00 9d 32 40 00 51 20 40 00     .2@..2@..2@.Q @.
  4000cc:	9d 32 40 00                                         .2@.

004000d0 <__do_global_dtors_aux>:
  4000d0:	b510      	push	{r4, lr}
  4000d2:	4c05      	ldr	r4, [pc, #20]	; (4000e8 <__do_global_dtors_aux+0x18>)
  4000d4:	7823      	ldrb	r3, [r4, #0]
  4000d6:	b933      	cbnz	r3, 4000e6 <__do_global_dtors_aux+0x16>
  4000d8:	4b04      	ldr	r3, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x1c>)
  4000da:	b113      	cbz	r3, 4000e2 <__do_global_dtors_aux+0x12>
  4000dc:	4804      	ldr	r0, [pc, #16]	; (4000f0 <__do_global_dtors_aux+0x20>)
  4000de:	f3af 8000 	nop.w
  4000e2:	2301      	movs	r3, #1
  4000e4:	7023      	strb	r3, [r4, #0]
  4000e6:	bd10      	pop	{r4, pc}
  4000e8:	200005f0 	.word	0x200005f0
  4000ec:	00000000 	.word	0x00000000
  4000f0:	00403938 	.word	0x00403938

004000f4 <frame_dummy>:
  4000f4:	4b0c      	ldr	r3, [pc, #48]	; (400128 <frame_dummy+0x34>)
  4000f6:	b143      	cbz	r3, 40010a <frame_dummy+0x16>
  4000f8:	480c      	ldr	r0, [pc, #48]	; (40012c <frame_dummy+0x38>)
  4000fa:	b510      	push	{r4, lr}
  4000fc:	490c      	ldr	r1, [pc, #48]	; (400130 <frame_dummy+0x3c>)
  4000fe:	f3af 8000 	nop.w
  400102:	480c      	ldr	r0, [pc, #48]	; (400134 <frame_dummy+0x40>)
  400104:	6803      	ldr	r3, [r0, #0]
  400106:	b923      	cbnz	r3, 400112 <frame_dummy+0x1e>
  400108:	bd10      	pop	{r4, pc}
  40010a:	480a      	ldr	r0, [pc, #40]	; (400134 <frame_dummy+0x40>)
  40010c:	6803      	ldr	r3, [r0, #0]
  40010e:	b933      	cbnz	r3, 40011e <frame_dummy+0x2a>
  400110:	4770      	bx	lr
  400112:	4b09      	ldr	r3, [pc, #36]	; (400138 <frame_dummy+0x44>)
  400114:	2b00      	cmp	r3, #0
  400116:	d0f7      	beq.n	400108 <frame_dummy+0x14>
  400118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40011c:	4718      	bx	r3
  40011e:	4b06      	ldr	r3, [pc, #24]	; (400138 <frame_dummy+0x44>)
  400120:	2b00      	cmp	r3, #0
  400122:	d0f5      	beq.n	400110 <frame_dummy+0x1c>
  400124:	4718      	bx	r3
  400126:	bf00      	nop
  400128:	00000000 	.word	0x00000000
  40012c:	00403938 	.word	0x00403938
  400130:	200005f4 	.word	0x200005f4
  400134:	00403938 	.word	0x00403938
  400138:	00000000 	.word	0x00000000

0040013c <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
  40013c:	b508      	push	{r3, lr}
	// Initialize LEDs
	LED_On(LED0_GPIO);
  40013e:	2013      	movs	r0, #19
  400140:	4b02      	ldr	r3, [pc, #8]	; (40014c <ui_init+0x10>)
  400142:	4798      	blx	r3
	LED_Off(LED1_GPIO);
  400144:	2014      	movs	r0, #20
  400146:	4b02      	ldr	r3, [pc, #8]	; (400150 <ui_init+0x14>)
  400148:	4798      	blx	r3
  40014a:	bd08      	pop	{r3, pc}
  40014c:	004011d9 	.word	0x004011d9
  400150:	0040119d 	.word	0x0040119d

00400154 <ui_powerdown>:
}

void ui_powerdown(void)
{
  400154:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
  400156:	2013      	movs	r0, #19
  400158:	4c02      	ldr	r4, [pc, #8]	; (400164 <ui_powerdown+0x10>)
  40015a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
  40015c:	2014      	movs	r0, #20
  40015e:	47a0      	blx	r4
  400160:	bd10      	pop	{r4, pc}
  400162:	bf00      	nop
  400164:	0040119d 	.word	0x0040119d

00400168 <ui_wakeup>:
}

void ui_wakeup(void)
{
  400168:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
  40016a:	2013      	movs	r0, #19
  40016c:	4b01      	ldr	r3, [pc, #4]	; (400174 <ui_wakeup+0xc>)
  40016e:	4798      	blx	r3
  400170:	bd08      	pop	{r3, pc}
  400172:	bf00      	nop
  400174:	004011d9 	.word	0x004011d9

00400178 <ui_com_open>:
}

void ui_com_open(uint8_t port)
{
  400178:	b508      	push	{r3, lr}
	UNUSED(port);
	LED_On(LED1_GPIO);
  40017a:	2014      	movs	r0, #20
  40017c:	4b01      	ldr	r3, [pc, #4]	; (400184 <ui_com_open+0xc>)
  40017e:	4798      	blx	r3
  400180:	bd08      	pop	{r3, pc}
  400182:	bf00      	nop
  400184:	004011d9 	.word	0x004011d9

00400188 <ui_com_close>:
}

void ui_com_close(uint8_t port)
{
  400188:	b508      	push	{r3, lr}
	UNUSED(port);
	LED_Off(LED1_GPIO);
  40018a:	2014      	movs	r0, #20
  40018c:	4b01      	ldr	r3, [pc, #4]	; (400194 <ui_com_close+0xc>)
  40018e:	4798      	blx	r3
  400190:	bd08      	pop	{r3, pc}
  400192:	bf00      	nop
  400194:	0040119d 	.word	0x0040119d

00400198 <ui_com_rx_start>:
}

void ui_com_rx_start(void)
{
  400198:	4770      	bx	lr

0040019a <ui_com_rx_stop>:
}

void ui_com_rx_stop(void)
{
  40019a:	4770      	bx	lr

0040019c <ui_com_tx_start>:
}

void ui_com_tx_start(void)
{
  40019c:	4770      	bx	lr

0040019e <ui_com_tx_stop>:
}

void ui_com_tx_stop(void)
{
  40019e:	4770      	bx	lr

004001a0 <ui_com_error>:
}

void ui_com_error(void)
{
  4001a0:	4770      	bx	lr

004001a2 <ui_com_overflow>:

}

void ui_com_overflow(void)
{
  4001a2:	4770      	bx	lr

004001a4 <ui_process>:

}

void ui_process(uint16_t framenumber)
{
  4001a4:	b508      	push	{r3, lr}
	if (0 == framenumber) {
  4001a6:	b118      	cbz	r0, 4001b0 <ui_process+0xc>
		LED_On(LED0_GPIO);
	}
	if (1000 == framenumber) {
  4001a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  4001ac:	d004      	beq.n	4001b8 <ui_process+0x14>
  4001ae:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
  4001b0:	2013      	movs	r0, #19
  4001b2:	4b03      	ldr	r3, [pc, #12]	; (4001c0 <ui_process+0x1c>)
  4001b4:	4798      	blx	r3
  4001b6:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
  4001b8:	2013      	movs	r0, #19
  4001ba:	4b02      	ldr	r3, [pc, #8]	; (4001c4 <ui_process+0x20>)
  4001bc:	4798      	blx	r3
	}
}
  4001be:	e7f6      	b.n	4001ae <ui_process+0xa>
  4001c0:	004011d9 	.word	0x004011d9
  4001c4:	0040119d 	.word	0x0040119d

004001c8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4001c8:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001ca:	213e      	movs	r1, #62	; 0x3e
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0a      	ldr	r3, [pc, #40]	; (4001f8 <sysclk_enable_usb+0x30>)
  4001d0:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001d2:	4c0a      	ldr	r4, [pc, #40]	; (4001fc <sysclk_enable_usb+0x34>)
  4001d4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001d6:	2800      	cmp	r0, #0
  4001d8:	d0fc      	beq.n	4001d4 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4001da:	4b09      	ldr	r3, [pc, #36]	; (400200 <sysclk_enable_usb+0x38>)
  4001dc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4001de:	4a09      	ldr	r2, [pc, #36]	; (400204 <sysclk_enable_usb+0x3c>)
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <sysclk_enable_usb+0x40>)
  4001e2:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4001e4:	4c09      	ldr	r4, [pc, #36]	; (40020c <sysclk_enable_usb+0x44>)
  4001e6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4001ec:	2001      	movs	r0, #1
  4001ee:	4b08      	ldr	r3, [pc, #32]	; (400210 <sysclk_enable_usb+0x48>)
  4001f0:	4798      	blx	r3
		pmc_enable_udpck();
  4001f2:	4b08      	ldr	r3, [pc, #32]	; (400214 <sysclk_enable_usb+0x4c>)
  4001f4:	4798      	blx	r3
  4001f6:	bd10      	pop	{r4, pc}
  4001f8:	00401639 	.word	0x00401639
  4001fc:	0040168d 	.word	0x0040168d
  400200:	004016bd 	.word	0x004016bd
  400204:	000f3f02 	.word	0x000f3f02
  400208:	400e0400 	.word	0x400e0400
  40020c:	004016c9 	.word	0x004016c9
  400210:	00401781 	.word	0x00401781
  400214:	00401795 	.word	0x00401795

00400218 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400218:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40021a:	480e      	ldr	r0, [pc, #56]	; (400254 <sysclk_init+0x3c>)
  40021c:	4b0e      	ldr	r3, [pc, #56]	; (400258 <sysclk_init+0x40>)
  40021e:	4798      	blx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400220:	213e      	movs	r1, #62	; 0x3e
  400222:	2000      	movs	r0, #0
  400224:	4b0d      	ldr	r3, [pc, #52]	; (40025c <sysclk_init+0x44>)
  400226:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  400228:	4c0d      	ldr	r4, [pc, #52]	; (400260 <sysclk_init+0x48>)
  40022a:	47a0      	blx	r4
  40022c:	2800      	cmp	r0, #0
  40022e:	d0fc      	beq.n	40022a <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  400230:	4b0c      	ldr	r3, [pc, #48]	; (400264 <sysclk_init+0x4c>)
  400232:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400234:	4a0c      	ldr	r2, [pc, #48]	; (400268 <sysclk_init+0x50>)
  400236:	4b0d      	ldr	r3, [pc, #52]	; (40026c <sysclk_init+0x54>)
  400238:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  40023a:	4c0d      	ldr	r4, [pc, #52]	; (400270 <sysclk_init+0x58>)
  40023c:	47a0      	blx	r4
  40023e:	2800      	cmp	r0, #0
  400240:	d0fc      	beq.n	40023c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400242:	2010      	movs	r0, #16
  400244:	4b0b      	ldr	r3, [pc, #44]	; (400274 <sysclk_init+0x5c>)
  400246:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400248:	4b0b      	ldr	r3, [pc, #44]	; (400278 <sysclk_init+0x60>)
  40024a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40024c:	4801      	ldr	r0, [pc, #4]	; (400254 <sysclk_init+0x3c>)
  40024e:	4b02      	ldr	r3, [pc, #8]	; (400258 <sysclk_init+0x40>)
  400250:	4798      	blx	r3
  400252:	bd10      	pop	{r4, pc}
  400254:	03d09000 	.word	0x03d09000
  400258:	200000a1 	.word	0x200000a1
  40025c:	00401639 	.word	0x00401639
  400260:	0040168d 	.word	0x0040168d
  400264:	0040169d 	.word	0x0040169d
  400268:	201f3f03 	.word	0x201f3f03
  40026c:	400e0400 	.word	0x400e0400
  400270:	004016ad 	.word	0x004016ad
  400274:	004015d5 	.word	0x004015d5
  400278:	00403339 	.word	0x00403339

0040027c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  40027c:	4a02      	ldr	r2, [pc, #8]	; (400288 <udi_cdc_comm_disable+0xc>)
  40027e:	7813      	ldrb	r3, [r2, #0]
  400280:	3b01      	subs	r3, #1
  400282:	b2db      	uxtb	r3, r3
  400284:	7013      	strb	r3, [r2, #0]
  400286:	4770      	bx	lr
  400288:	20000617 	.word	0x20000617

0040028c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  40028c:	2000      	movs	r0, #0
  40028e:	4770      	bx	lr

00400290 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  400290:	2000      	movs	r0, #0
  400292:	4770      	bx	lr

00400294 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400294:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
  400296:	4902      	ldr	r1, [pc, #8]	; (4002a0 <udi_cdc_line_coding_received+0xc>)
  400298:	2000      	movs	r0, #0
  40029a:	4b02      	ldr	r3, [pc, #8]	; (4002a4 <udi_cdc_line_coding_received+0x10>)
  40029c:	4798      	blx	r3
  40029e:	bd08      	pop	{r3, pc}
  4002a0:	20000610 	.word	0x20000610
  4002a4:	00403679 	.word	0x00403679

004002a8 <udi_cdc_comm_enable>:
{
  4002a8:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
  4002aa:	2400      	movs	r4, #0
  4002ac:	4b12      	ldr	r3, [pc, #72]	; (4002f8 <udi_cdc_comm_enable+0x50>)
  4002ae:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4002b0:	4b12      	ldr	r3, [pc, #72]	; (4002fc <udi_cdc_comm_enable+0x54>)
  4002b2:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
  4002b4:	4b12      	ldr	r3, [pc, #72]	; (400300 <udi_cdc_comm_enable+0x58>)
  4002b6:	22a1      	movs	r2, #161	; 0xa1
  4002b8:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4002ba:	2220      	movs	r2, #32
  4002bc:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  4002be:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  4002c0:	809c      	strh	r4, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  4002c2:	2202      	movs	r2, #2
  4002c4:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  4002c6:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4002c8:	490e      	ldr	r1, [pc, #56]	; (400304 <udi_cdc_comm_enable+0x5c>)
  4002ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4002ce:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4002d0:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4002d2:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4002d4:	2308      	movs	r3, #8
  4002d6:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
  4002d8:	4620      	mov	r0, r4
  4002da:	4b0b      	ldr	r3, [pc, #44]	; (400308 <udi_cdc_comm_enable+0x60>)
  4002dc:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
  4002de:	4620      	mov	r0, r4
  4002e0:	4b0a      	ldr	r3, [pc, #40]	; (40030c <udi_cdc_comm_enable+0x64>)
  4002e2:	4798      	blx	r3
  4002e4:	4602      	mov	r2, r0
  4002e6:	b120      	cbz	r0, 4002f2 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
  4002e8:	4903      	ldr	r1, [pc, #12]	; (4002f8 <udi_cdc_comm_enable+0x50>)
  4002ea:	780b      	ldrb	r3, [r1, #0]
  4002ec:	3301      	adds	r3, #1
  4002ee:	b2db      	uxtb	r3, r3
  4002f0:	700b      	strb	r3, [r1, #0]
}
  4002f2:	4610      	mov	r0, r2
  4002f4:	bd10      	pop	{r4, pc}
  4002f6:	bf00      	nop
  4002f8:	20000617 	.word	0x20000617
  4002fc:	200006b0 	.word	0x200006b0
  400300:	20000748 	.word	0x20000748
  400304:	20000610 	.word	0x20000610
  400308:	00403679 	.word	0x00403679
  40030c:	00403519 	.word	0x00403519

00400310 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400310:	4b44      	ldr	r3, [pc, #272]	; (400424 <udi_cdc_tx_send+0x114>)
  400312:	781b      	ldrb	r3, [r3, #0]
  400314:	b103      	cbz	r3, 400318 <udi_cdc_tx_send+0x8>
  400316:	4770      	bx	lr
{
  400318:	b570      	push	{r4, r5, r6, lr}
  40031a:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40031c:	4b42      	ldr	r3, [pc, #264]	; (400428 <udi_cdc_tx_send+0x118>)
  40031e:	4798      	blx	r3
  400320:	2800      	cmp	r0, #0
  400322:	d041      	beq.n	4003a8 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400324:	4b41      	ldr	r3, [pc, #260]	; (40042c <udi_cdc_tx_send+0x11c>)
  400326:	881c      	ldrh	r4, [r3, #0]
  400328:	4b41      	ldr	r3, [pc, #260]	; (400430 <udi_cdc_tx_send+0x120>)
  40032a:	4798      	blx	r3
  40032c:	4284      	cmp	r4, r0
  40032e:	d076      	beq.n	40041e <udi_cdc_tx_send+0x10e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400330:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400334:	fab3 f383 	clz	r3, r3
  400338:	095b      	lsrs	r3, r3, #5
  40033a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40033c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40033e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400342:	2200      	movs	r2, #0
  400344:	4b3b      	ldr	r3, [pc, #236]	; (400434 <udi_cdc_tx_send+0x124>)
  400346:	701a      	strb	r2, [r3, #0]
	return flags;
  400348:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40034a:	4b3b      	ldr	r3, [pc, #236]	; (400438 <udi_cdc_tx_send+0x128>)
  40034c:	781c      	ldrb	r4, [r3, #0]
  40034e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400350:	4b3a      	ldr	r3, [pc, #232]	; (40043c <udi_cdc_tx_send+0x12c>)
  400352:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400356:	2b00      	cmp	r3, #0
  400358:	d02d      	beq.n	4003b6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40035a:	2200      	movs	r2, #0
  40035c:	4b38      	ldr	r3, [pc, #224]	; (400440 <udi_cdc_tx_send+0x130>)
  40035e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400360:	4b38      	ldr	r3, [pc, #224]	; (400444 <udi_cdc_tx_send+0x134>)
  400362:	781b      	ldrb	r3, [r3, #0]
  400364:	2b00      	cmp	r3, #0
  400366:	d142      	bne.n	4003ee <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400368:	fab4 f384 	clz	r3, r4
  40036c:	095b      	lsrs	r3, r3, #5
  40036e:	4a32      	ldr	r2, [pc, #200]	; (400438 <udi_cdc_tx_send+0x128>)
  400370:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400372:	2201      	movs	r2, #1
  400374:	4b2b      	ldr	r3, [pc, #172]	; (400424 <udi_cdc_tx_send+0x114>)
  400376:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400378:	b125      	cbz	r5, 400384 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  40037a:	4b2e      	ldr	r3, [pc, #184]	; (400434 <udi_cdc_tx_send+0x124>)
  40037c:	701a      	strb	r2, [r3, #0]
  40037e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400382:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400384:	4626      	mov	r6, r4
  400386:	4b2d      	ldr	r3, [pc, #180]	; (40043c <udi_cdc_tx_send+0x12c>)
  400388:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  40038c:	2b40      	cmp	r3, #64	; 0x40
  40038e:	bf14      	ite	ne
  400390:	2501      	movne	r5, #1
  400392:	2500      	moveq	r5, #0
	if (b_short_packet) {
  400394:	d034      	beq.n	400400 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  400396:	4b24      	ldr	r3, [pc, #144]	; (400428 <udi_cdc_tx_send+0x118>)
  400398:	4798      	blx	r3
  40039a:	2800      	cmp	r0, #0
  40039c:	d02b      	beq.n	4003f6 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  40039e:	4b24      	ldr	r3, [pc, #144]	; (400430 <udi_cdc_tx_send+0x120>)
  4003a0:	4798      	blx	r3
  4003a2:	4b22      	ldr	r3, [pc, #136]	; (40042c <udi_cdc_tx_send+0x11c>)
  4003a4:	8018      	strh	r0, [r3, #0]
  4003a6:	e02e      	b.n	400406 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4003a8:	4b20      	ldr	r3, [pc, #128]	; (40042c <udi_cdc_tx_send+0x11c>)
  4003aa:	881c      	ldrh	r4, [r3, #0]
  4003ac:	4b26      	ldr	r3, [pc, #152]	; (400448 <udi_cdc_tx_send+0x138>)
  4003ae:	4798      	blx	r3
  4003b0:	4284      	cmp	r4, r0
  4003b2:	d1bd      	bne.n	400330 <udi_cdc_tx_send+0x20>
  4003b4:	e033      	b.n	40041e <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4003b6:	4a22      	ldr	r2, [pc, #136]	; (400440 <udi_cdc_tx_send+0x130>)
  4003b8:	8813      	ldrh	r3, [r2, #0]
  4003ba:	3301      	adds	r3, #1
  4003bc:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4003be:	4b1a      	ldr	r3, [pc, #104]	; (400428 <udi_cdc_tx_send+0x118>)
  4003c0:	4798      	blx	r3
  4003c2:	b918      	cbnz	r0, 4003cc <udi_cdc_tx_send+0xbc>
  4003c4:	4b1e      	ldr	r3, [pc, #120]	; (400440 <udi_cdc_tx_send+0x130>)
  4003c6:	881b      	ldrh	r3, [r3, #0]
  4003c8:	2b63      	cmp	r3, #99	; 0x63
  4003ca:	d908      	bls.n	4003de <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4003cc:	4b16      	ldr	r3, [pc, #88]	; (400428 <udi_cdc_tx_send+0x118>)
  4003ce:	4798      	blx	r3
  4003d0:	2800      	cmp	r0, #0
  4003d2:	d0c2      	beq.n	40035a <udi_cdc_tx_send+0x4a>
  4003d4:	4b1a      	ldr	r3, [pc, #104]	; (400440 <udi_cdc_tx_send+0x130>)
  4003d6:	881b      	ldrh	r3, [r3, #0]
  4003d8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  4003dc:	d2bd      	bcs.n	40035a <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  4003de:	b1f5      	cbz	r5, 40041e <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  4003e0:	2201      	movs	r2, #1
  4003e2:	4b14      	ldr	r3, [pc, #80]	; (400434 <udi_cdc_tx_send+0x124>)
  4003e4:	701a      	strb	r2, [r3, #0]
  4003e6:	f3bf 8f5f 	dmb	sy
  4003ea:	b662      	cpsie	i
  4003ec:	e017      	b.n	40041e <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4003ee:	fab4 f484 	clz	r4, r4
  4003f2:	0964      	lsrs	r4, r4, #5
  4003f4:	e7bd      	b.n	400372 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  4003f6:	4b14      	ldr	r3, [pc, #80]	; (400448 <udi_cdc_tx_send+0x138>)
  4003f8:	4798      	blx	r3
  4003fa:	4b0c      	ldr	r3, [pc, #48]	; (40042c <udi_cdc_tx_send+0x11c>)
  4003fc:	8018      	strh	r0, [r3, #0]
  4003fe:	e002      	b.n	400406 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400400:	2200      	movs	r2, #0
  400402:	4b0a      	ldr	r3, [pc, #40]	; (40042c <udi_cdc_tx_send+0x11c>)
  400404:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400406:	4b0d      	ldr	r3, [pc, #52]	; (40043c <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400408:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  40040c:	4a0f      	ldr	r2, [pc, #60]	; (40044c <udi_cdc_tx_send+0x13c>)
  40040e:	9200      	str	r2, [sp, #0]
  400410:	4a0f      	ldr	r2, [pc, #60]	; (400450 <udi_cdc_tx_send+0x140>)
  400412:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400416:	4629      	mov	r1, r5
  400418:	2081      	movs	r0, #129	; 0x81
  40041a:	4c0e      	ldr	r4, [pc, #56]	; (400454 <udi_cdc_tx_send+0x144>)
  40041c:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40041e:	b004      	add	sp, #16
  400420:	bd70      	pop	{r4, r5, r6, pc}
  400422:	bf00      	nop
  400424:	20000744 	.word	0x20000744
  400428:	00402ac9 	.word	0x00402ac9
  40042c:	20000740 	.word	0x20000740
  400430:	00402b35 	.word	0x00402b35
  400434:	200001c0 	.word	0x200001c0
  400438:	2000073c 	.word	0x2000073c
  40043c:	20000738 	.word	0x20000738
  400440:	2000060c 	.word	0x2000060c
  400444:	200006b4 	.word	0x200006b4
  400448:	00402b25 	.word	0x00402b25
  40044c:	00400459 	.word	0x00400459
  400450:	200006b8 	.word	0x200006b8
  400454:	00402e8d 	.word	0x00402e8d

00400458 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400458:	b100      	cbz	r0, 40045c <udi_cdc_data_sent+0x4>
  40045a:	4770      	bx	lr
{
  40045c:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40045e:	4b07      	ldr	r3, [pc, #28]	; (40047c <udi_cdc_data_sent+0x24>)
  400460:	781b      	ldrb	r3, [r3, #0]
  400462:	fab3 f383 	clz	r3, r3
  400466:	095b      	lsrs	r3, r3, #5
  400468:	4a05      	ldr	r2, [pc, #20]	; (400480 <udi_cdc_data_sent+0x28>)
  40046a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <udi_cdc_data_sent+0x2c>)
  400470:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400472:	4b05      	ldr	r3, [pc, #20]	; (400488 <udi_cdc_data_sent+0x30>)
  400474:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  400476:	4b05      	ldr	r3, [pc, #20]	; (40048c <udi_cdc_data_sent+0x34>)
  400478:	4798      	blx	r3
  40047a:	bd08      	pop	{r3, pc}
  40047c:	2000073c 	.word	0x2000073c
  400480:	20000738 	.word	0x20000738
  400484:	200006b4 	.word	0x200006b4
  400488:	20000744 	.word	0x20000744
  40048c:	00400311 	.word	0x00400311

00400490 <udi_cdc_data_sof_notify>:
{
  400490:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  400492:	2000      	movs	r0, #0
  400494:	4b01      	ldr	r3, [pc, #4]	; (40049c <udi_cdc_data_sof_notify+0xc>)
  400496:	4798      	blx	r3
  400498:	bd08      	pop	{r3, pc}
  40049a:	bf00      	nop
  40049c:	00400311 	.word	0x00400311

004004a0 <udi_cdc_ctrl_state_notify>:
	if ((!udi_cdc_serial_state_msg_ongoing[port])
  4004a0:	4b0d      	ldr	r3, [pc, #52]	; (4004d8 <udi_cdc_ctrl_state_notify+0x38>)
  4004a2:	781b      	ldrb	r3, [r3, #0]
  4004a4:	b9bb      	cbnz	r3, 4004d6 <udi_cdc_ctrl_state_notify+0x36>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
  4004a6:	4b0d      	ldr	r3, [pc, #52]	; (4004dc <udi_cdc_ctrl_state_notify+0x3c>)
  4004a8:	881b      	ldrh	r3, [r3, #0]
  4004aa:	b29b      	uxth	r3, r3
  4004ac:	4a0c      	ldr	r2, [pc, #48]	; (4004e0 <udi_cdc_ctrl_state_notify+0x40>)
  4004ae:	8912      	ldrh	r2, [r2, #8]
  4004b0:	429a      	cmp	r2, r3
  4004b2:	d010      	beq.n	4004d6 <udi_cdc_ctrl_state_notify+0x36>
{
  4004b4:	b510      	push	{r4, lr}
  4004b6:	b082      	sub	sp, #8
  4004b8:	4608      	mov	r0, r1
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
  4004ba:	4b08      	ldr	r3, [pc, #32]	; (4004dc <udi_cdc_ctrl_state_notify+0x3c>)
  4004bc:	881b      	ldrh	r3, [r3, #0]
  4004be:	4a08      	ldr	r2, [pc, #32]	; (4004e0 <udi_cdc_ctrl_state_notify+0x40>)
  4004c0:	8113      	strh	r3, [r2, #8]
				udd_ep_run(ep,
  4004c2:	4b08      	ldr	r3, [pc, #32]	; (4004e4 <udi_cdc_ctrl_state_notify+0x44>)
  4004c4:	9300      	str	r3, [sp, #0]
  4004c6:	230a      	movs	r3, #10
  4004c8:	2100      	movs	r1, #0
  4004ca:	4c07      	ldr	r4, [pc, #28]	; (4004e8 <udi_cdc_ctrl_state_notify+0x48>)
  4004cc:	47a0      	blx	r4
		udi_cdc_serial_state_msg_ongoing[port] =
  4004ce:	4b02      	ldr	r3, [pc, #8]	; (4004d8 <udi_cdc_ctrl_state_notify+0x38>)
  4004d0:	7018      	strb	r0, [r3, #0]
}
  4004d2:	b002      	add	sp, #8
  4004d4:	bd10      	pop	{r4, pc}
  4004d6:	4770      	bx	lr
  4004d8:	200006ac 	.word	0x200006ac
  4004dc:	200006b0 	.word	0x200006b0
  4004e0:	20000748 	.word	0x20000748
  4004e4:	0040054d 	.word	0x0040054d
  4004e8:	00402e8d 	.word	0x00402e8d

004004ec <udi_cdc_ctrl_state_change>:
{
  4004ec:	b500      	push	{lr}
  4004ee:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4004f0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004f4:	fab3 f383 	clz	r3, r3
  4004f8:	095b      	lsrs	r3, r3, #5
  4004fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4004fc:	b672      	cpsid	i
  4004fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400502:	2000      	movs	r0, #0
  400504:	4b0e      	ldr	r3, [pc, #56]	; (400540 <udi_cdc_ctrl_state_change+0x54>)
  400506:	7018      	strb	r0, [r3, #0]
	return flags;
  400508:	9801      	ldr	r0, [sp, #4]
	if (b_set) {
  40050a:	b191      	cbz	r1, 400532 <udi_cdc_ctrl_state_change+0x46>
		udi_cdc_state[port] |= bit_mask;
  40050c:	490d      	ldr	r1, [pc, #52]	; (400544 <udi_cdc_ctrl_state_change+0x58>)
  40050e:	880b      	ldrh	r3, [r1, #0]
  400510:	b29b      	uxth	r3, r3
  400512:	431a      	orrs	r2, r3
  400514:	800a      	strh	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400516:	b128      	cbz	r0, 400524 <udi_cdc_ctrl_state_change+0x38>
		cpu_irq_enable();
  400518:	2201      	movs	r2, #1
  40051a:	4b09      	ldr	r3, [pc, #36]	; (400540 <udi_cdc_ctrl_state_change+0x54>)
  40051c:	701a      	strb	r2, [r3, #0]
  40051e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400522:	b662      	cpsie	i
	udi_cdc_ctrl_state_notify(port, ep_comm);
  400524:	2183      	movs	r1, #131	; 0x83
  400526:	2000      	movs	r0, #0
  400528:	4b07      	ldr	r3, [pc, #28]	; (400548 <udi_cdc_ctrl_state_change+0x5c>)
  40052a:	4798      	blx	r3
}
  40052c:	b003      	add	sp, #12
  40052e:	f85d fb04 	ldr.w	pc, [sp], #4
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
  400532:	4904      	ldr	r1, [pc, #16]	; (400544 <udi_cdc_ctrl_state_change+0x58>)
  400534:	880b      	ldrh	r3, [r1, #0]
  400536:	b29b      	uxth	r3, r3
  400538:	ea23 0202 	bic.w	r2, r3, r2
  40053c:	800a      	strh	r2, [r1, #0]
  40053e:	e7ea      	b.n	400516 <udi_cdc_ctrl_state_change+0x2a>
  400540:	200001c0 	.word	0x200001c0
  400544:	200006b0 	.word	0x200006b0
  400548:	004004a1 	.word	0x004004a1

0040054c <udi_cdc_serial_state_msg_sent>:
{
  40054c:	b508      	push	{r3, lr}
	udi_cdc_serial_state_msg_ongoing[port] = false;
  40054e:	2000      	movs	r0, #0
  400550:	4b08      	ldr	r3, [pc, #32]	; (400574 <udi_cdc_serial_state_msg_sent+0x28>)
  400552:	7018      	strb	r0, [r3, #0]
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
  400554:	4908      	ldr	r1, [pc, #32]	; (400578 <udi_cdc_serial_state_msg_sent+0x2c>)
  400556:	880b      	ldrh	r3, [r1, #0]
  400558:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
  40055c:	041b      	lsls	r3, r3, #16
  40055e:	0c1b      	lsrs	r3, r3, #16
  400560:	800b      	strh	r3, [r1, #0]
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
  400562:	4906      	ldr	r1, [pc, #24]	; (40057c <udi_cdc_serial_state_msg_sent+0x30>)
  400564:	890b      	ldrh	r3, [r1, #8]
  400566:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
  40056a:	810b      	strh	r3, [r1, #8]
	udi_cdc_ctrl_state_notify(port, ep);
  40056c:	4611      	mov	r1, r2
  40056e:	4b04      	ldr	r3, [pc, #16]	; (400580 <udi_cdc_serial_state_msg_sent+0x34>)
  400570:	4798      	blx	r3
  400572:	bd08      	pop	{r3, pc}
  400574:	200006ac 	.word	0x200006ac
  400578:	200006b0 	.word	0x200006b0
  40057c:	20000748 	.word	0x20000748
  400580:	004004a1 	.word	0x004004a1

00400584 <udi_cdc_data_disable>:
{
  400584:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
  400586:	4a06      	ldr	r2, [pc, #24]	; (4005a0 <udi_cdc_data_disable+0x1c>)
  400588:	7813      	ldrb	r3, [r2, #0]
  40058a:	3b01      	subs	r3, #1
  40058c:	b2db      	uxtb	r3, r3
  40058e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  400590:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
  400592:	4b04      	ldr	r3, [pc, #16]	; (4005a4 <udi_cdc_data_disable+0x20>)
  400594:	4798      	blx	r3
	udi_cdc_data_running = false;
  400596:	2200      	movs	r2, #0
  400598:	4b03      	ldr	r3, [pc, #12]	; (4005a8 <udi_cdc_data_disable+0x24>)
  40059a:	701a      	strb	r2, [r3, #0]
  40059c:	bd08      	pop	{r3, pc}
  40059e:	bf00      	nop
  4005a0:	20000618 	.word	0x20000618
  4005a4:	00403531 	.word	0x00403531
  4005a8:	2000060e 	.word	0x2000060e

004005ac <udi_cdc_comm_setup>:
{
  4005ac:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
  4005ae:	4b22      	ldr	r3, [pc, #136]	; (400638 <udi_cdc_comm_setup+0x8c>)
  4005b0:	781b      	ldrb	r3, [r3, #0]
  4005b2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4005b6:	d105      	bne.n	4005c4 <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4005b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4005bc:	2b20      	cmp	r3, #32
  4005be:	d018      	beq.n	4005f2 <udi_cdc_comm_setup+0x46>
	return false;  // request Not supported
  4005c0:	2000      	movs	r0, #0
  4005c2:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4005c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4005c8:	2b20      	cmp	r3, #32
  4005ca:	d001      	beq.n	4005d0 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
  4005cc:	2000      	movs	r0, #0
  4005ce:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
  4005d0:	4b19      	ldr	r3, [pc, #100]	; (400638 <udi_cdc_comm_setup+0x8c>)
  4005d2:	785b      	ldrb	r3, [r3, #1]
  4005d4:	2b21      	cmp	r3, #33	; 0x21
  4005d6:	d12c      	bne.n	400632 <udi_cdc_comm_setup+0x86>
						udd_g_ctrlreq.req.wLength)
  4005d8:	4b17      	ldr	r3, [pc, #92]	; (400638 <udi_cdc_comm_setup+0x8c>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4005da:	88db      	ldrh	r3, [r3, #6]
  4005dc:	2b07      	cmp	r3, #7
  4005de:	d001      	beq.n	4005e4 <udi_cdc_comm_setup+0x38>
					return false; // Error for USB host
  4005e0:	2000      	movs	r0, #0
  4005e2:	bd08      	pop	{r3, pc}
				udd_g_ctrlreq.payload =
  4005e4:	4b14      	ldr	r3, [pc, #80]	; (400638 <udi_cdc_comm_setup+0x8c>)
  4005e6:	4a15      	ldr	r2, [pc, #84]	; (40063c <udi_cdc_comm_setup+0x90>)
  4005e8:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4005ea:	2207      	movs	r2, #7
  4005ec:	819a      	strh	r2, [r3, #12]
				return true;
  4005ee:	2001      	movs	r0, #1
  4005f0:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
  4005f2:	4b11      	ldr	r3, [pc, #68]	; (400638 <udi_cdc_comm_setup+0x8c>)
  4005f4:	785b      	ldrb	r3, [r3, #1]
  4005f6:	2b20      	cmp	r3, #32
  4005f8:	d003      	beq.n	400602 <udi_cdc_comm_setup+0x56>
  4005fa:	2b22      	cmp	r3, #34	; 0x22
  4005fc:	d010      	beq.n	400620 <udi_cdc_comm_setup+0x74>
	return false;  // request Not supported
  4005fe:	2000      	movs	r0, #0
  400600:	bd08      	pop	{r3, pc}
						udd_g_ctrlreq.req.wLength)
  400602:	4b0d      	ldr	r3, [pc, #52]	; (400638 <udi_cdc_comm_setup+0x8c>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400604:	88db      	ldrh	r3, [r3, #6]
  400606:	2b07      	cmp	r3, #7
  400608:	d001      	beq.n	40060e <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  40060a:	2000      	movs	r0, #0
}
  40060c:	bd08      	pop	{r3, pc}
				udd_g_ctrlreq.callback =
  40060e:	4b0a      	ldr	r3, [pc, #40]	; (400638 <udi_cdc_comm_setup+0x8c>)
  400610:	4a0b      	ldr	r2, [pc, #44]	; (400640 <udi_cdc_comm_setup+0x94>)
  400612:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400614:	4a09      	ldr	r2, [pc, #36]	; (40063c <udi_cdc_comm_setup+0x90>)
  400616:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400618:	2207      	movs	r2, #7
  40061a:	819a      	strh	r2, [r3, #12]
				return true;
  40061c:	2001      	movs	r0, #1
  40061e:	bd08      	pop	{r3, pc}
				UDI_CDC_SET_DTR_EXT(port, (0 !=
  400620:	4b05      	ldr	r3, [pc, #20]	; (400638 <udi_cdc_comm_setup+0x8c>)
  400622:	7899      	ldrb	r1, [r3, #2]
  400624:	f001 0101 	and.w	r1, r1, #1
  400628:	2000      	movs	r0, #0
  40062a:	4b06      	ldr	r3, [pc, #24]	; (400644 <udi_cdc_comm_setup+0x98>)
  40062c:	4798      	blx	r3
				return true;
  40062e:	2001      	movs	r0, #1
  400630:	bd08      	pop	{r3, pc}
	return false;  // request Not supported
  400632:	2000      	movs	r0, #0
  400634:	bd08      	pop	{r3, pc}
  400636:	bf00      	nop
  400638:	20000854 	.word	0x20000854
  40063c:	20000610 	.word	0x20000610
  400640:	00400295 	.word	0x00400295
  400644:	00403549 	.word	0x00403549

00400648 <udi_cdc_signal_framing_error>:
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
}

void udi_cdc_signal_framing_error(void)
{
  400648:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
  40064a:	2210      	movs	r2, #16
  40064c:	2101      	movs	r1, #1
  40064e:	2000      	movs	r0, #0
  400650:	4b01      	ldr	r3, [pc, #4]	; (400658 <udi_cdc_signal_framing_error+0x10>)
  400652:	4798      	blx	r3
  400654:	bd08      	pop	{r3, pc}
  400656:	bf00      	nop
  400658:	004004ed 	.word	0x004004ed

0040065c <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
  40065c:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
  40065e:	2240      	movs	r2, #64	; 0x40
  400660:	2101      	movs	r1, #1
  400662:	2000      	movs	r0, #0
  400664:	4b01      	ldr	r3, [pc, #4]	; (40066c <udi_cdc_signal_overrun+0x10>)
  400666:	4798      	blx	r3
  400668:	bd08      	pop	{r3, pc}
  40066a:	bf00      	nop
  40066c:	004004ed 	.word	0x004004ed

00400670 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  400670:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400672:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400676:	fab3 f383 	clz	r3, r3
  40067a:	095b      	lsrs	r3, r3, #5
  40067c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40067e:	b672      	cpsid	i
  400680:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400684:	2200      	movs	r2, #0
  400686:	4b0b      	ldr	r3, [pc, #44]	; (4006b4 <udi_cdc_multi_get_nb_received_data+0x44>)
  400688:	701a      	strb	r2, [r3, #0]
	return flags;
  40068a:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  40068c:	4b0a      	ldr	r3, [pc, #40]	; (4006b8 <udi_cdc_multi_get_nb_received_data+0x48>)
  40068e:	8818      	ldrh	r0, [r3, #0]
  400690:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400692:	4a0a      	ldr	r2, [pc, #40]	; (4006bc <udi_cdc_multi_get_nb_received_data+0x4c>)
  400694:	7812      	ldrb	r2, [r2, #0]
  400696:	b2d2      	uxtb	r2, r2
  400698:	4809      	ldr	r0, [pc, #36]	; (4006c0 <udi_cdc_multi_get_nb_received_data+0x50>)
  40069a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  40069e:	b280      	uxth	r0, r0
  4006a0:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  4006a2:	b129      	cbz	r1, 4006b0 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  4006a4:	2201      	movs	r2, #1
  4006a6:	4b03      	ldr	r3, [pc, #12]	; (4006b4 <udi_cdc_multi_get_nb_received_data+0x44>)
  4006a8:	701a      	strb	r2, [r3, #0]
  4006aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  4006b0:	b002      	add	sp, #8
  4006b2:	4770      	bx	lr
  4006b4:	200001c0 	.word	0x200001c0
  4006b8:	200006a4 	.word	0x200006a4
  4006bc:	200006a0 	.word	0x200006a0
  4006c0:	2000069c 	.word	0x2000069c

004006c4 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  4006c4:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  4006c6:	4b03      	ldr	r3, [pc, #12]	; (4006d4 <udi_cdc_multi_is_rx_ready+0x10>)
  4006c8:	4798      	blx	r3
}
  4006ca:	3000      	adds	r0, #0
  4006cc:	bf18      	it	ne
  4006ce:	2001      	movne	r0, #1
  4006d0:	bd08      	pop	{r3, pc}
  4006d2:	bf00      	nop
  4006d4:	00400671 	.word	0x00400671

004006d8 <udi_cdc_rx_start>:
{
  4006d8:	b510      	push	{r4, lr}
  4006da:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006dc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006e0:	fab3 f383 	clz	r3, r3
  4006e4:	095b      	lsrs	r3, r3, #5
  4006e6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4006e8:	b672      	cpsid	i
  4006ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006ee:	2200      	movs	r2, #0
  4006f0:	4b20      	ldr	r3, [pc, #128]	; (400774 <udi_cdc_rx_start+0x9c>)
  4006f2:	701a      	strb	r2, [r3, #0]
	return flags;
  4006f4:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4006f6:	4a20      	ldr	r2, [pc, #128]	; (400778 <udi_cdc_rx_start+0xa0>)
  4006f8:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4006fa:	4a20      	ldr	r2, [pc, #128]	; (40077c <udi_cdc_rx_start+0xa4>)
  4006fc:	7812      	ldrb	r2, [r2, #0]
  4006fe:	b94a      	cbnz	r2, 400714 <udi_cdc_rx_start+0x3c>
  400700:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400702:	4a1f      	ldr	r2, [pc, #124]	; (400780 <udi_cdc_rx_start+0xa8>)
  400704:	8811      	ldrh	r1, [r2, #0]
  400706:	b289      	uxth	r1, r1
  400708:	4a1e      	ldr	r2, [pc, #120]	; (400784 <udi_cdc_rx_start+0xac>)
  40070a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40070e:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400710:	4291      	cmp	r1, r2
  400712:	d209      	bcs.n	400728 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400714:	b363      	cbz	r3, 400770 <udi_cdc_rx_start+0x98>
		cpu_irq_enable();
  400716:	2201      	movs	r2, #1
  400718:	4b16      	ldr	r3, [pc, #88]	; (400774 <udi_cdc_rx_start+0x9c>)
  40071a:	701a      	strb	r2, [r3, #0]
  40071c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400720:	b662      	cpsie	i
		return false;
  400722:	2000      	movs	r0, #0
}
  400724:	b004      	add	sp, #16
  400726:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400728:	2100      	movs	r1, #0
  40072a:	4a15      	ldr	r2, [pc, #84]	; (400780 <udi_cdc_rx_start+0xa8>)
  40072c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40072e:	fab4 f284 	clz	r2, r4
  400732:	0952      	lsrs	r2, r2, #5
  400734:	4910      	ldr	r1, [pc, #64]	; (400778 <udi_cdc_rx_start+0xa0>)
  400736:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400738:	2101      	movs	r1, #1
  40073a:	4a10      	ldr	r2, [pc, #64]	; (40077c <udi_cdc_rx_start+0xa4>)
  40073c:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40073e:	b123      	cbz	r3, 40074a <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400740:	4b0c      	ldr	r3, [pc, #48]	; (400774 <udi_cdc_rx_start+0x9c>)
  400742:	7019      	strb	r1, [r3, #0]
  400744:	f3bf 8f5f 	dmb	sy
  400748:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  40074a:	2000      	movs	r0, #0
  40074c:	4b0e      	ldr	r3, [pc, #56]	; (400788 <udi_cdc_rx_start+0xb0>)
  40074e:	4798      	blx	r3
  400750:	b950      	cbnz	r0, 400768 <udi_cdc_rx_start+0x90>
	return udd_ep_run(ep,
  400752:	4b0e      	ldr	r3, [pc, #56]	; (40078c <udi_cdc_rx_start+0xb4>)
  400754:	9300      	str	r3, [sp, #0]
  400756:	2340      	movs	r3, #64	; 0x40
  400758:	4a0d      	ldr	r2, [pc, #52]	; (400790 <udi_cdc_rx_start+0xb8>)
  40075a:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  40075e:	2101      	movs	r1, #1
  400760:	2002      	movs	r0, #2
  400762:	4c0c      	ldr	r4, [pc, #48]	; (400794 <udi_cdc_rx_start+0xbc>)
  400764:	47a0      	blx	r4
  400766:	e7dd      	b.n	400724 <udi_cdc_rx_start+0x4c>
		UDI_CDC_RX_NOTIFY(port);
  400768:	2000      	movs	r0, #0
  40076a:	4b0b      	ldr	r3, [pc, #44]	; (400798 <udi_cdc_rx_start+0xc0>)
  40076c:	4798      	blx	r3
  40076e:	e7f0      	b.n	400752 <udi_cdc_rx_start+0x7a>
		return false;
  400770:	2000      	movs	r0, #0
  400772:	e7d7      	b.n	400724 <udi_cdc_rx_start+0x4c>
  400774:	200001c0 	.word	0x200001c0
  400778:	200006a0 	.word	0x200006a0
  40077c:	200006a8 	.word	0x200006a8
  400780:	200006a4 	.word	0x200006a4
  400784:	2000069c 	.word	0x2000069c
  400788:	004006c5 	.word	0x004006c5
  40078c:	00400831 	.word	0x00400831
  400790:	2000061c 	.word	0x2000061c
  400794:	00402e8d 	.word	0x00402e8d
  400798:	00403645 	.word	0x00403645

0040079c <udi_cdc_data_enable>:
{
  40079c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  40079e:	2400      	movs	r4, #0
  4007a0:	4b16      	ldr	r3, [pc, #88]	; (4007fc <udi_cdc_data_enable+0x60>)
  4007a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4007a4:	4b16      	ldr	r3, [pc, #88]	; (400800 <udi_cdc_data_enable+0x64>)
  4007a6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4007a8:	4b16      	ldr	r3, [pc, #88]	; (400804 <udi_cdc_data_enable+0x68>)
  4007aa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  4007ac:	4b16      	ldr	r3, [pc, #88]	; (400808 <udi_cdc_data_enable+0x6c>)
  4007ae:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  4007b0:	4b16      	ldr	r3, [pc, #88]	; (40080c <udi_cdc_data_enable+0x70>)
  4007b2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  4007b4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  4007b6:	4b16      	ldr	r3, [pc, #88]	; (400810 <udi_cdc_data_enable+0x74>)
  4007b8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  4007ba:	4620      	mov	r0, r4
  4007bc:	4b15      	ldr	r3, [pc, #84]	; (400814 <udi_cdc_data_enable+0x78>)
  4007be:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  4007c0:	4b15      	ldr	r3, [pc, #84]	; (400818 <udi_cdc_data_enable+0x7c>)
  4007c2:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  4007c4:	4b15      	ldr	r3, [pc, #84]	; (40081c <udi_cdc_data_enable+0x80>)
  4007c6:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  4007c8:	4b15      	ldr	r3, [pc, #84]	; (400820 <udi_cdc_data_enable+0x84>)
  4007ca:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  4007cc:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  4007ce:	4b15      	ldr	r3, [pc, #84]	; (400824 <udi_cdc_data_enable+0x88>)
  4007d0:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  4007d2:	4620      	mov	r0, r4
  4007d4:	4b14      	ldr	r3, [pc, #80]	; (400828 <udi_cdc_data_enable+0x8c>)
  4007d6:	4798      	blx	r3
  4007d8:	4601      	mov	r1, r0
  4007da:	b140      	cbz	r0, 4007ee <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  4007dc:	4a07      	ldr	r2, [pc, #28]	; (4007fc <udi_cdc_data_enable+0x60>)
  4007de:	7813      	ldrb	r3, [r2, #0]
  4007e0:	3301      	adds	r3, #1
  4007e2:	b2db      	uxtb	r3, r3
  4007e4:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4007e6:	7813      	ldrb	r3, [r2, #0]
  4007e8:	b2db      	uxtb	r3, r3
  4007ea:	2b01      	cmp	r3, #1
  4007ec:	d001      	beq.n	4007f2 <udi_cdc_data_enable+0x56>
}
  4007ee:	4608      	mov	r0, r1
  4007f0:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  4007f2:	2201      	movs	r2, #1
  4007f4:	4b0d      	ldr	r3, [pc, #52]	; (40082c <udi_cdc_data_enable+0x90>)
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	e7f9      	b.n	4007ee <udi_cdc_data_enable+0x52>
  4007fa:	bf00      	nop
  4007fc:	20000618 	.word	0x20000618
  400800:	20000744 	.word	0x20000744
  400804:	200006b4 	.word	0x200006b4
  400808:	2000073c 	.word	0x2000073c
  40080c:	20000738 	.word	0x20000738
  400810:	20000740 	.word	0x20000740
  400814:	00400311 	.word	0x00400311
  400818:	200006a8 	.word	0x200006a8
  40081c:	200006a0 	.word	0x200006a0
  400820:	2000069c 	.word	0x2000069c
  400824:	200006a4 	.word	0x200006a4
  400828:	004006d9 	.word	0x004006d9
  40082c:	2000060e 	.word	0x2000060e

00400830 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400830:	b9e8      	cbnz	r0, 40086e <udi_cdc_data_received+0x3e>
{
  400832:	b510      	push	{r4, lr}
  400834:	b082      	sub	sp, #8
  400836:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400838:	4b0d      	ldr	r3, [pc, #52]	; (400870 <udi_cdc_data_received+0x40>)
  40083a:	781c      	ldrb	r4, [r3, #0]
  40083c:	fab4 f484 	clz	r4, r4
  400840:	0964      	lsrs	r4, r4, #5
	if (!n) {
  400842:	b151      	cbz	r1, 40085a <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400844:	b289      	uxth	r1, r1
  400846:	4b0b      	ldr	r3, [pc, #44]	; (400874 <udi_cdc_data_received+0x44>)
  400848:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  40084c:	2000      	movs	r0, #0
  40084e:	4b0a      	ldr	r3, [pc, #40]	; (400878 <udi_cdc_data_received+0x48>)
  400850:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  400852:	4b0a      	ldr	r3, [pc, #40]	; (40087c <udi_cdc_data_received+0x4c>)
  400854:	4798      	blx	r3
}
  400856:	b002      	add	sp, #8
  400858:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  40085a:	4b09      	ldr	r3, [pc, #36]	; (400880 <udi_cdc_data_received+0x50>)
  40085c:	9300      	str	r3, [sp, #0]
  40085e:	2340      	movs	r3, #64	; 0x40
  400860:	4a08      	ldr	r2, [pc, #32]	; (400884 <udi_cdc_data_received+0x54>)
  400862:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400866:	2101      	movs	r1, #1
  400868:	4c07      	ldr	r4, [pc, #28]	; (400888 <udi_cdc_data_received+0x58>)
  40086a:	47a0      	blx	r4
		return;
  40086c:	e7f3      	b.n	400856 <udi_cdc_data_received+0x26>
  40086e:	4770      	bx	lr
  400870:	200006a0 	.word	0x200006a0
  400874:	2000069c 	.word	0x2000069c
  400878:	200006a8 	.word	0x200006a8
  40087c:	004006d9 	.word	0x004006d9
  400880:	00400831 	.word	0x00400831
  400884:	2000061c 	.word	0x2000061c
  400888:	00402e8d 	.word	0x00402e8d

0040088c <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  40088c:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  40088e:	2000      	movs	r0, #0
  400890:	4b01      	ldr	r3, [pc, #4]	; (400898 <udi_cdc_is_rx_ready+0xc>)
  400892:	4798      	blx	r3
}
  400894:	bd08      	pop	{r3, pc}
  400896:	bf00      	nop
  400898:	004006c5 	.word	0x004006c5

0040089c <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  40089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008a0:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4008a2:	4b25      	ldr	r3, [pc, #148]	; (400938 <udi_cdc_multi_getc+0x9c>)
  4008a4:	f893 8006 	ldrb.w	r8, [r3, #6]
  4008a8:	f1b8 0f09 	cmp.w	r8, #9
  4008ac:	bf14      	ite	ne
  4008ae:	f04f 0800 	movne.w	r8, #0
  4008b2:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
  4008b6:	f04f 0a00 	mov.w	sl, #0
	cpu_irq_disable();
  4008ba:	4c20      	ldr	r4, [pc, #128]	; (40093c <udi_cdc_multi_getc+0xa0>)
  4008bc:	46d1      	mov	r9, sl
  4008be:	4657      	mov	r7, sl

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4008c0:	4d1f      	ldr	r5, [pc, #124]	; (400940 <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  4008c2:	4e20      	ldr	r6, [pc, #128]	; (400944 <udi_cdc_multi_getc+0xa8>)
  4008c4:	e004      	b.n	4008d0 <udi_cdc_multi_getc+0x34>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
  4008c6:	428b      	cmp	r3, r1
  4008c8:	d323      	bcc.n	400912 <udi_cdc_multi_getc+0x76>
		if (!udi_cdc_data_running) {
  4008ca:	4b1f      	ldr	r3, [pc, #124]	; (400948 <udi_cdc_multi_getc+0xac>)
  4008cc:	781b      	ldrb	r3, [r3, #0]
  4008ce:	b1d3      	cbz	r3, 400906 <udi_cdc_multi_getc+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008d0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4008d4:	fab3 f383 	clz	r3, r3
  4008d8:	095b      	lsrs	r3, r3, #5
  4008da:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4008dc:	b672      	cpsid	i
  4008de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008e2:	7027      	strb	r7, [r4, #0]
	return flags;
  4008e4:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  4008e6:	882b      	ldrh	r3, [r5, #0]
  4008e8:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  4008ea:	7832      	ldrb	r2, [r6, #0]
  4008ec:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  4008ee:	4917      	ldr	r1, [pc, #92]	; (40094c <udi_cdc_multi_getc+0xb0>)
  4008f0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  4008f4:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  4008f6:	2800      	cmp	r0, #0
  4008f8:	d0e5      	beq.n	4008c6 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
  4008fa:	2001      	movs	r0, #1
  4008fc:	7020      	strb	r0, [r4, #0]
  4008fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400902:	b662      	cpsie	i
  400904:	e7df      	b.n	4008c6 <udi_cdc_multi_getc+0x2a>
			return 0;
  400906:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  40090a:	4650      	mov	r0, sl
  40090c:	b002      	add	sp, #8
  40090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400912:	490f      	ldr	r1, [pc, #60]	; (400950 <udi_cdc_multi_getc+0xb4>)
  400914:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  400918:	5cd2      	ldrb	r2, [r2, r3]
  40091a:	ea42 0a0a 	orr.w	sl, r2, sl
	udi_cdc_rx_pos[port] = pos+1;
  40091e:	3301      	adds	r3, #1
  400920:	b29b      	uxth	r3, r3
  400922:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
  400924:	4648      	mov	r0, r9
  400926:	4b0b      	ldr	r3, [pc, #44]	; (400954 <udi_cdc_multi_getc+0xb8>)
  400928:	4798      	blx	r3
	if (b_databit_9) {
  40092a:	f1b8 0f00 	cmp.w	r8, #0
  40092e:	d0ec      	beq.n	40090a <udi_cdc_multi_getc+0x6e>
		rx_data = rx_data << 8;
  400930:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
		b_databit_9 = false;
  400934:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
  400936:	e7cb      	b.n	4008d0 <udi_cdc_multi_getc+0x34>
  400938:	20000610 	.word	0x20000610
  40093c:	200001c0 	.word	0x200001c0
  400940:	200006a4 	.word	0x200006a4
  400944:	200006a0 	.word	0x200006a0
  400948:	2000060e 	.word	0x2000060e
  40094c:	2000069c 	.word	0x2000069c
  400950:	2000061c 	.word	0x2000061c
  400954:	004006d9 	.word	0x004006d9

00400958 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400958:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  40095a:	2000      	movs	r0, #0
  40095c:	4b01      	ldr	r3, [pc, #4]	; (400964 <udi_cdc_getc+0xc>)
  40095e:	4798      	blx	r3
}
  400960:	bd08      	pop	{r3, pc}
  400962:	bf00      	nop
  400964:	0040089d 	.word	0x0040089d

00400968 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400968:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40096a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40096e:	fab3 f383 	clz	r3, r3
  400972:	095b      	lsrs	r3, r3, #5
  400974:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400976:	b672      	cpsid	i
  400978:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40097c:	2200      	movs	r2, #0
  40097e:	4b14      	ldr	r3, [pc, #80]	; (4009d0 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  400980:	701a      	strb	r2, [r3, #0]
	return flags;
  400982:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400984:	4b13      	ldr	r3, [pc, #76]	; (4009d4 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400986:	781b      	ldrb	r3, [r3, #0]
  400988:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  40098a:	4913      	ldr	r1, [pc, #76]	; (4009d8 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  40098c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400990:	2840      	cmp	r0, #64	; 0x40
  400992:	d00a      	beq.n	4009aa <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400994:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
  400998:	b12a      	cbz	r2, 4009a6 <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
  40099a:	2201      	movs	r2, #1
  40099c:	4b0c      	ldr	r3, [pc, #48]	; (4009d0 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  40099e:	701a      	strb	r2, [r3, #0]
  4009a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009a4:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  4009a6:	b002      	add	sp, #8
  4009a8:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  4009aa:	490c      	ldr	r1, [pc, #48]	; (4009dc <udi_cdc_multi_get_free_tx_buffer+0x74>)
  4009ac:	7809      	ldrb	r1, [r1, #0]
  4009ae:	2900      	cmp	r1, #0
  4009b0:	d1f0      	bne.n	400994 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  4009b2:	490b      	ldr	r1, [pc, #44]	; (4009e0 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  4009b4:	7809      	ldrb	r1, [r1, #0]
  4009b6:	2900      	cmp	r1, #0
  4009b8:	d1ec      	bne.n	400994 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			udi_cdc_tx_both_buf_to_send[port] = true;
  4009ba:	2001      	movs	r0, #1
  4009bc:	4908      	ldr	r1, [pc, #32]	; (4009e0 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  4009be:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  4009c0:	fab3 f383 	clz	r3, r3
  4009c4:	095b      	lsrs	r3, r3, #5
  4009c6:	4903      	ldr	r1, [pc, #12]	; (4009d4 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4009c8:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  4009ca:	2000      	movs	r0, #0
  4009cc:	e7e2      	b.n	400994 <udi_cdc_multi_get_free_tx_buffer+0x2c>
  4009ce:	bf00      	nop
  4009d0:	200001c0 	.word	0x200001c0
  4009d4:	2000073c 	.word	0x2000073c
  4009d8:	20000738 	.word	0x20000738
  4009dc:	20000744 	.word	0x20000744
  4009e0:	200006b4 	.word	0x200006b4

004009e4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  4009e4:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  4009e6:	4b03      	ldr	r3, [pc, #12]	; (4009f4 <udi_cdc_multi_is_tx_ready+0x10>)
  4009e8:	4798      	blx	r3
}
  4009ea:	3000      	adds	r0, #0
  4009ec:	bf18      	it	ne
  4009ee:	2001      	movne	r0, #1
  4009f0:	bd08      	pop	{r3, pc}
  4009f2:	bf00      	nop
  4009f4:	00400969 	.word	0x00400969

004009f8 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  4009f8:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
  4009fa:	2000      	movs	r0, #0
  4009fc:	4b01      	ldr	r3, [pc, #4]	; (400a04 <udi_cdc_is_tx_ready+0xc>)
  4009fe:	4798      	blx	r3
}
  400a00:	bd08      	pop	{r3, pc}
  400a02:	bf00      	nop
  400a04:	004009e5 	.word	0x004009e5

00400a08 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a0c:	b082      	sub	sp, #8
  400a0e:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400a10:	4b1d      	ldr	r3, [pc, #116]	; (400a88 <udi_cdc_multi_putc+0x80>)
  400a12:	799d      	ldrb	r5, [r3, #6]
  400a14:	2d09      	cmp	r5, #9
  400a16:	bf14      	ite	ne
  400a18:	2500      	movne	r5, #0
  400a1a:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400a1c:	4e1b      	ldr	r6, [pc, #108]	; (400a8c <udi_cdc_multi_putc+0x84>)
	cpu_irq_disable();
  400a1e:	4f1c      	ldr	r7, [pc, #112]	; (400a90 <udi_cdc_multi_putc+0x88>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400a20:	f8df 807c 	ldr.w	r8, [pc, #124]	; 400aa0 <udi_cdc_multi_putc+0x98>
  400a24:	e022      	b.n	400a6c <udi_cdc_multi_putc+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a26:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a2a:	fab3 f383 	clz	r3, r3
  400a2e:	095b      	lsrs	r3, r3, #5
  400a30:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a32:	b672      	cpsid	i
  400a34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a38:	2300      	movs	r3, #0
  400a3a:	703b      	strb	r3, [r7, #0]
	return flags;
  400a3c:	9801      	ldr	r0, [sp, #4]
  400a3e:	f898 3000 	ldrb.w	r3, [r8]
  400a42:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400a44:	4a13      	ldr	r2, [pc, #76]	; (400a94 <udi_cdc_multi_putc+0x8c>)
  400a46:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  400a4a:	f101 0e01 	add.w	lr, r1, #1
  400a4e:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
  400a52:	4a11      	ldr	r2, [pc, #68]	; (400a98 <udi_cdc_multi_putc+0x90>)
  400a54:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400a58:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
  400a5a:	b120      	cbz	r0, 400a66 <udi_cdc_multi_putc+0x5e>
		cpu_irq_enable();
  400a5c:	2301      	movs	r3, #1
  400a5e:	703b      	strb	r3, [r7, #0]
  400a60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a64:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400a66:	b165      	cbz	r5, 400a82 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400a68:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
  400a6a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400a6c:	2000      	movs	r0, #0
  400a6e:	47b0      	blx	r6
  400a70:	2800      	cmp	r0, #0
  400a72:	d1d8      	bne.n	400a26 <udi_cdc_multi_putc+0x1e>
		if (!udi_cdc_data_running) {
  400a74:	4b09      	ldr	r3, [pc, #36]	; (400a9c <udi_cdc_multi_putc+0x94>)
  400a76:	781b      	ldrb	r3, [r3, #0]
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d1f7      	bne.n	400a6c <udi_cdc_multi_putc+0x64>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
  400a7c:	b002      	add	sp, #8
  400a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
  400a82:	2001      	movs	r0, #1
  400a84:	e7fa      	b.n	400a7c <udi_cdc_multi_putc+0x74>
  400a86:	bf00      	nop
  400a88:	20000610 	.word	0x20000610
  400a8c:	004009e5 	.word	0x004009e5
  400a90:	200001c0 	.word	0x200001c0
  400a94:	20000738 	.word	0x20000738
  400a98:	200006b8 	.word	0x200006b8
  400a9c:	2000060e 	.word	0x2000060e
  400aa0:	2000073c 	.word	0x2000073c

00400aa4 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400aa4:	b508      	push	{r3, lr}
	return udi_cdc_multi_putc(0, value);
  400aa6:	4601      	mov	r1, r0
  400aa8:	2000      	movs	r0, #0
  400aaa:	4b01      	ldr	r3, [pc, #4]	; (400ab0 <udi_cdc_putc+0xc>)
  400aac:	4798      	blx	r3
}
  400aae:	bd08      	pop	{r3, pc}
  400ab0:	00400a09 	.word	0x00400a09

00400ab4 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400ab4:	4b10      	ldr	r3, [pc, #64]	; (400af8 <udc_next_desc_in_iface+0x44>)
  400ab6:	681b      	ldr	r3, [r3, #0]
  400ab8:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400aba:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400abc:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400abe:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400ac0:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400ac2:	4290      	cmp	r0, r2
  400ac4:	d211      	bcs.n	400aea <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400ac6:	7843      	ldrb	r3, [r0, #1]
  400ac8:	2b04      	cmp	r3, #4
  400aca:	d010      	beq.n	400aee <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400acc:	428b      	cmp	r3, r1
  400ace:	d009      	beq.n	400ae4 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400ad0:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400ad2:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400ad4:	4290      	cmp	r0, r2
  400ad6:	d206      	bcs.n	400ae6 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400ad8:	7843      	ldrb	r3, [r0, #1]
  400ada:	2b04      	cmp	r3, #4
  400adc:	d009      	beq.n	400af2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400ade:	428b      	cmp	r3, r1
  400ae0:	d1f6      	bne.n	400ad0 <udc_next_desc_in_iface+0x1c>
  400ae2:	e007      	b.n	400af4 <udc_next_desc_in_iface+0x40>
  400ae4:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  400ae6:	2000      	movs	r0, #0
  400ae8:	4770      	bx	lr
  400aea:	2000      	movs	r0, #0
  400aec:	4770      	bx	lr
  400aee:	2000      	movs	r0, #0
  400af0:	4770      	bx	lr
  400af2:	2000      	movs	r0, #0
}
  400af4:	4770      	bx	lr
  400af6:	bf00      	nop
  400af8:	20000760 	.word	0x20000760

00400afc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400afc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400afe:	4b03      	ldr	r3, [pc, #12]	; (400b0c <udc_valid_address+0x10>)
  400b00:	7898      	ldrb	r0, [r3, #2]
  400b02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400b06:	4b02      	ldr	r3, [pc, #8]	; (400b10 <udc_valid_address+0x14>)
  400b08:	4798      	blx	r3
  400b0a:	bd08      	pop	{r3, pc}
  400b0c:	20000854 	.word	0x20000854
  400b10:	00402acd 	.word	0x00402acd

00400b14 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400b14:	4b19      	ldr	r3, [pc, #100]	; (400b7c <udc_update_iface_desc+0x68>)
  400b16:	781b      	ldrb	r3, [r3, #0]
  400b18:	b34b      	cbz	r3, 400b6e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b1a:	4b19      	ldr	r3, [pc, #100]	; (400b80 <udc_update_iface_desc+0x6c>)
  400b1c:	681b      	ldr	r3, [r3, #0]
  400b1e:	681b      	ldr	r3, [r3, #0]
  400b20:	791a      	ldrb	r2, [r3, #4]
  400b22:	4282      	cmp	r2, r0
  400b24:	d925      	bls.n	400b72 <udc_update_iface_desc+0x5e>
{
  400b26:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400b28:	4a16      	ldr	r2, [pc, #88]	; (400b84 <udc_update_iface_desc+0x70>)
  400b2a:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400b2c:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400b2e:	441c      	add	r4, r3
	while (ptr_end_desc >
  400b30:	42a3      	cmp	r3, r4
  400b32:	d220      	bcs.n	400b76 <udc_update_iface_desc+0x62>
  400b34:	2500      	movs	r5, #0
  400b36:	2601      	movs	r6, #1
  400b38:	e007      	b.n	400b4a <udc_update_iface_desc+0x36>
  400b3a:	4a12      	ldr	r2, [pc, #72]	; (400b84 <udc_update_iface_desc+0x70>)
  400b3c:	6013      	str	r3, [r2, #0]
  400b3e:	e00f      	b.n	400b60 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400b40:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400b42:	4413      	add	r3, r2
  400b44:	4635      	mov	r5, r6
	while (ptr_end_desc >
  400b46:	42a3      	cmp	r3, r4
  400b48:	d20c      	bcs.n	400b64 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400b4a:	785a      	ldrb	r2, [r3, #1]
  400b4c:	2a04      	cmp	r2, #4
  400b4e:	d1f7      	bne.n	400b40 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400b50:	789a      	ldrb	r2, [r3, #2]
  400b52:	4282      	cmp	r2, r0
  400b54:	d1f4      	bne.n	400b40 <udc_update_iface_desc+0x2c>
  400b56:	78da      	ldrb	r2, [r3, #3]
  400b58:	428a      	cmp	r2, r1
  400b5a:	d1f1      	bne.n	400b40 <udc_update_iface_desc+0x2c>
  400b5c:	2d00      	cmp	r5, #0
  400b5e:	d1ec      	bne.n	400b3a <udc_update_iface_desc+0x26>
				return true; // Interface found
  400b60:	2001      	movs	r0, #1
  400b62:	e002      	b.n	400b6a <udc_update_iface_desc+0x56>
  400b64:	4a07      	ldr	r2, [pc, #28]	; (400b84 <udc_update_iface_desc+0x70>)
  400b66:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400b68:	2000      	movs	r0, #0
}
  400b6a:	bc70      	pop	{r4, r5, r6}
  400b6c:	4770      	bx	lr
		return false;
  400b6e:	2000      	movs	r0, #0
  400b70:	4770      	bx	lr
		return false;
  400b72:	2000      	movs	r0, #0
  400b74:	4770      	bx	lr
	return false; // Interface not found
  400b76:	2000      	movs	r0, #0
  400b78:	e7f7      	b.n	400b6a <udc_update_iface_desc+0x56>
  400b7a:	bf00      	nop
  400b7c:	2000075c 	.word	0x2000075c
  400b80:	20000760 	.word	0x20000760
  400b84:	20000764 	.word	0x20000764

00400b88 <udc_iface_disable>:
{
  400b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400b8c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b8e:	2100      	movs	r1, #0
  400b90:	4b13      	ldr	r3, [pc, #76]	; (400be0 <udc_iface_disable+0x58>)
  400b92:	4798      	blx	r3
  400b94:	4680      	mov	r8, r0
  400b96:	b910      	cbnz	r0, 400b9e <udc_iface_disable+0x16>
}
  400b98:	4640      	mov	r0, r8
  400b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b9e:	4b11      	ldr	r3, [pc, #68]	; (400be4 <udc_iface_disable+0x5c>)
  400ba0:	681b      	ldr	r3, [r3, #0]
  400ba2:	685b      	ldr	r3, [r3, #4]
  400ba4:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400ba8:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400bac:	4798      	blx	r3
  400bae:	4601      	mov	r1, r0
  400bb0:	4620      	mov	r0, r4
  400bb2:	4b0b      	ldr	r3, [pc, #44]	; (400be0 <udc_iface_disable+0x58>)
  400bb4:	4798      	blx	r3
  400bb6:	4680      	mov	r8, r0
  400bb8:	2800      	cmp	r0, #0
  400bba:	d0ed      	beq.n	400b98 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400bbc:	4b0a      	ldr	r3, [pc, #40]	; (400be8 <udc_iface_disable+0x60>)
  400bbe:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400bc0:	2605      	movs	r6, #5
  400bc2:	4d0a      	ldr	r5, [pc, #40]	; (400bec <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400bc4:	4f0a      	ldr	r7, [pc, #40]	; (400bf0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400bc6:	4631      	mov	r1, r6
  400bc8:	4620      	mov	r0, r4
  400bca:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400bcc:	4604      	mov	r4, r0
  400bce:	b110      	cbz	r0, 400bd6 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400bd0:	7880      	ldrb	r0, [r0, #2]
  400bd2:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400bd4:	e7f7      	b.n	400bc6 <udc_iface_disable+0x3e>
	udi_api->disable();
  400bd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400bda:	4798      	blx	r3
	return true;
  400bdc:	e7dc      	b.n	400b98 <udc_iface_disable+0x10>
  400bde:	bf00      	nop
  400be0:	00400b15 	.word	0x00400b15
  400be4:	20000760 	.word	0x20000760
  400be8:	20000764 	.word	0x20000764
  400bec:	00400ab5 	.word	0x00400ab5
  400bf0:	00402c3d 	.word	0x00402c3d

00400bf4 <udc_iface_enable>:
{
  400bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bf8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400bfa:	4b10      	ldr	r3, [pc, #64]	; (400c3c <udc_iface_enable+0x48>)
  400bfc:	4798      	blx	r3
  400bfe:	4603      	mov	r3, r0
  400c00:	b1c8      	cbz	r0, 400c36 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400c02:	4b0f      	ldr	r3, [pc, #60]	; (400c40 <udc_iface_enable+0x4c>)
  400c04:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400c06:	2605      	movs	r6, #5
  400c08:	4d0e      	ldr	r5, [pc, #56]	; (400c44 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400c0a:	4f0f      	ldr	r7, [pc, #60]	; (400c48 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400c0c:	4631      	mov	r1, r6
  400c0e:	4620      	mov	r0, r4
  400c10:	47a8      	blx	r5
		if (NULL == ep_desc)
  400c12:	4604      	mov	r4, r0
  400c14:	b138      	cbz	r0, 400c26 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400c16:	8882      	ldrh	r2, [r0, #4]
  400c18:	78c1      	ldrb	r1, [r0, #3]
  400c1a:	7880      	ldrb	r0, [r0, #2]
  400c1c:	47b8      	blx	r7
  400c1e:	4603      	mov	r3, r0
  400c20:	2800      	cmp	r0, #0
  400c22:	d1f3      	bne.n	400c0c <udc_iface_enable+0x18>
  400c24:	e007      	b.n	400c36 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400c26:	4b09      	ldr	r3, [pc, #36]	; (400c4c <udc_iface_enable+0x58>)
  400c28:	681b      	ldr	r3, [r3, #0]
  400c2a:	685b      	ldr	r3, [r3, #4]
  400c2c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400c30:	681b      	ldr	r3, [r3, #0]
  400c32:	4798      	blx	r3
  400c34:	4603      	mov	r3, r0
}
  400c36:	4618      	mov	r0, r3
  400c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c3c:	00400b15 	.word	0x00400b15
  400c40:	20000764 	.word	0x20000764
  400c44:	00400ab5 	.word	0x00400ab5
  400c48:	00402b45 	.word	0x00402b45
  400c4c:	20000760 	.word	0x20000760

00400c50 <udc_start>:
{
  400c50:	b508      	push	{r3, lr}
	udd_enable();
  400c52:	4b01      	ldr	r3, [pc, #4]	; (400c58 <udc_start+0x8>)
  400c54:	4798      	blx	r3
  400c56:	bd08      	pop	{r3, pc}
  400c58:	004029ed 	.word	0x004029ed

00400c5c <udc_reset>:
{
  400c5c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  400c5e:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <udc_reset+0x38>)
  400c60:	781b      	ldrb	r3, [r3, #0]
  400c62:	b183      	cbz	r3, 400c86 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c64:	4b0c      	ldr	r3, [pc, #48]	; (400c98 <udc_reset+0x3c>)
  400c66:	681b      	ldr	r3, [r3, #0]
  400c68:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400c6a:	791b      	ldrb	r3, [r3, #4]
  400c6c:	b15b      	cbz	r3, 400c86 <udc_reset+0x2a>
  400c6e:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  400c70:	4e0a      	ldr	r6, [pc, #40]	; (400c9c <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c72:	4d09      	ldr	r5, [pc, #36]	; (400c98 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  400c74:	4620      	mov	r0, r4
  400c76:	47b0      	blx	r6
				iface_num++) {
  400c78:	3401      	adds	r4, #1
  400c7a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c7c:	682b      	ldr	r3, [r5, #0]
  400c7e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400c80:	791b      	ldrb	r3, [r3, #4]
  400c82:	42a3      	cmp	r3, r4
  400c84:	d8f6      	bhi.n	400c74 <udc_reset+0x18>
	udc_num_configuration = 0;
  400c86:	2200      	movs	r2, #0
  400c88:	4b02      	ldr	r3, [pc, #8]	; (400c94 <udc_reset+0x38>)
  400c8a:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  400c8c:	2201      	movs	r2, #1
  400c8e:	4b04      	ldr	r3, [pc, #16]	; (400ca0 <udc_reset+0x44>)
  400c90:	801a      	strh	r2, [r3, #0]
  400c92:	bd70      	pop	{r4, r5, r6, pc}
  400c94:	2000075c 	.word	0x2000075c
  400c98:	20000760 	.word	0x20000760
  400c9c:	00400b89 	.word	0x00400b89
  400ca0:	20000752 	.word	0x20000752

00400ca4 <udc_sof_notify>:
{
  400ca4:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  400ca6:	4b0d      	ldr	r3, [pc, #52]	; (400cdc <udc_sof_notify+0x38>)
  400ca8:	781b      	ldrb	r3, [r3, #0]
  400caa:	b1b3      	cbz	r3, 400cda <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cac:	4b0c      	ldr	r3, [pc, #48]	; (400ce0 <udc_sof_notify+0x3c>)
  400cae:	681b      	ldr	r3, [r3, #0]
  400cb0:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400cb2:	7912      	ldrb	r2, [r2, #4]
  400cb4:	b18a      	cbz	r2, 400cda <udc_sof_notify+0x36>
  400cb6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cb8:	4d09      	ldr	r5, [pc, #36]	; (400ce0 <udc_sof_notify+0x3c>)
  400cba:	e006      	b.n	400cca <udc_sof_notify+0x26>
				iface_num++) {
  400cbc:	3401      	adds	r4, #1
  400cbe:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cc0:	682b      	ldr	r3, [r5, #0]
  400cc2:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400cc4:	7912      	ldrb	r2, [r2, #4]
  400cc6:	42a2      	cmp	r2, r4
  400cc8:	d907      	bls.n	400cda <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400cca:	685b      	ldr	r3, [r3, #4]
  400ccc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400cd0:	691b      	ldr	r3, [r3, #16]
  400cd2:	2b00      	cmp	r3, #0
  400cd4:	d0f2      	beq.n	400cbc <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400cd6:	4798      	blx	r3
  400cd8:	e7f0      	b.n	400cbc <udc_sof_notify+0x18>
  400cda:	bd38      	pop	{r3, r4, r5, pc}
  400cdc:	2000075c 	.word	0x2000075c
  400ce0:	20000760 	.word	0x20000760

00400ce4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400ce6:	4b88      	ldr	r3, [pc, #544]	; (400f08 <udc_process_setup+0x224>)
  400ce8:	2200      	movs	r2, #0
  400cea:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400cec:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400cee:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400cf0:	781b      	ldrb	r3, [r3, #0]
  400cf2:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cf6:	d114      	bne.n	400d22 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400cf8:	f013 0f60 	tst.w	r3, #96	; 0x60
  400cfc:	f000 80d5 	beq.w	400eaa <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400d00:	4b81      	ldr	r3, [pc, #516]	; (400f08 <udc_process_setup+0x224>)
  400d02:	781b      	ldrb	r3, [r3, #0]
  400d04:	f003 031f 	and.w	r3, r3, #31
  400d08:	2b01      	cmp	r3, #1
  400d0a:	f000 816e 	beq.w	400fea <udc_process_setup+0x306>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400d0e:	4b7e      	ldr	r3, [pc, #504]	; (400f08 <udc_process_setup+0x224>)
  400d10:	781b      	ldrb	r3, [r3, #0]
  400d12:	f003 031f 	and.w	r3, r3, #31
  400d16:	2b02      	cmp	r3, #2
  400d18:	f000 81c9 	beq.w	4010ae <udc_process_setup+0x3ca>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400d1c:	2300      	movs	r3, #0
#endif
}
  400d1e:	4618      	mov	r0, r3
  400d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400d22:	4a79      	ldr	r2, [pc, #484]	; (400f08 <udc_process_setup+0x224>)
  400d24:	88d2      	ldrh	r2, [r2, #6]
  400d26:	2a00      	cmp	r2, #0
  400d28:	f000 81ea 	beq.w	401100 <udc_process_setup+0x41c>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400d2c:	f013 0f60 	tst.w	r3, #96	; 0x60
  400d30:	d1e6      	bne.n	400d00 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400d32:	f013 031f 	ands.w	r3, r3, #31
  400d36:	d106      	bne.n	400d46 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400d38:	4973      	ldr	r1, [pc, #460]	; (400f08 <udc_process_setup+0x224>)
  400d3a:	7849      	ldrb	r1, [r1, #1]
  400d3c:	2906      	cmp	r1, #6
  400d3e:	d014      	beq.n	400d6a <udc_process_setup+0x86>
  400d40:	2908      	cmp	r1, #8
  400d42:	d074      	beq.n	400e2e <udc_process_setup+0x14a>
  400d44:	b151      	cbz	r1, 400d5c <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400d46:	2b01      	cmp	r3, #1
  400d48:	d079      	beq.n	400e3e <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400d4a:	2b02      	cmp	r3, #2
  400d4c:	d1d8      	bne.n	400d00 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400d4e:	4b6e      	ldr	r3, [pc, #440]	; (400f08 <udc_process_setup+0x224>)
  400d50:	785b      	ldrb	r3, [r3, #1]
  400d52:	2b00      	cmp	r3, #0
  400d54:	f000 809b 	beq.w	400e8e <udc_process_setup+0x1aa>
	return false;
  400d58:	2300      	movs	r3, #0
  400d5a:	e18a      	b.n	401072 <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400d5c:	2a02      	cmp	r2, #2
  400d5e:	d1d6      	bne.n	400d0e <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400d60:	2102      	movs	r1, #2
  400d62:	486a      	ldr	r0, [pc, #424]	; (400f0c <udc_process_setup+0x228>)
  400d64:	4b6a      	ldr	r3, [pc, #424]	; (400f10 <udc_process_setup+0x22c>)
  400d66:	4798      	blx	r3
  400d68:	e0bb      	b.n	400ee2 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400d6a:	4b67      	ldr	r3, [pc, #412]	; (400f08 <udc_process_setup+0x224>)
  400d6c:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400d6e:	0a13      	lsrs	r3, r2, #8
  400d70:	3b01      	subs	r3, #1
  400d72:	2b0e      	cmp	r3, #14
  400d74:	f200 817a 	bhi.w	40106c <udc_process_setup+0x388>
  400d78:	e8df f013 	tbh	[pc, r3, lsl #1]
  400d7c:	001d000f 	.word	0x001d000f
  400d80:	01780037 	.word	0x01780037
  400d84:	01780178 	.word	0x01780178
  400d88:	01780178 	.word	0x01780178
  400d8c:	01780178 	.word	0x01780178
  400d90:	01780178 	.word	0x01780178
  400d94:	01780178 	.word	0x01780178
  400d98:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  400d9a:	4b5e      	ldr	r3, [pc, #376]	; (400f14 <udc_process_setup+0x230>)
  400d9c:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  400d9e:	7801      	ldrb	r1, [r0, #0]
  400da0:	4b5b      	ldr	r3, [pc, #364]	; (400f10 <udc_process_setup+0x22c>)
  400da2:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400da4:	4b58      	ldr	r3, [pc, #352]	; (400f08 <udc_process_setup+0x224>)
  400da6:	88da      	ldrh	r2, [r3, #6]
  400da8:	899b      	ldrh	r3, [r3, #12]
  400daa:	4293      	cmp	r3, r2
  400dac:	f240 8099 	bls.w	400ee2 <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400db0:	4b55      	ldr	r3, [pc, #340]	; (400f08 <udc_process_setup+0x224>)
  400db2:	819a      	strh	r2, [r3, #12]
  400db4:	e095      	b.n	400ee2 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400db6:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  400db8:	4b56      	ldr	r3, [pc, #344]	; (400f14 <udc_process_setup+0x230>)
  400dba:	681b      	ldr	r3, [r3, #0]
  400dbc:	7c5b      	ldrb	r3, [r3, #17]
  400dbe:	4293      	cmp	r3, r2
  400dc0:	d9a5      	bls.n	400d0e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  400dc2:	4b54      	ldr	r3, [pc, #336]	; (400f14 <udc_process_setup+0x230>)
  400dc4:	685b      	ldr	r3, [r3, #4]
  400dc6:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  400dca:	8841      	ldrh	r1, [r0, #2]
  400dcc:	4b50      	ldr	r3, [pc, #320]	; (400f10 <udc_process_setup+0x22c>)
  400dce:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400dd0:	4b4d      	ldr	r3, [pc, #308]	; (400f08 <udc_process_setup+0x224>)
  400dd2:	689b      	ldr	r3, [r3, #8]
  400dd4:	2202      	movs	r2, #2
  400dd6:	705a      	strb	r2, [r3, #1]
  400dd8:	e7e4      	b.n	400da4 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  400dda:	4b4e      	ldr	r3, [pc, #312]	; (400f14 <udc_process_setup+0x230>)
  400ddc:	6898      	ldr	r0, [r3, #8]
  400dde:	2800      	cmp	r0, #0
  400de0:	d095      	beq.n	400d0e <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400de2:	8841      	ldrh	r1, [r0, #2]
  400de4:	4b4a      	ldr	r3, [pc, #296]	; (400f10 <udc_process_setup+0x22c>)
  400de6:	4798      	blx	r3
  400de8:	e7dc      	b.n	400da4 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400dea:	b2d2      	uxtb	r2, r2
  400dec:	2a01      	cmp	r2, #1
  400dee:	d01b      	beq.n	400e28 <udc_process_setup+0x144>
  400df0:	b1aa      	cbz	r2, 400e1e <udc_process_setup+0x13a>
  400df2:	2a02      	cmp	r2, #2
  400df4:	d184      	bne.n	400d00 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  400df6:	4a48      	ldr	r2, [pc, #288]	; (400f18 <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  400df8:	210f      	movs	r1, #15
  400dfa:	3a01      	subs	r2, #1
  400dfc:	4847      	ldr	r0, [pc, #284]	; (400f1c <udc_process_setup+0x238>)
  400dfe:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  400e00:	f812 4f01 	ldrb.w	r4, [r2, #1]!
  400e04:	f820 4b02 	strh.w	r4, [r0], #2
		for(i = 0; i < str_length; i++) {
  400e08:	3301      	adds	r3, #1
  400e0a:	b2db      	uxtb	r3, r3
  400e0c:	428b      	cmp	r3, r1
  400e0e:	d3f7      	bcc.n	400e00 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  400e10:	0049      	lsls	r1, r1, #1
  400e12:	3102      	adds	r1, #2
  400e14:	4842      	ldr	r0, [pc, #264]	; (400f20 <udc_process_setup+0x23c>)
  400e16:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  400e18:	4b3d      	ldr	r3, [pc, #244]	; (400f10 <udc_process_setup+0x22c>)
  400e1a:	4798      	blx	r3
  400e1c:	e7c2      	b.n	400da4 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400e1e:	2104      	movs	r1, #4
  400e20:	4840      	ldr	r0, [pc, #256]	; (400f24 <udc_process_setup+0x240>)
  400e22:	4b3b      	ldr	r3, [pc, #236]	; (400f10 <udc_process_setup+0x22c>)
  400e24:	4798      	blx	r3
  400e26:	e7bd      	b.n	400da4 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  400e28:	4a3f      	ldr	r2, [pc, #252]	; (400f28 <udc_process_setup+0x244>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  400e2a:	2109      	movs	r1, #9
  400e2c:	e7e5      	b.n	400dfa <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400e2e:	2a01      	cmp	r2, #1
  400e30:	f47f af6d 	bne.w	400d0e <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  400e34:	2101      	movs	r1, #1
  400e36:	483d      	ldr	r0, [pc, #244]	; (400f2c <udc_process_setup+0x248>)
  400e38:	4b35      	ldr	r3, [pc, #212]	; (400f10 <udc_process_setup+0x22c>)
  400e3a:	4798      	blx	r3
  400e3c:	e051      	b.n	400ee2 <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  400e3e:	4932      	ldr	r1, [pc, #200]	; (400f08 <udc_process_setup+0x224>)
  400e40:	7849      	ldrb	r1, [r1, #1]
  400e42:	290a      	cmp	r1, #10
  400e44:	d181      	bne.n	400d4a <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400e46:	2a01      	cmp	r2, #1
  400e48:	f040 80cf 	bne.w	400fea <udc_process_setup+0x306>
	if (!udc_num_configuration) {
  400e4c:	4b37      	ldr	r3, [pc, #220]	; (400f2c <udc_process_setup+0x248>)
  400e4e:	781b      	ldrb	r3, [r3, #0]
  400e50:	2b00      	cmp	r3, #0
  400e52:	f000 80ca 	beq.w	400fea <udc_process_setup+0x306>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400e56:	4b2c      	ldr	r3, [pc, #176]	; (400f08 <udc_process_setup+0x224>)
  400e58:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400e5a:	4b35      	ldr	r3, [pc, #212]	; (400f30 <udc_process_setup+0x24c>)
  400e5c:	681d      	ldr	r5, [r3, #0]
  400e5e:	682b      	ldr	r3, [r5, #0]
  400e60:	791b      	ldrb	r3, [r3, #4]
  400e62:	42a3      	cmp	r3, r4
  400e64:	f240 80c1 	bls.w	400fea <udc_process_setup+0x306>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400e68:	2100      	movs	r1, #0
  400e6a:	4620      	mov	r0, r4
  400e6c:	4b31      	ldr	r3, [pc, #196]	; (400f34 <udc_process_setup+0x250>)
  400e6e:	4798      	blx	r3
  400e70:	2800      	cmp	r0, #0
  400e72:	f43f af45 	beq.w	400d00 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e76:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400e78:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400e7c:	68db      	ldr	r3, [r3, #12]
  400e7e:	4798      	blx	r3
  400e80:	4b2d      	ldr	r3, [pc, #180]	; (400f38 <udc_process_setup+0x254>)
  400e82:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400e84:	2101      	movs	r1, #1
  400e86:	4618      	mov	r0, r3
  400e88:	4b21      	ldr	r3, [pc, #132]	; (400f10 <udc_process_setup+0x22c>)
  400e8a:	4798      	blx	r3
  400e8c:	e029      	b.n	400ee2 <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400e8e:	2a02      	cmp	r2, #2
  400e90:	f47f af3d 	bne.w	400d0e <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400e94:	4b1c      	ldr	r3, [pc, #112]	; (400f08 <udc_process_setup+0x224>)
  400e96:	7918      	ldrb	r0, [r3, #4]
  400e98:	4b28      	ldr	r3, [pc, #160]	; (400f3c <udc_process_setup+0x258>)
  400e9a:	4798      	blx	r3
  400e9c:	4b28      	ldr	r3, [pc, #160]	; (400f40 <udc_process_setup+0x25c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400e9e:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400ea0:	2102      	movs	r1, #2
  400ea2:	4618      	mov	r0, r3
  400ea4:	4b1a      	ldr	r3, [pc, #104]	; (400f10 <udc_process_setup+0x22c>)
  400ea6:	4798      	blx	r3
  400ea8:	e01b      	b.n	400ee2 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400eaa:	f013 031f 	ands.w	r3, r3, #31
  400eae:	f040 8085 	bne.w	400fbc <udc_process_setup+0x2d8>
			switch (udd_g_ctrlreq.req.bRequest) {
  400eb2:	4a15      	ldr	r2, [pc, #84]	; (400f08 <udc_process_setup+0x224>)
  400eb4:	7852      	ldrb	r2, [r2, #1]
  400eb6:	3a01      	subs	r2, #1
  400eb8:	2a08      	cmp	r2, #8
  400eba:	d87f      	bhi.n	400fbc <udc_process_setup+0x2d8>
  400ebc:	e8df f012 	tbh	[pc, r2, lsl #1]
  400ec0:	007e0013 	.word	0x007e0013
  400ec4:	007e00d8 	.word	0x007e00d8
  400ec8:	007e0009 	.word	0x007e0009
  400ecc:	007e007e 	.word	0x007e007e
  400ed0:	0044      	.short	0x0044
	if (udd_g_ctrlreq.req.wLength) {
  400ed2:	4b0d      	ldr	r3, [pc, #52]	; (400f08 <udc_process_setup+0x224>)
  400ed4:	88db      	ldrh	r3, [r3, #6]
  400ed6:	2b00      	cmp	r3, #0
  400ed8:	f47f af19 	bne.w	400d0e <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  400edc:	4a19      	ldr	r2, [pc, #100]	; (400f44 <udc_process_setup+0x260>)
  400ede:	4b0a      	ldr	r3, [pc, #40]	; (400f08 <udc_process_setup+0x224>)
  400ee0:	611a      	str	r2, [r3, #16]
			return true;
  400ee2:	2301      	movs	r3, #1
  400ee4:	e71b      	b.n	400d1e <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400ee6:	4b08      	ldr	r3, [pc, #32]	; (400f08 <udc_process_setup+0x224>)
  400ee8:	88db      	ldrh	r3, [r3, #6]
  400eea:	2b00      	cmp	r3, #0
  400eec:	f47f af0f 	bne.w	400d0e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400ef0:	4b05      	ldr	r3, [pc, #20]	; (400f08 <udc_process_setup+0x224>)
  400ef2:	885b      	ldrh	r3, [r3, #2]
  400ef4:	2b01      	cmp	r3, #1
  400ef6:	f47f af0a 	bne.w	400d0e <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400efa:	4a04      	ldr	r2, [pc, #16]	; (400f0c <udc_process_setup+0x228>)
  400efc:	8813      	ldrh	r3, [r2, #0]
  400efe:	f023 0302 	bic.w	r3, r3, #2
  400f02:	8013      	strh	r3, [r2, #0]
  400f04:	e7ed      	b.n	400ee2 <udc_process_setup+0x1fe>
  400f06:	bf00      	nop
  400f08:	20000854 	.word	0x20000854
  400f0c:	20000752 	.word	0x20000752
  400f10:	00402b39 	.word	0x00402b39
  400f14:	2000010c 	.word	0x2000010c
  400f18:	200001b0 	.word	0x200001b0
  400f1c:	20000182 	.word	0x20000182
  400f20:	20000180 	.word	0x20000180
  400f24:	200001a0 	.word	0x200001a0
  400f28:	200001a4 	.word	0x200001a4
  400f2c:	2000075c 	.word	0x2000075c
  400f30:	20000760 	.word	0x20000760
  400f34:	00400b15 	.word	0x00400b15
  400f38:	20000758 	.word	0x20000758
  400f3c:	00402c95 	.word	0x00402c95
  400f40:	20000754 	.word	0x20000754
  400f44:	00400afd 	.word	0x00400afd
	if (udd_g_ctrlreq.req.wLength) {
  400f48:	4b6f      	ldr	r3, [pc, #444]	; (401108 <udc_process_setup+0x424>)
  400f4a:	88db      	ldrh	r3, [r3, #6]
  400f4c:	2b00      	cmp	r3, #0
  400f4e:	f47f aede 	bne.w	400d0e <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  400f52:	4b6e      	ldr	r3, [pc, #440]	; (40110c <udc_process_setup+0x428>)
  400f54:	4798      	blx	r3
  400f56:	2800      	cmp	r0, #0
  400f58:	f43f aed2 	beq.w	400d00 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400f5c:	4b6a      	ldr	r3, [pc, #424]	; (401108 <udc_process_setup+0x424>)
  400f5e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400f60:	4b6b      	ldr	r3, [pc, #428]	; (401110 <udc_process_setup+0x42c>)
  400f62:	681b      	ldr	r3, [r3, #0]
  400f64:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400f66:	429a      	cmp	r2, r3
  400f68:	f73f aeca 	bgt.w	400d00 <udc_process_setup+0x1c>
	udc_reset();
  400f6c:	4b69      	ldr	r3, [pc, #420]	; (401114 <udc_process_setup+0x430>)
  400f6e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400f70:	4b65      	ldr	r3, [pc, #404]	; (401108 <udc_process_setup+0x424>)
  400f72:	789b      	ldrb	r3, [r3, #2]
  400f74:	4a68      	ldr	r2, [pc, #416]	; (401118 <udc_process_setup+0x434>)
  400f76:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400f78:	2b00      	cmp	r3, #0
  400f7a:	d0b2      	beq.n	400ee2 <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400f7c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400f80:	3b01      	subs	r3, #1
  400f82:	4a63      	ldr	r2, [pc, #396]	; (401110 <udc_process_setup+0x42c>)
  400f84:	6852      	ldr	r2, [r2, #4]
  400f86:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400f8a:	4964      	ldr	r1, [pc, #400]	; (40111c <udc_process_setup+0x438>)
  400f8c:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400f92:	791b      	ldrb	r3, [r3, #4]
  400f94:	2b00      	cmp	r3, #0
  400f96:	d0a4      	beq.n	400ee2 <udc_process_setup+0x1fe>
  400f98:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400f9a:	4626      	mov	r6, r4
  400f9c:	4d60      	ldr	r5, [pc, #384]	; (401120 <udc_process_setup+0x43c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f9e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400fa0:	4631      	mov	r1, r6
  400fa2:	4620      	mov	r0, r4
  400fa4:	47a8      	blx	r5
  400fa6:	2800      	cmp	r0, #0
  400fa8:	f43f aeaa 	beq.w	400d00 <udc_process_setup+0x1c>
			iface_num++) {
  400fac:	3401      	adds	r4, #1
  400fae:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400fb0:	683b      	ldr	r3, [r7, #0]
  400fb2:	681b      	ldr	r3, [r3, #0]
  400fb4:	791b      	ldrb	r3, [r3, #4]
  400fb6:	42a3      	cmp	r3, r4
  400fb8:	d8f2      	bhi.n	400fa0 <udc_process_setup+0x2bc>
  400fba:	e792      	b.n	400ee2 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400fbc:	2b01      	cmp	r3, #1
  400fbe:	d00a      	beq.n	400fd6 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400fc0:	2b02      	cmp	r3, #2
  400fc2:	f47f ae9d 	bne.w	400d00 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400fc6:	4b50      	ldr	r3, [pc, #320]	; (401108 <udc_process_setup+0x424>)
  400fc8:	785b      	ldrb	r3, [r3, #1]
  400fca:	2b01      	cmp	r3, #1
  400fcc:	d02b      	beq.n	401026 <udc_process_setup+0x342>
  400fce:	2b03      	cmp	r3, #3
  400fd0:	d039      	beq.n	401046 <udc_process_setup+0x362>
	return false;
  400fd2:	2300      	movs	r3, #0
  400fd4:	e04d      	b.n	401072 <udc_process_setup+0x38e>
			switch (udd_g_ctrlreq.req.bRequest) {
  400fd6:	4a4c      	ldr	r2, [pc, #304]	; (401108 <udc_process_setup+0x424>)
  400fd8:	7852      	ldrb	r2, [r2, #1]
  400fda:	2a0b      	cmp	r2, #11
  400fdc:	d1f0      	bne.n	400fc0 <udc_process_setup+0x2dc>
	if (udd_g_ctrlreq.req.wLength) {
  400fde:	4b4a      	ldr	r3, [pc, #296]	; (401108 <udc_process_setup+0x424>)
  400fe0:	88db      	ldrh	r3, [r3, #6]
  400fe2:	b913      	cbnz	r3, 400fea <udc_process_setup+0x306>
	if (!udc_num_configuration) {
  400fe4:	4b4c      	ldr	r3, [pc, #304]	; (401118 <udc_process_setup+0x434>)
  400fe6:	781b      	ldrb	r3, [r3, #0]
  400fe8:	b973      	cbnz	r3, 401008 <udc_process_setup+0x324>
	if (0 == udc_num_configuration) {
  400fea:	4b4b      	ldr	r3, [pc, #300]	; (401118 <udc_process_setup+0x434>)
  400fec:	781b      	ldrb	r3, [r3, #0]
  400fee:	2b00      	cmp	r3, #0
  400ff0:	f000 8088 	beq.w	401104 <udc_process_setup+0x420>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400ff4:	4b44      	ldr	r3, [pc, #272]	; (401108 <udc_process_setup+0x424>)
  400ff6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400ff8:	4b48      	ldr	r3, [pc, #288]	; (40111c <udc_process_setup+0x438>)
  400ffa:	681d      	ldr	r5, [r3, #0]
  400ffc:	682b      	ldr	r3, [r5, #0]
  400ffe:	791b      	ldrb	r3, [r3, #4]
  401000:	42a3      	cmp	r3, r4
  401002:	d83a      	bhi.n	40107a <udc_process_setup+0x396>
	return false;
  401004:	2300      	movs	r3, #0
  401006:	e68a      	b.n	400d1e <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401008:	4b3f      	ldr	r3, [pc, #252]	; (401108 <udc_process_setup+0x424>)
  40100a:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  40100c:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  40100e:	4620      	mov	r0, r4
  401010:	4b44      	ldr	r3, [pc, #272]	; (401124 <udc_process_setup+0x440>)
  401012:	4798      	blx	r3
  401014:	2800      	cmp	r0, #0
  401016:	f43f ae73 	beq.w	400d00 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  40101a:	b2e9      	uxtb	r1, r5
  40101c:	4620      	mov	r0, r4
  40101e:	4b40      	ldr	r3, [pc, #256]	; (401120 <udc_process_setup+0x43c>)
  401020:	4798      	blx	r3
  401022:	4603      	mov	r3, r0
  401024:	e025      	b.n	401072 <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
  401026:	4b38      	ldr	r3, [pc, #224]	; (401108 <udc_process_setup+0x424>)
  401028:	88db      	ldrh	r3, [r3, #6]
  40102a:	2b00      	cmp	r3, #0
  40102c:	f47f ae6f 	bne.w	400d0e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401030:	4b35      	ldr	r3, [pc, #212]	; (401108 <udc_process_setup+0x424>)
  401032:	885b      	ldrh	r3, [r3, #2]
  401034:	2b00      	cmp	r3, #0
  401036:	f47f ae6a 	bne.w	400d0e <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  40103a:	4b33      	ldr	r3, [pc, #204]	; (401108 <udc_process_setup+0x424>)
  40103c:	7918      	ldrb	r0, [r3, #4]
  40103e:	4b3a      	ldr	r3, [pc, #232]	; (401128 <udc_process_setup+0x444>)
  401040:	4798      	blx	r3
  401042:	4603      	mov	r3, r0
  401044:	e015      	b.n	401072 <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
  401046:	4b30      	ldr	r3, [pc, #192]	; (401108 <udc_process_setup+0x424>)
  401048:	88db      	ldrh	r3, [r3, #6]
  40104a:	2b00      	cmp	r3, #0
  40104c:	f47f ae5f 	bne.w	400d0e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401050:	4b2d      	ldr	r3, [pc, #180]	; (401108 <udc_process_setup+0x424>)
  401052:	885b      	ldrh	r3, [r3, #2]
  401054:	2b00      	cmp	r3, #0
  401056:	f47f ae5a 	bne.w	400d0e <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40105a:	4c2b      	ldr	r4, [pc, #172]	; (401108 <udc_process_setup+0x424>)
  40105c:	7920      	ldrb	r0, [r4, #4]
  40105e:	4b33      	ldr	r3, [pc, #204]	; (40112c <udc_process_setup+0x448>)
  401060:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401062:	7920      	ldrb	r0, [r4, #4]
  401064:	4b32      	ldr	r3, [pc, #200]	; (401130 <udc_process_setup+0x44c>)
  401066:	4798      	blx	r3
  401068:	4603      	mov	r3, r0
  40106a:	e002      	b.n	401072 <udc_process_setup+0x38e>
		return false;
  40106c:	2300      	movs	r3, #0
  40106e:	e000      	b.n	401072 <udc_process_setup+0x38e>
				return udc_req_std_dev_set_feature();
  401070:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  401072:	2b00      	cmp	r3, #0
  401074:	f47f ae53 	bne.w	400d1e <udc_process_setup+0x3a>
  401078:	e642      	b.n	400d00 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40107a:	2100      	movs	r1, #0
  40107c:	4620      	mov	r0, r4
  40107e:	4b2d      	ldr	r3, [pc, #180]	; (401134 <udc_process_setup+0x450>)
  401080:	4798      	blx	r3
  401082:	2800      	cmp	r0, #0
  401084:	f43f ae43 	beq.w	400d0e <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401088:	686b      	ldr	r3, [r5, #4]
  40108a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40108e:	68eb      	ldr	r3, [r5, #12]
  401090:	4798      	blx	r3
  401092:	4601      	mov	r1, r0
  401094:	4620      	mov	r0, r4
  401096:	4b27      	ldr	r3, [pc, #156]	; (401134 <udc_process_setup+0x450>)
  401098:	4798      	blx	r3
  40109a:	2800      	cmp	r0, #0
  40109c:	f43f ae37 	beq.w	400d0e <udc_process_setup+0x2a>
	return udi_api->setup();
  4010a0:	68ab      	ldr	r3, [r5, #8]
  4010a2:	4798      	blx	r3
		if (udc_req_iface()) {
  4010a4:	4603      	mov	r3, r0
  4010a6:	2800      	cmp	r0, #0
  4010a8:	f47f ae39 	bne.w	400d1e <udc_process_setup+0x3a>
  4010ac:	e62f      	b.n	400d0e <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  4010ae:	4b1a      	ldr	r3, [pc, #104]	; (401118 <udc_process_setup+0x434>)
  4010b0:	781b      	ldrb	r3, [r3, #0]
  4010b2:	b30b      	cbz	r3, 4010f8 <udc_process_setup+0x414>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010b4:	4b19      	ldr	r3, [pc, #100]	; (40111c <udc_process_setup+0x438>)
  4010b6:	681a      	ldr	r2, [r3, #0]
  4010b8:	6813      	ldr	r3, [r2, #0]
  4010ba:	791b      	ldrb	r3, [r3, #4]
  4010bc:	b1f3      	cbz	r3, 4010fc <udc_process_setup+0x418>
  4010be:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4010c0:	4e1c      	ldr	r6, [pc, #112]	; (401134 <udc_process_setup+0x450>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010c2:	4f16      	ldr	r7, [pc, #88]	; (40111c <udc_process_setup+0x438>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4010c4:	6853      	ldr	r3, [r2, #4]
  4010c6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4010ca:	68eb      	ldr	r3, [r5, #12]
  4010cc:	4798      	blx	r3
  4010ce:	4601      	mov	r1, r0
  4010d0:	4620      	mov	r0, r4
  4010d2:	47b0      	blx	r6
  4010d4:	4603      	mov	r3, r0
  4010d6:	2800      	cmp	r0, #0
  4010d8:	f43f ae21 	beq.w	400d1e <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  4010dc:	68ab      	ldr	r3, [r5, #8]
  4010de:	4798      	blx	r3
  4010e0:	4603      	mov	r3, r0
  4010e2:	2800      	cmp	r0, #0
  4010e4:	f47f ae1b 	bne.w	400d1e <udc_process_setup+0x3a>
			iface_num++) {
  4010e8:	3401      	adds	r4, #1
  4010ea:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010ec:	683a      	ldr	r2, [r7, #0]
  4010ee:	6811      	ldr	r1, [r2, #0]
  4010f0:	7909      	ldrb	r1, [r1, #4]
  4010f2:	42a1      	cmp	r1, r4
  4010f4:	d8e6      	bhi.n	4010c4 <udc_process_setup+0x3e0>
  4010f6:	e612      	b.n	400d1e <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  4010f8:	2300      	movs	r3, #0
  4010fa:	e610      	b.n	400d1e <udc_process_setup+0x3a>
	return false;
  4010fc:	2300      	movs	r3, #0
  4010fe:	e60e      	b.n	400d1e <udc_process_setup+0x3a>
			return false; // Error from USB host
  401100:	2300      	movs	r3, #0
  401102:	e60c      	b.n	400d1e <udc_process_setup+0x3a>
	return false;
  401104:	2300      	movs	r3, #0
  401106:	e60a      	b.n	400d1e <udc_process_setup+0x3a>
  401108:	20000854 	.word	0x20000854
  40110c:	00402b09 	.word	0x00402b09
  401110:	2000010c 	.word	0x2000010c
  401114:	00400c5d 	.word	0x00400c5d
  401118:	2000075c 	.word	0x2000075c
  40111c:	20000760 	.word	0x20000760
  401120:	00400bf5 	.word	0x00400bf5
  401124:	00400b89 	.word	0x00400b89
  401128:	00402db5 	.word	0x00402db5
  40112c:	00403009 	.word	0x00403009
  401130:	00402cd5 	.word	0x00402cd5
  401134:	00400b15 	.word	0x00400b15

00401138 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  401138:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40113a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40113e:	4b10      	ldr	r3, [pc, #64]	; (401180 <board_init+0x48>)
  401140:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401142:	200b      	movs	r0, #11
  401144:	4c0f      	ldr	r4, [pc, #60]	; (401184 <board_init+0x4c>)
  401146:	47a0      	blx	r4
  401148:	200c      	movs	r0, #12
  40114a:	47a0      	blx	r4
  40114c:	200d      	movs	r0, #13
  40114e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401150:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401154:	2013      	movs	r0, #19
  401156:	4c0c      	ldr	r4, [pc, #48]	; (401188 <board_init+0x50>)
  401158:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40115a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40115e:	2014      	movs	r0, #20
  401160:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  401162:	490a      	ldr	r1, [pc, #40]	; (40118c <board_init+0x54>)
  401164:	2023      	movs	r0, #35	; 0x23
  401166:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  401168:	4909      	ldr	r1, [pc, #36]	; (401190 <board_init+0x58>)
  40116a:	204c      	movs	r0, #76	; 0x4c
  40116c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401172:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  401176:	4807      	ldr	r0, [pc, #28]	; (401194 <board_init+0x5c>)
  401178:	4b07      	ldr	r3, [pc, #28]	; (401198 <board_init+0x60>)
  40117a:	4798      	blx	r3
  40117c:	bd10      	pop	{r4, pc}
  40117e:	bf00      	nop
  401180:	400e1450 	.word	0x400e1450
  401184:	004016d9 	.word	0x004016d9
  401188:	00401339 	.word	0x00401339
  40118c:	28000079 	.word	0x28000079
  401190:	28000059 	.word	0x28000059
  401194:	400e0e00 	.word	0x400e0e00
  401198:	00401459 	.word	0x00401459

0040119c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
  40119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011a0:	4606      	mov	r6, r0
  4011a2:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4011a4:	4d09      	ldr	r5, [pc, #36]	; (4011cc <LED_Off+0x30>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
  4011a6:	4f0a      	ldr	r7, [pc, #40]	; (4011d0 <LED_Off+0x34>)
				gpio_set_pin_low(led_gpio);
  4011a8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4011d4 <LED_Off+0x38>
  4011ac:	e003      	b.n	4011b6 <LED_Off+0x1a>
  4011ae:	47c0      	blx	r8
  4011b0:	3408      	adds	r4, #8
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  4011b2:	2c18      	cmp	r4, #24
  4011b4:	d008      	beq.n	4011c8 <LED_Off+0x2c>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4011b6:	5960      	ldr	r0, [r4, r5]
  4011b8:	42b0      	cmp	r0, r6
  4011ba:	d1f9      	bne.n	4011b0 <LED_Off+0x14>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  4011bc:	192b      	adds	r3, r5, r4
  4011be:	685b      	ldr	r3, [r3, #4]
  4011c0:	2b01      	cmp	r3, #1
  4011c2:	d0f4      	beq.n	4011ae <LED_Off+0x12>
				gpio_set_pin_high(led_gpio);
  4011c4:	47b8      	blx	r7
  4011c6:	e7f3      	b.n	4011b0 <LED_Off+0x14>
			}
		}
	}
}
  4011c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011cc:	004038f8 	.word	0x004038f8
  4011d0:	00401305 	.word	0x00401305
  4011d4:	0040131f 	.word	0x0040131f

004011d8 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
  4011d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011dc:	4606      	mov	r6, r0
  4011de:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4011e0:	4d09      	ldr	r5, [pc, #36]	; (401208 <LED_On+0x30>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
  4011e2:	4f0a      	ldr	r7, [pc, #40]	; (40120c <LED_On+0x34>)
				gpio_set_pin_high(led_gpio);
  4011e4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 401210 <LED_On+0x38>
  4011e8:	e003      	b.n	4011f2 <LED_On+0x1a>
  4011ea:	47c0      	blx	r8
  4011ec:	3408      	adds	r4, #8
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  4011ee:	2c18      	cmp	r4, #24
  4011f0:	d008      	beq.n	401204 <LED_On+0x2c>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4011f2:	5960      	ldr	r0, [r4, r5]
  4011f4:	42b0      	cmp	r0, r6
  4011f6:	d1f9      	bne.n	4011ec <LED_On+0x14>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  4011f8:	192b      	adds	r3, r5, r4
  4011fa:	685b      	ldr	r3, [r3, #4]
  4011fc:	2b01      	cmp	r3, #1
  4011fe:	d0f4      	beq.n	4011ea <LED_On+0x12>
				gpio_set_pin_low(led_gpio);
  401200:	47b8      	blx	r7
  401202:	e7f3      	b.n	4011ec <LED_On+0x14>
			}
		}
	}
}
  401204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401208:	004038f8 	.word	0x004038f8
  40120c:	0040131f 	.word	0x0040131f
  401210:	00401305 	.word	0x00401305

00401214 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401214:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401216:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40121a:	d039      	beq.n	401290 <pio_set_peripheral+0x7c>
  40121c:	d813      	bhi.n	401246 <pio_set_peripheral+0x32>
  40121e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401222:	d025      	beq.n	401270 <pio_set_peripheral+0x5c>
  401224:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401228:	d10a      	bne.n	401240 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40122a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40122c:	4313      	orrs	r3, r2
  40122e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401230:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401232:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401234:	400b      	ands	r3, r1
  401236:	ea23 0302 	bic.w	r3, r3, r2
  40123a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40123c:	6042      	str	r2, [r0, #4]
  40123e:	4770      	bx	lr
	switch (ul_type) {
  401240:	2900      	cmp	r1, #0
  401242:	d1fb      	bne.n	40123c <pio_set_peripheral+0x28>
  401244:	4770      	bx	lr
  401246:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40124a:	d020      	beq.n	40128e <pio_set_peripheral+0x7a>
  40124c:	d809      	bhi.n	401262 <pio_set_peripheral+0x4e>
  40124e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401252:	d1f3      	bne.n	40123c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401254:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401256:	4313      	orrs	r3, r2
  401258:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40125a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40125c:	4313      	orrs	r3, r2
  40125e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401260:	e7ec      	b.n	40123c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401262:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401266:	d012      	beq.n	40128e <pio_set_peripheral+0x7a>
  401268:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40126c:	d00f      	beq.n	40128e <pio_set_peripheral+0x7a>
  40126e:	e7e5      	b.n	40123c <pio_set_peripheral+0x28>
{
  401270:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401272:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401274:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401276:	43d3      	mvns	r3, r2
  401278:	4021      	ands	r1, r4
  40127a:	461c      	mov	r4, r3
  40127c:	4019      	ands	r1, r3
  40127e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401280:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401282:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401284:	400b      	ands	r3, r1
  401286:	4023      	ands	r3, r4
  401288:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40128a:	6042      	str	r2, [r0, #4]
}
  40128c:	bc10      	pop	{r4}
  40128e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401290:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401292:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401294:	400b      	ands	r3, r1
  401296:	ea23 0302 	bic.w	r3, r3, r2
  40129a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40129c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40129e:	4313      	orrs	r3, r2
  4012a0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4012a2:	e7cb      	b.n	40123c <pio_set_peripheral+0x28>

004012a4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4012a4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4012a6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4012aa:	bf14      	ite	ne
  4012ac:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4012ae:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4012b0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4012b4:	bf14      	ite	ne
  4012b6:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4012b8:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4012ba:	f012 0f02 	tst.w	r2, #2
  4012be:	d107      	bne.n	4012d0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4012c0:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4012c4:	bf18      	it	ne
  4012c6:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  4012ca:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4012cc:	6001      	str	r1, [r0, #0]
  4012ce:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  4012d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4012d4:	e7f9      	b.n	4012ca <pio_set_input+0x26>

004012d6 <pio_set_output>:
{
  4012d6:	b410      	push	{r4}
  4012d8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4012da:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4012dc:	b944      	cbnz	r4, 4012f0 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  4012de:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4012e0:	b143      	cbz	r3, 4012f4 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  4012e2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4012e4:	b942      	cbnz	r2, 4012f8 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  4012e6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4012e8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4012ea:	6001      	str	r1, [r0, #0]
}
  4012ec:	bc10      	pop	{r4}
  4012ee:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4012f0:	6641      	str	r1, [r0, #100]	; 0x64
  4012f2:	e7f5      	b.n	4012e0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4012f4:	6541      	str	r1, [r0, #84]	; 0x54
  4012f6:	e7f5      	b.n	4012e4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4012f8:	6301      	str	r1, [r0, #48]	; 0x30
  4012fa:	e7f5      	b.n	4012e8 <pio_set_output+0x12>

004012fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4012fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4012fe:	4770      	bx	lr

00401300 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401300:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401302:	4770      	bx	lr

00401304 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401304:	0943      	lsrs	r3, r0, #5
  401306:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40130a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40130e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401310:	f000 001f 	and.w	r0, r0, #31
  401314:	2201      	movs	r2, #1
  401316:	fa02 f000 	lsl.w	r0, r2, r0
  40131a:	6318      	str	r0, [r3, #48]	; 0x30
  40131c:	4770      	bx	lr

0040131e <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40131e:	0943      	lsrs	r3, r0, #5
  401320:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401324:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401328:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40132a:	f000 001f 	and.w	r0, r0, #31
  40132e:	2201      	movs	r2, #1
  401330:	fa02 f000 	lsl.w	r0, r2, r0
  401334:	6358      	str	r0, [r3, #52]	; 0x34
  401336:	4770      	bx	lr

00401338 <pio_configure_pin>:
{
  401338:	b570      	push	{r4, r5, r6, lr}
  40133a:	b082      	sub	sp, #8
  40133c:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40133e:	0943      	lsrs	r3, r0, #5
  401340:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401344:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401348:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40134a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40134e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401352:	d053      	beq.n	4013fc <pio_configure_pin+0xc4>
  401354:	d80a      	bhi.n	40136c <pio_configure_pin+0x34>
  401356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40135a:	d02d      	beq.n	4013b8 <pio_configure_pin+0x80>
  40135c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401360:	d03b      	beq.n	4013da <pio_configure_pin+0xa2>
  401362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401366:	d015      	beq.n	401394 <pio_configure_pin+0x5c>
		return 0;
  401368:	2000      	movs	r0, #0
  40136a:	e023      	b.n	4013b4 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  40136c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401370:	d055      	beq.n	40141e <pio_configure_pin+0xe6>
  401372:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401376:	d052      	beq.n	40141e <pio_configure_pin+0xe6>
  401378:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40137c:	d1f4      	bne.n	401368 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40137e:	f000 011f 	and.w	r1, r0, #31
  401382:	2601      	movs	r6, #1
  401384:	462a      	mov	r2, r5
  401386:	fa06 f101 	lsl.w	r1, r6, r1
  40138a:	4620      	mov	r0, r4
  40138c:	4b2f      	ldr	r3, [pc, #188]	; (40144c <pio_configure_pin+0x114>)
  40138e:	4798      	blx	r3
	return 1;
  401390:	4630      	mov	r0, r6
		break;
  401392:	e00f      	b.n	4013b4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401394:	f000 001f 	and.w	r0, r0, #31
  401398:	2601      	movs	r6, #1
  40139a:	4086      	lsls	r6, r0
  40139c:	4632      	mov	r2, r6
  40139e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013a2:	4620      	mov	r0, r4
  4013a4:	4b2a      	ldr	r3, [pc, #168]	; (401450 <pio_configure_pin+0x118>)
  4013a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4013a8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4013ac:	bf14      	ite	ne
  4013ae:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4013b0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4013b2:	2001      	movs	r0, #1
}
  4013b4:	b002      	add	sp, #8
  4013b6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4013b8:	f000 001f 	and.w	r0, r0, #31
  4013bc:	2601      	movs	r6, #1
  4013be:	4086      	lsls	r6, r0
  4013c0:	4632      	mov	r2, r6
  4013c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013c6:	4620      	mov	r0, r4
  4013c8:	4b21      	ldr	r3, [pc, #132]	; (401450 <pio_configure_pin+0x118>)
  4013ca:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4013cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4013d0:	bf14      	ite	ne
  4013d2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4013d4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4013d6:	2001      	movs	r0, #1
  4013d8:	e7ec      	b.n	4013b4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4013da:	f000 001f 	and.w	r0, r0, #31
  4013de:	2601      	movs	r6, #1
  4013e0:	4086      	lsls	r6, r0
  4013e2:	4632      	mov	r2, r6
  4013e4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013e8:	4620      	mov	r0, r4
  4013ea:	4b19      	ldr	r3, [pc, #100]	; (401450 <pio_configure_pin+0x118>)
  4013ec:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4013ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4013f2:	bf14      	ite	ne
  4013f4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4013f6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4013f8:	2001      	movs	r0, #1
  4013fa:	e7db      	b.n	4013b4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4013fc:	f000 001f 	and.w	r0, r0, #31
  401400:	2601      	movs	r6, #1
  401402:	4086      	lsls	r6, r0
  401404:	4632      	mov	r2, r6
  401406:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40140a:	4620      	mov	r0, r4
  40140c:	4b10      	ldr	r3, [pc, #64]	; (401450 <pio_configure_pin+0x118>)
  40140e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401410:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401414:	bf14      	ite	ne
  401416:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401418:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40141a:	2001      	movs	r0, #1
  40141c:	e7ca      	b.n	4013b4 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40141e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401422:	f000 011f 	and.w	r1, r0, #31
  401426:	2601      	movs	r6, #1
  401428:	ea05 0306 	and.w	r3, r5, r6
  40142c:	9300      	str	r3, [sp, #0]
  40142e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401432:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401436:	bf14      	ite	ne
  401438:	2200      	movne	r2, #0
  40143a:	2201      	moveq	r2, #1
  40143c:	fa06 f101 	lsl.w	r1, r6, r1
  401440:	4620      	mov	r0, r4
  401442:	4c04      	ldr	r4, [pc, #16]	; (401454 <pio_configure_pin+0x11c>)
  401444:	47a0      	blx	r4
	return 1;
  401446:	4630      	mov	r0, r6
		break;
  401448:	e7b4      	b.n	4013b4 <pio_configure_pin+0x7c>
  40144a:	bf00      	nop
  40144c:	004012a5 	.word	0x004012a5
  401450:	00401215 	.word	0x00401215
  401454:	004012d7 	.word	0x004012d7

00401458 <pio_configure_pin_group>:
{
  401458:	b570      	push	{r4, r5, r6, lr}
  40145a:	b082      	sub	sp, #8
  40145c:	4605      	mov	r5, r0
  40145e:	460e      	mov	r6, r1
  401460:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  401462:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40146a:	d03d      	beq.n	4014e8 <pio_configure_pin_group+0x90>
  40146c:	d80a      	bhi.n	401484 <pio_configure_pin_group+0x2c>
  40146e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401472:	d021      	beq.n	4014b8 <pio_configure_pin_group+0x60>
  401474:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401478:	d02a      	beq.n	4014d0 <pio_configure_pin_group+0x78>
  40147a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40147e:	d00e      	beq.n	40149e <pio_configure_pin_group+0x46>
		return 0;
  401480:	2000      	movs	r0, #0
  401482:	e017      	b.n	4014b4 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  401484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401488:	d03a      	beq.n	401500 <pio_configure_pin_group+0xa8>
  40148a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40148e:	d037      	beq.n	401500 <pio_configure_pin_group+0xa8>
  401490:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401494:	d1f4      	bne.n	401480 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  401496:	4b23      	ldr	r3, [pc, #140]	; (401524 <pio_configure_pin_group+0xcc>)
  401498:	4798      	blx	r3
	return 1;
  40149a:	2001      	movs	r0, #1
		break;
  40149c:	e00a      	b.n	4014b4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40149e:	460a      	mov	r2, r1
  4014a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4014a4:	4b20      	ldr	r3, [pc, #128]	; (401528 <pio_configure_pin_group+0xd0>)
  4014a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4014ac:	bf14      	ite	ne
  4014ae:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4014b0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4014b2:	2001      	movs	r0, #1
}
  4014b4:	b002      	add	sp, #8
  4014b6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4014b8:	460a      	mov	r2, r1
  4014ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4014be:	4b1a      	ldr	r3, [pc, #104]	; (401528 <pio_configure_pin_group+0xd0>)
  4014c0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014c2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4014c6:	bf14      	ite	ne
  4014c8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4014ca:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4014cc:	2001      	movs	r0, #1
  4014ce:	e7f1      	b.n	4014b4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4014d0:	460a      	mov	r2, r1
  4014d2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4014d6:	4b14      	ldr	r3, [pc, #80]	; (401528 <pio_configure_pin_group+0xd0>)
  4014d8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014da:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4014de:	bf14      	ite	ne
  4014e0:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4014e2:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4014e4:	2001      	movs	r0, #1
  4014e6:	e7e5      	b.n	4014b4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4014e8:	460a      	mov	r2, r1
  4014ea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4014ee:	4b0e      	ldr	r3, [pc, #56]	; (401528 <pio_configure_pin_group+0xd0>)
  4014f0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014f2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4014f6:	bf14      	ite	ne
  4014f8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4014fa:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4014fc:	2001      	movs	r0, #1
  4014fe:	e7d9      	b.n	4014b4 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401500:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  401504:	f004 0301 	and.w	r3, r4, #1
  401508:	9300      	str	r3, [sp, #0]
  40150a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40150e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401512:	bf14      	ite	ne
  401514:	2200      	movne	r2, #0
  401516:	2201      	moveq	r2, #1
  401518:	4631      	mov	r1, r6
  40151a:	4628      	mov	r0, r5
  40151c:	4c03      	ldr	r4, [pc, #12]	; (40152c <pio_configure_pin_group+0xd4>)
  40151e:	47a0      	blx	r4
	return 1;
  401520:	2001      	movs	r0, #1
		break;
  401522:	e7c7      	b.n	4014b4 <pio_configure_pin_group+0x5c>
  401524:	004012a5 	.word	0x004012a5
  401528:	00401215 	.word	0x00401215
  40152c:	004012d7 	.word	0x004012d7

00401530 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401534:	4681      	mov	r9, r0
  401536:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401538:	4b12      	ldr	r3, [pc, #72]	; (401584 <pio_handler_process+0x54>)
  40153a:	4798      	blx	r3
  40153c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40153e:	4648      	mov	r0, r9
  401540:	4b11      	ldr	r3, [pc, #68]	; (401588 <pio_handler_process+0x58>)
  401542:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401544:	4005      	ands	r5, r0
  401546:	d013      	beq.n	401570 <pio_handler_process+0x40>
  401548:	4c10      	ldr	r4, [pc, #64]	; (40158c <pio_handler_process+0x5c>)
  40154a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40154e:	e003      	b.n	401558 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401550:	42b4      	cmp	r4, r6
  401552:	d00d      	beq.n	401570 <pio_handler_process+0x40>
  401554:	3410      	adds	r4, #16
		while (status != 0) {
  401556:	b15d      	cbz	r5, 401570 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401558:	6820      	ldr	r0, [r4, #0]
  40155a:	42b8      	cmp	r0, r7
  40155c:	d1f8      	bne.n	401550 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40155e:	6861      	ldr	r1, [r4, #4]
  401560:	4229      	tst	r1, r5
  401562:	d0f5      	beq.n	401550 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401564:	68e3      	ldr	r3, [r4, #12]
  401566:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401568:	6863      	ldr	r3, [r4, #4]
  40156a:	ea25 0503 	bic.w	r5, r5, r3
  40156e:	e7ef      	b.n	401550 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401570:	4b07      	ldr	r3, [pc, #28]	; (401590 <pio_handler_process+0x60>)
  401572:	681b      	ldr	r3, [r3, #0]
  401574:	b123      	cbz	r3, 401580 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401576:	4b07      	ldr	r3, [pc, #28]	; (401594 <pio_handler_process+0x64>)
  401578:	681b      	ldr	r3, [r3, #0]
  40157a:	b10b      	cbz	r3, 401580 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40157c:	4648      	mov	r0, r9
  40157e:	4798      	blx	r3
  401580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401584:	004012fd 	.word	0x004012fd
  401588:	00401301 	.word	0x00401301
  40158c:	20000768 	.word	0x20000768
  401590:	20000850 	.word	0x20000850
  401594:	200007d8 	.word	0x200007d8

00401598 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401598:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40159a:	210b      	movs	r1, #11
  40159c:	4801      	ldr	r0, [pc, #4]	; (4015a4 <PIOA_Handler+0xc>)
  40159e:	4b02      	ldr	r3, [pc, #8]	; (4015a8 <PIOA_Handler+0x10>)
  4015a0:	4798      	blx	r3
  4015a2:	bd08      	pop	{r3, pc}
  4015a4:	400e0e00 	.word	0x400e0e00
  4015a8:	00401531 	.word	0x00401531

004015ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4015ac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4015ae:	210c      	movs	r1, #12
  4015b0:	4801      	ldr	r0, [pc, #4]	; (4015b8 <PIOB_Handler+0xc>)
  4015b2:	4b02      	ldr	r3, [pc, #8]	; (4015bc <PIOB_Handler+0x10>)
  4015b4:	4798      	blx	r3
  4015b6:	bd08      	pop	{r3, pc}
  4015b8:	400e1000 	.word	0x400e1000
  4015bc:	00401531 	.word	0x00401531

004015c0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4015c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4015c2:	210d      	movs	r1, #13
  4015c4:	4801      	ldr	r0, [pc, #4]	; (4015cc <PIOC_Handler+0xc>)
  4015c6:	4b02      	ldr	r3, [pc, #8]	; (4015d0 <PIOC_Handler+0x10>)
  4015c8:	4798      	blx	r3
  4015ca:	bd08      	pop	{r3, pc}
  4015cc:	400e1200 	.word	0x400e1200
  4015d0:	00401531 	.word	0x00401531

004015d4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4015d4:	4a17      	ldr	r2, [pc, #92]	; (401634 <pmc_switch_mck_to_pllack+0x60>)
  4015d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4015dc:	4318      	orrs	r0, r3
  4015de:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015e2:	f013 0f08 	tst.w	r3, #8
  4015e6:	d10a      	bne.n	4015fe <pmc_switch_mck_to_pllack+0x2a>
  4015e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4015ec:	4911      	ldr	r1, [pc, #68]	; (401634 <pmc_switch_mck_to_pllack+0x60>)
  4015ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4015f0:	f012 0f08 	tst.w	r2, #8
  4015f4:	d103      	bne.n	4015fe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4015f6:	3b01      	subs	r3, #1
  4015f8:	d1f9      	bne.n	4015ee <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4015fa:	2001      	movs	r0, #1
  4015fc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4015fe:	4a0d      	ldr	r2, [pc, #52]	; (401634 <pmc_switch_mck_to_pllack+0x60>)
  401600:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401602:	f023 0303 	bic.w	r3, r3, #3
  401606:	f043 0302 	orr.w	r3, r3, #2
  40160a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40160c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40160e:	f013 0f08 	tst.w	r3, #8
  401612:	d10a      	bne.n	40162a <pmc_switch_mck_to_pllack+0x56>
  401614:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401618:	4906      	ldr	r1, [pc, #24]	; (401634 <pmc_switch_mck_to_pllack+0x60>)
  40161a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40161c:	f012 0f08 	tst.w	r2, #8
  401620:	d105      	bne.n	40162e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401622:	3b01      	subs	r3, #1
  401624:	d1f9      	bne.n	40161a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401626:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401628:	4770      	bx	lr
	return 0;
  40162a:	2000      	movs	r0, #0
  40162c:	4770      	bx	lr
  40162e:	2000      	movs	r0, #0
  401630:	4770      	bx	lr
  401632:	bf00      	nop
  401634:	400e0400 	.word	0x400e0400

00401638 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401638:	b9c8      	cbnz	r0, 40166e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40163a:	4a11      	ldr	r2, [pc, #68]	; (401680 <pmc_switch_mainck_to_xtal+0x48>)
  40163c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40163e:	0209      	lsls	r1, r1, #8
  401640:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401642:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401646:	f023 0303 	bic.w	r3, r3, #3
  40164a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40164e:	f043 0301 	orr.w	r3, r3, #1
  401652:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401654:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401656:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401658:	f013 0f01 	tst.w	r3, #1
  40165c:	d0fb      	beq.n	401656 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40165e:	4a08      	ldr	r2, [pc, #32]	; (401680 <pmc_switch_mainck_to_xtal+0x48>)
  401660:	6a13      	ldr	r3, [r2, #32]
  401662:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40166a:	6213      	str	r3, [r2, #32]
  40166c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40166e:	4904      	ldr	r1, [pc, #16]	; (401680 <pmc_switch_mainck_to_xtal+0x48>)
  401670:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401672:	4a04      	ldr	r2, [pc, #16]	; (401684 <pmc_switch_mainck_to_xtal+0x4c>)
  401674:	401a      	ands	r2, r3
  401676:	4b04      	ldr	r3, [pc, #16]	; (401688 <pmc_switch_mainck_to_xtal+0x50>)
  401678:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40167a:	620b      	str	r3, [r1, #32]
  40167c:	4770      	bx	lr
  40167e:	bf00      	nop
  401680:	400e0400 	.word	0x400e0400
  401684:	fec8fffc 	.word	0xfec8fffc
  401688:	01370002 	.word	0x01370002

0040168c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40168c:	4b02      	ldr	r3, [pc, #8]	; (401698 <pmc_osc_is_ready_mainck+0xc>)
  40168e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401690:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	400e0400 	.word	0x400e0400

0040169c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40169c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016a0:	4b01      	ldr	r3, [pc, #4]	; (4016a8 <pmc_disable_pllack+0xc>)
  4016a2:	629a      	str	r2, [r3, #40]	; 0x28
  4016a4:	4770      	bx	lr
  4016a6:	bf00      	nop
  4016a8:	400e0400 	.word	0x400e0400

004016ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4016ac:	4b02      	ldr	r3, [pc, #8]	; (4016b8 <pmc_is_locked_pllack+0xc>)
  4016ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016b0:	f000 0002 	and.w	r0, r0, #2
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop
  4016b8:	400e0400 	.word	0x400e0400

004016bc <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4016bc:	2200      	movs	r2, #0
  4016be:	4b01      	ldr	r3, [pc, #4]	; (4016c4 <pmc_disable_pllbck+0x8>)
  4016c0:	62da      	str	r2, [r3, #44]	; 0x2c
  4016c2:	4770      	bx	lr
  4016c4:	400e0400 	.word	0x400e0400

004016c8 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4016c8:	4b02      	ldr	r3, [pc, #8]	; (4016d4 <pmc_is_locked_pllbck+0xc>)
  4016ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016cc:	f000 0004 	and.w	r0, r0, #4
  4016d0:	4770      	bx	lr
  4016d2:	bf00      	nop
  4016d4:	400e0400 	.word	0x400e0400

004016d8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4016d8:	2822      	cmp	r0, #34	; 0x22
  4016da:	d81e      	bhi.n	40171a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4016dc:	281f      	cmp	r0, #31
  4016de:	d80c      	bhi.n	4016fa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016e0:	4b11      	ldr	r3, [pc, #68]	; (401728 <pmc_enable_periph_clk+0x50>)
  4016e2:	699a      	ldr	r2, [r3, #24]
  4016e4:	2301      	movs	r3, #1
  4016e6:	4083      	lsls	r3, r0
  4016e8:	4393      	bics	r3, r2
  4016ea:	d018      	beq.n	40171e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4016ec:	2301      	movs	r3, #1
  4016ee:	fa03 f000 	lsl.w	r0, r3, r0
  4016f2:	4b0d      	ldr	r3, [pc, #52]	; (401728 <pmc_enable_periph_clk+0x50>)
  4016f4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4016f6:	2000      	movs	r0, #0
  4016f8:	4770      	bx	lr
		ul_id -= 32;
  4016fa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4016fc:	4b0a      	ldr	r3, [pc, #40]	; (401728 <pmc_enable_periph_clk+0x50>)
  4016fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401702:	2301      	movs	r3, #1
  401704:	4083      	lsls	r3, r0
  401706:	4393      	bics	r3, r2
  401708:	d00b      	beq.n	401722 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40170a:	2301      	movs	r3, #1
  40170c:	fa03 f000 	lsl.w	r0, r3, r0
  401710:	4b05      	ldr	r3, [pc, #20]	; (401728 <pmc_enable_periph_clk+0x50>)
  401712:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401716:	2000      	movs	r0, #0
  401718:	4770      	bx	lr
		return 1;
  40171a:	2001      	movs	r0, #1
  40171c:	4770      	bx	lr
	return 0;
  40171e:	2000      	movs	r0, #0
  401720:	4770      	bx	lr
  401722:	2000      	movs	r0, #0
}
  401724:	4770      	bx	lr
  401726:	bf00      	nop
  401728:	400e0400 	.word	0x400e0400

0040172c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40172c:	2822      	cmp	r0, #34	; 0x22
  40172e:	d822      	bhi.n	401776 <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  401730:	281f      	cmp	r0, #31
  401732:	d80e      	bhi.n	401752 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  401734:	4b11      	ldr	r3, [pc, #68]	; (40177c <pmc_disable_periph_clk+0x50>)
  401736:	699a      	ldr	r2, [r3, #24]
  401738:	2301      	movs	r3, #1
  40173a:	4083      	lsls	r3, r0
  40173c:	4393      	bics	r3, r2
  40173e:	d001      	beq.n	401744 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401740:	2000      	movs	r0, #0
  401742:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  401744:	2301      	movs	r3, #1
  401746:	fa03 f000 	lsl.w	r0, r3, r0
  40174a:	4b0c      	ldr	r3, [pc, #48]	; (40177c <pmc_disable_periph_clk+0x50>)
  40174c:	6158      	str	r0, [r3, #20]
	return 0;
  40174e:	2000      	movs	r0, #0
  401750:	4770      	bx	lr
		ul_id -= 32;
  401752:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401754:	4b09      	ldr	r3, [pc, #36]	; (40177c <pmc_disable_periph_clk+0x50>)
  401756:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40175a:	2301      	movs	r3, #1
  40175c:	4083      	lsls	r3, r0
  40175e:	4393      	bics	r3, r2
  401760:	d001      	beq.n	401766 <pmc_disable_periph_clk+0x3a>
	return 0;
  401762:	2000      	movs	r0, #0
}
  401764:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  401766:	2301      	movs	r3, #1
  401768:	fa03 f000 	lsl.w	r0, r3, r0
  40176c:	4b03      	ldr	r3, [pc, #12]	; (40177c <pmc_disable_periph_clk+0x50>)
  40176e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  401772:	2000      	movs	r0, #0
  401774:	4770      	bx	lr
		return 1;
  401776:	2001      	movs	r0, #1
  401778:	4770      	bx	lr
  40177a:	bf00      	nop
  40177c:	400e0400 	.word	0x400e0400

00401780 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  401780:	0200      	lsls	r0, r0, #8
  401782:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  401786:	f040 0001 	orr.w	r0, r0, #1
  40178a:	4b01      	ldr	r3, [pc, #4]	; (401790 <pmc_switch_udpck_to_pllbck+0x10>)
  40178c:	6398      	str	r0, [r3, #56]	; 0x38
  40178e:	4770      	bx	lr
  401790:	400e0400 	.word	0x400e0400

00401794 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  401794:	2280      	movs	r2, #128	; 0x80
  401796:	4b01      	ldr	r3, [pc, #4]	; (40179c <pmc_enable_udpck+0x8>)
  401798:	601a      	str	r2, [r3, #0]
  40179a:	4770      	bx	lr
  40179c:	400e0400 	.word	0x400e0400

004017a0 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4017a0:	4b03      	ldr	r3, [pc, #12]	; (4017b0 <pmc_set_fast_startup_input+0x10>)
  4017a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4017a4:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4017a8:	4310      	orrs	r0, r2
  4017aa:	6718      	str	r0, [r3, #112]	; 0x70
  4017ac:	4770      	bx	lr
  4017ae:	bf00      	nop
  4017b0:	400e0400 	.word	0x400e0400

004017b4 <pmc_enable_waitmode>:
 */
void pmc_enable_waitmode(void)
{
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
  4017b4:	4a0b      	ldr	r2, [pc, #44]	; (4017e4 <pmc_enable_waitmode+0x30>)
  4017b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4017b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4017bc:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
  4017be:	4a0a      	ldr	r2, [pc, #40]	; (4017e8 <pmc_enable_waitmode+0x34>)
  4017c0:	6913      	ldr	r3, [r2, #16]
  4017c2:	f023 0304 	bic.w	r3, r3, #4
  4017c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb");
  4017c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfe");
  4017cc:	bf20      	wfe
  4017ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4017d2:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4017d4:	3b01      	subs	r3, #1
  4017d6:	d1fc      	bne.n	4017d2 <pmc_enable_waitmode+0x1e>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4017d8:	4a02      	ldr	r2, [pc, #8]	; (4017e4 <pmc_enable_waitmode+0x30>)
  4017da:	6a13      	ldr	r3, [r2, #32]
  4017dc:	f013 0f08 	tst.w	r3, #8
  4017e0:	d0fb      	beq.n	4017da <pmc_enable_waitmode+0x26>

}
  4017e2:	4770      	bx	lr
  4017e4:	400e0400 	.word	0x400e0400
  4017e8:	e000ed00 	.word	0xe000ed00

004017ec <pmc_sleep>:
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
	switch (sleep_mode) {
  4017ec:	1e43      	subs	r3, r0, #1
  4017ee:	2b04      	cmp	r3, #4
  4017f0:	f200 812e 	bhi.w	401a50 <pmc_sleep+0x264>
  4017f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4017f8:	00050005 	.word	0x00050005
  4017fc:	001f001f 	.word	0x001f001f
  401800:	011f      	.short	0x011f
		cpu_irq_enable();
		__DSB();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
  401802:	4a94      	ldr	r2, [pc, #592]	; (401a54 <pmc_sleep+0x268>)
  401804:	6f13      	ldr	r3, [r2, #112]	; 0x70
  401806:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40180a:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40180c:	4a92      	ldr	r2, [pc, #584]	; (401a58 <pmc_sleep+0x26c>)
  40180e:	6913      	ldr	r3, [r2, #16]
  401810:	f023 0304 	bic.w	r3, r3, #4
  401814:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401816:	2201      	movs	r2, #1
  401818:	4b90      	ldr	r3, [pc, #576]	; (401a5c <pmc_sleep+0x270>)
  40181a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40181c:	f3bf 8f5f 	dmb	sy
  401820:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI) {
  401822:	2802      	cmp	r0, #2
  401824:	d003      	beq.n	40182e <pmc_sleep+0x42>
  __ASM volatile ("dsb");
  401826:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfe");
  40182a:	bf20      	wfe
  40182c:	4770      	bx	lr
  __ASM volatile ("dsb");
  40182e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401832:	bf30      	wfi
  401834:	4770      	bx	lr
{
  401836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("cpsid i" : : : "memory");
  40183a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40183c:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
  401840:	2200      	movs	r2, #0
  401842:	4b86      	ldr	r3, [pc, #536]	; (401a5c <pmc_sleep+0x270>)
  401844:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  401846:	2201      	movs	r2, #1
  401848:	4b85      	ldr	r3, [pc, #532]	; (401a60 <pmc_sleep+0x274>)
  40184a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40184c:	4b81      	ldr	r3, [pc, #516]	; (401a54 <pmc_sleep+0x268>)
  40184e:	f8d3 8020 	ldr.w	r8, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401852:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  401854:	4a83      	ldr	r2, [pc, #524]	; (401a64 <pmc_sleep+0x278>)
  401856:	f8d2 9000 	ldr.w	r9, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  40185a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
		*p_pll1_setting = PMC->CKGR_PLLBR;
  40185c:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401860:	f448 125c 	orr.w	r2, r8, #3604480	; 0x370000
  401864:	f042 0208 	orr.w	r2, r2, #8
  401868:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40186a:	f005 0603 	and.w	r6, r5, #3
  40186e:	2e01      	cmp	r6, #1
  401870:	f240 8095 	bls.w	40199e <pmc_sleep+0x1b2>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401874:	f025 0103 	bic.w	r1, r5, #3
  401878:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40187c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40187e:	461a      	mov	r2, r3
  401880:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401882:	f013 0f08 	tst.w	r3, #8
  401886:	d0fb      	beq.n	401880 <pmc_sleep+0x94>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401888:	f011 0f70 	tst.w	r1, #112	; 0x70
  40188c:	d008      	beq.n	4018a0 <pmc_sleep+0xb4>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40188e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  401892:	4b70      	ldr	r3, [pc, #448]	; (401a54 <pmc_sleep+0x268>)
  401894:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401896:	461a      	mov	r2, r3
  401898:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40189a:	f013 0f08 	tst.w	r3, #8
  40189e:	d0fb      	beq.n	401898 <pmc_sleep+0xac>
  4018a0:	4604      	mov	r4, r0
	pmc_disable_pllack();
  4018a2:	4b71      	ldr	r3, [pc, #452]	; (401a68 <pmc_sleep+0x27c>)
  4018a4:	4798      	blx	r3
	pmc_disable_pllbck();
  4018a6:	4b71      	ldr	r3, [pc, #452]	; (401a6c <pmc_sleep+0x280>)
  4018a8:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4018aa:	4a6a      	ldr	r2, [pc, #424]	; (401a54 <pmc_sleep+0x268>)
  4018ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4018b2:	d0fb      	beq.n	4018ac <pmc_sleep+0xc0>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4018b4:	4a67      	ldr	r2, [pc, #412]	; (401a54 <pmc_sleep+0x268>)
  4018b6:	6a13      	ldr	r3, [r2, #32]
  4018b8:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4018bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4018c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018c4:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4018c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4018cc:	d0fb      	beq.n	4018c6 <pmc_sleep+0xda>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4018ce:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
  4018d2:	4a64      	ldr	r2, [pc, #400]	; (401a64 <pmc_sleep+0x278>)
  4018d4:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4018d6:	2c04      	cmp	r4, #4
  4018d8:	d063      	beq.n	4019a2 <pmc_sleep+0x1b6>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4018da:	4c60      	ldr	r4, [pc, #384]	; (401a5c <pmc_sleep+0x270>)
  4018dc:	2301      	movs	r3, #1
  4018de:	7023      	strb	r3, [r4, #0]
  4018e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4018e4:	b662      	cpsie	i

		pmc_enable_waitmode();
  4018e6:	4b62      	ldr	r3, [pc, #392]	; (401a70 <pmc_sleep+0x284>)
  4018e8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4018ea:	b672      	cpsid	i
  4018ec:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4018f0:	2300      	movs	r3, #0
  4018f2:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4018f4:	f018 0f02 	tst.w	r8, #2
  4018f8:	d05e      	beq.n	4019b8 <pmc_sleep+0x1cc>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4018fa:	4a56      	ldr	r2, [pc, #344]	; (401a54 <pmc_sleep+0x268>)
  4018fc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4018fe:	495d      	ldr	r1, [pc, #372]	; (401a74 <pmc_sleep+0x288>)
  401900:	4019      	ands	r1, r3
  401902:	4b5d      	ldr	r3, [pc, #372]	; (401a78 <pmc_sleep+0x28c>)
  401904:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401906:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401908:	6a13      	ldr	r3, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  40190a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40190e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  401912:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401916:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401918:	4b58      	ldr	r3, [pc, #352]	; (401a7c <pmc_sleep+0x290>)
  40191a:	403b      	ands	r3, r7
  40191c:	2b00      	cmp	r3, #0
  40191e:	d07c      	beq.n	401a1a <pmc_sleep+0x22e>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401920:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
  401924:	4b4b      	ldr	r3, [pc, #300]	; (401a54 <pmc_sleep+0x268>)
  401926:	629f      	str	r7, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  401928:	2202      	movs	r2, #2
	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
  40192a:	4b54      	ldr	r3, [pc, #336]	; (401a7c <pmc_sleep+0x290>)
  40192c:	ea0a 0303 	and.w	r3, sl, r3
  401930:	b123      	cbz	r3, 40193c <pmc_sleep+0x150>
		PMC->CKGR_PLLBR = pll1_setting;
  401932:	4b48      	ldr	r3, [pc, #288]	; (401a54 <pmc_sleep+0x268>)
  401934:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
		pll_sr |= PMC_SR_LOCKB;
  401938:	f042 0204 	orr.w	r2, r2, #4
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40193c:	2e02      	cmp	r6, #2
  40193e:	d06e      	beq.n	401a1e <pmc_sleep+0x232>
  401940:	2e03      	cmp	r6, #3
  401942:	d072      	beq.n	401a2a <pmc_sleep+0x23e>
	mckr = PMC->PMC_MCKR;
  401944:	4943      	ldr	r1, [pc, #268]	; (401a54 <pmc_sleep+0x268>)
  401946:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40194c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401950:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401952:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401954:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  401956:	f013 0f08 	tst.w	r3, #8
  40195a:	d0fb      	beq.n	401954 <pmc_sleep+0x168>
	EFC0->EEFC_FMR = fmr_setting;
  40195c:	4b41      	ldr	r3, [pc, #260]	; (401a64 <pmc_sleep+0x278>)
  40195e:	f8c3 9000 	str.w	r9, [r3]
	PMC->PMC_MCKR = mck_setting;
  401962:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401966:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401968:	4619      	mov	r1, r3
  40196a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40196c:	f013 0f08 	tst.w	r3, #8
  401970:	d0fb      	beq.n	40196a <pmc_sleep+0x17e>
	while (!(PMC->PMC_SR & pll_sr));
  401972:	4938      	ldr	r1, [pc, #224]	; (401a54 <pmc_sleep+0x268>)
  401974:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  401976:	4213      	tst	r3, r2
  401978:	d0fc      	beq.n	401974 <pmc_sleep+0x188>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40197a:	2200      	movs	r2, #0
  40197c:	4b38      	ldr	r3, [pc, #224]	; (401a60 <pmc_sleep+0x274>)
  40197e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401980:	4b3f      	ldr	r3, [pc, #252]	; (401a80 <pmc_sleep+0x294>)
  401982:	681b      	ldr	r3, [r3, #0]
  401984:	b11b      	cbz	r3, 40198e <pmc_sleep+0x1a2>
			callback_clocks_restored();
  401986:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401988:	2200      	movs	r2, #0
  40198a:	4b3d      	ldr	r3, [pc, #244]	; (401a80 <pmc_sleep+0x294>)
  40198c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40198e:	2201      	movs	r2, #1
  401990:	4b32      	ldr	r3, [pc, #200]	; (401a5c <pmc_sleep+0x270>)
  401992:	701a      	strb	r2, [r3, #0]
  401994:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401998:	b662      	cpsie	i
  40199a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40199e:	4629      	mov	r1, r5
  4019a0:	e772      	b.n	401888 <pmc_sleep+0x9c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019a2:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4019a6:	6a13      	ldr	r3, [r2, #32]
  4019a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4019ac:	f023 0301 	bic.w	r3, r3, #1
  4019b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019b4:	6213      	str	r3, [r2, #32]
  4019b6:	e790      	b.n	4018da <pmc_sleep+0xee>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4019b8:	f018 0f01 	tst.w	r8, #1
  4019bc:	d0ac      	beq.n	401918 <pmc_sleep+0x12c>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4019be:	4b25      	ldr	r3, [pc, #148]	; (401a54 <pmc_sleep+0x268>)
  4019c0:	6a1b      	ldr	r3, [r3, #32]
  4019c2:	f013 0f01 	tst.w	r3, #1
  4019c6:	d10e      	bne.n	4019e6 <pmc_sleep+0x1fa>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019c8:	4a22      	ldr	r2, [pc, #136]	; (401a54 <pmc_sleep+0x268>)
  4019ca:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4019cc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4019d0:	f023 0303 	bic.w	r3, r3, #3
  4019d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019d8:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019dc:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019de:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019e0:	f013 0f01 	tst.w	r3, #1
  4019e4:	d0fb      	beq.n	4019de <pmc_sleep+0x1f2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4019e6:	4b1b      	ldr	r3, [pc, #108]	; (401a54 <pmc_sleep+0x268>)
  4019e8:	6a1b      	ldr	r3, [r3, #32]
  4019ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4019ee:	d10a      	bne.n	401a06 <pmc_sleep+0x21a>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4019f0:	4a18      	ldr	r2, [pc, #96]	; (401a54 <pmc_sleep+0x268>)
  4019f2:	6a13      	ldr	r3, [r2, #32]
  4019f4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4019fc:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4019fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401a04:	d0fb      	beq.n	4019fe <pmc_sleep+0x212>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401a06:	4a13      	ldr	r2, [pc, #76]	; (401a54 <pmc_sleep+0x268>)
  401a08:	6a13      	ldr	r3, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401a0a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401a0e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  401a12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401a16:	6213      	str	r3, [r2, #32]
  401a18:	e77e      	b.n	401918 <pmc_sleep+0x12c>
	uint32_t pll_sr = 0;
  401a1a:	2200      	movs	r2, #0
  401a1c:	e785      	b.n	40192a <pmc_sleep+0x13e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401a1e:	490d      	ldr	r1, [pc, #52]	; (401a54 <pmc_sleep+0x268>)
  401a20:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  401a22:	f013 0f02 	tst.w	r3, #2
  401a26:	d0fb      	beq.n	401a20 <pmc_sleep+0x234>
  401a28:	e78c      	b.n	401944 <pmc_sleep+0x158>
		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
  401a2a:	490a      	ldr	r1, [pc, #40]	; (401a54 <pmc_sleep+0x268>)
  401a2c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  401a2e:	f013 0f04 	tst.w	r3, #4
  401a32:	d0fb      	beq.n	401a2c <pmc_sleep+0x240>
  401a34:	e786      	b.n	401944 <pmc_sleep+0x158>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401a36:	4a08      	ldr	r2, [pc, #32]	; (401a58 <pmc_sleep+0x26c>)
  401a38:	6913      	ldr	r3, [r2, #16]
  401a3a:	f043 0304 	orr.w	r3, r3, #4
  401a3e:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
  401a40:	2201      	movs	r2, #1
  401a42:	4b06      	ldr	r3, [pc, #24]	; (401a5c <pmc_sleep+0x270>)
  401a44:	701a      	strb	r2, [r3, #0]
  401a46:	f3bf 8f5f 	dmb	sy
  401a4a:	b662      	cpsie	i
  __ASM volatile ("wfe");
  401a4c:	bf20      	wfe
		__WFE() ;
#endif
		break;
#endif
	}
}
  401a4e:	4770      	bx	lr
  401a50:	4770      	bx	lr
  401a52:	bf00      	nop
  401a54:	400e0400 	.word	0x400e0400
  401a58:	e000ed00 	.word	0xe000ed00
  401a5c:	200001c0 	.word	0x200001c0
  401a60:	200007dc 	.word	0x200007dc
  401a64:	400e0a00 	.word	0x400e0a00
  401a68:	0040169d 	.word	0x0040169d
  401a6c:	004016bd 	.word	0x004016bd
  401a70:	004017b5 	.word	0x004017b5
  401a74:	fec8fffc 	.word	0xfec8fffc
  401a78:	01370002 	.word	0x01370002
  401a7c:	07ff0000 	.word	0x07ff0000
  401a80:	200007e0 	.word	0x200007e0

00401a84 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  401a84:	4b02      	ldr	r3, [pc, #8]	; (401a90 <pmc_is_wakeup_clocks_restored+0xc>)
  401a86:	7818      	ldrb	r0, [r3, #0]
}
  401a88:	f080 0001 	eor.w	r0, r0, #1
  401a8c:	4770      	bx	lr
  401a8e:	bf00      	nop
  401a90:	200007dc 	.word	0x200007dc

00401a94 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401a94:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  401a96:	4601      	mov	r1, r0
  401a98:	bb28      	cbnz	r0, 401ae6 <udd_sleep_mode+0x52>
  401a9a:	4b24      	ldr	r3, [pc, #144]	; (401b2c <udd_sleep_mode+0x98>)
  401a9c:	781b      	ldrb	r3, [r3, #0]
  401a9e:	b91b      	cbnz	r3, 401aa8 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401aa0:	4b22      	ldr	r3, [pc, #136]	; (401b2c <udd_sleep_mode+0x98>)
  401aa2:	7019      	strb	r1, [r3, #0]
}
  401aa4:	b002      	add	sp, #8
  401aa6:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  401aa8:	4b21      	ldr	r3, [pc, #132]	; (401b30 <udd_sleep_mode+0x9c>)
  401aaa:	789b      	ldrb	r3, [r3, #2]
  401aac:	b903      	cbnz	r3, 401ab0 <udd_sleep_mode+0x1c>
  401aae:	e7fe      	b.n	401aae <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ab0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ab4:	fab3 f383 	clz	r3, r3
  401ab8:	095b      	lsrs	r3, r3, #5
  401aba:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401abc:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401abe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ac2:	2200      	movs	r2, #0
  401ac4:	4b1b      	ldr	r3, [pc, #108]	; (401b34 <udd_sleep_mode+0xa0>)
  401ac6:	701a      	strb	r2, [r3, #0]
	return flags;
  401ac8:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401aca:	4a19      	ldr	r2, [pc, #100]	; (401b30 <udd_sleep_mode+0x9c>)
  401acc:	7893      	ldrb	r3, [r2, #2]
  401ace:	3b01      	subs	r3, #1
  401ad0:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401ad2:	2800      	cmp	r0, #0
  401ad4:	d0e4      	beq.n	401aa0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401ad6:	2201      	movs	r2, #1
  401ad8:	4b16      	ldr	r3, [pc, #88]	; (401b34 <udd_sleep_mode+0xa0>)
  401ada:	701a      	strb	r2, [r3, #0]
  401adc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401ae0:	b662      	cpsie	i
  401ae2:	e7dd      	b.n	401aa0 <udd_sleep_mode+0xc>
  401ae4:	e7fe      	b.n	401ae4 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  401ae6:	4b11      	ldr	r3, [pc, #68]	; (401b2c <udd_sleep_mode+0x98>)
  401ae8:	781b      	ldrb	r3, [r3, #0]
  401aea:	2b00      	cmp	r3, #0
  401aec:	d1d8      	bne.n	401aa0 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  401aee:	4b10      	ldr	r3, [pc, #64]	; (401b30 <udd_sleep_mode+0x9c>)
  401af0:	789b      	ldrb	r3, [r3, #2]
  401af2:	2bff      	cmp	r3, #255	; 0xff
  401af4:	d0f6      	beq.n	401ae4 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401af6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401afa:	fab3 f383 	clz	r3, r3
  401afe:	095b      	lsrs	r3, r3, #5
  401b00:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401b02:	b672      	cpsid	i
  401b04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b08:	2200      	movs	r2, #0
  401b0a:	4b0a      	ldr	r3, [pc, #40]	; (401b34 <udd_sleep_mode+0xa0>)
  401b0c:	701a      	strb	r2, [r3, #0]
	return flags;
  401b0e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  401b10:	4a07      	ldr	r2, [pc, #28]	; (401b30 <udd_sleep_mode+0x9c>)
  401b12:	7893      	ldrb	r3, [r2, #2]
  401b14:	3301      	adds	r3, #1
  401b16:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401b18:	2800      	cmp	r0, #0
  401b1a:	d0c1      	beq.n	401aa0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401b1c:	2201      	movs	r2, #1
  401b1e:	4b05      	ldr	r3, [pc, #20]	; (401b34 <udd_sleep_mode+0xa0>)
  401b20:	701a      	strb	r2, [r3, #0]
  401b22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b26:	b662      	cpsie	i
  401b28:	e7ba      	b.n	401aa0 <udd_sleep_mode+0xc>
  401b2a:	bf00      	nop
  401b2c:	200007e5 	.word	0x200007e5
  401b30:	20000848 	.word	0x20000848
  401b34:	200001c0 	.word	0x200001c0

00401b38 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401b38:	4a03      	ldr	r2, [pc, #12]	; (401b48 <udd_ctrl_init+0x10>)
  401b3a:	2300      	movs	r3, #0
  401b3c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401b3e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401b40:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401b42:	4a02      	ldr	r2, [pc, #8]	; (401b4c <udd_ctrl_init+0x14>)
  401b44:	7013      	strb	r3, [r2, #0]
  401b46:	4770      	bx	lr
  401b48:	20000854 	.word	0x20000854
  401b4c:	200007ea 	.word	0x200007ea

00401b50 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401b50:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401b52:	2205      	movs	r2, #5
  401b54:	4b0a      	ldr	r3, [pc, #40]	; (401b80 <udd_ctrl_stall_data+0x30>)
  401b56:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401b58:	4a0a      	ldr	r2, [pc, #40]	; (401b84 <udd_ctrl_stall_data+0x34>)
  401b5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b5c:	9301      	str	r3, [sp, #4]
  401b5e:	9b01      	ldr	r3, [sp, #4]
  401b60:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b64:	9301      	str	r3, [sp, #4]
  401b66:	9b01      	ldr	r3, [sp, #4]
  401b68:	f043 0320 	orr.w	r3, r3, #32
  401b6c:	9301      	str	r3, [sp, #4]
  401b6e:	9b01      	ldr	r3, [sp, #4]
  401b70:	6313      	str	r3, [r2, #48]	; 0x30
  401b72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b74:	f013 0f20 	tst.w	r3, #32
  401b78:	d0fb      	beq.n	401b72 <udd_ctrl_stall_data+0x22>
}
  401b7a:	b002      	add	sp, #8
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop
  401b80:	200007ea 	.word	0x200007ea
  401b84:	40034000 	.word	0x40034000

00401b88 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401b88:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401b8a:	2203      	movs	r2, #3
  401b8c:	4b0a      	ldr	r3, [pc, #40]	; (401bb8 <udd_ctrl_send_zlp_in+0x30>)
  401b8e:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401b90:	4a0a      	ldr	r2, [pc, #40]	; (401bbc <udd_ctrl_send_zlp_in+0x34>)
  401b92:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b94:	9301      	str	r3, [sp, #4]
  401b96:	9b01      	ldr	r3, [sp, #4]
  401b98:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b9c:	9301      	str	r3, [sp, #4]
  401b9e:	9b01      	ldr	r3, [sp, #4]
  401ba0:	f043 0310 	orr.w	r3, r3, #16
  401ba4:	9301      	str	r3, [sp, #4]
  401ba6:	9b01      	ldr	r3, [sp, #4]
  401ba8:	6313      	str	r3, [r2, #48]	; 0x30
  401baa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401bac:	f013 0f10 	tst.w	r3, #16
  401bb0:	d0fb      	beq.n	401baa <udd_ctrl_send_zlp_in+0x22>
}
  401bb2:	b002      	add	sp, #8
  401bb4:	4770      	bx	lr
  401bb6:	bf00      	nop
  401bb8:	200007ea 	.word	0x200007ea
  401bbc:	40034000 	.word	0x40034000

00401bc0 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401bc0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401bc2:	4b02      	ldr	r3, [pc, #8]	; (401bcc <udd_ctrl_endofrequest+0xc>)
  401bc4:	691b      	ldr	r3, [r3, #16]
  401bc6:	b103      	cbz	r3, 401bca <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401bc8:	4798      	blx	r3
  401bca:	bd08      	pop	{r3, pc}
  401bcc:	20000854 	.word	0x20000854

00401bd0 <udd_ctrl_in_sent>:
{
  401bd0:	b530      	push	{r4, r5, lr}
  401bd2:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401bd4:	4b63      	ldr	r3, [pc, #396]	; (401d64 <udd_ctrl_in_sent+0x194>)
  401bd6:	781b      	ldrb	r3, [r3, #0]
  401bd8:	2b03      	cmp	r3, #3
  401bda:	d029      	beq.n	401c30 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401bdc:	4b62      	ldr	r3, [pc, #392]	; (401d68 <udd_ctrl_in_sent+0x198>)
  401bde:	881b      	ldrh	r3, [r3, #0]
  401be0:	4a62      	ldr	r2, [pc, #392]	; (401d6c <udd_ctrl_in_sent+0x19c>)
  401be2:	8994      	ldrh	r4, [r2, #12]
  401be4:	1ae4      	subs	r4, r4, r3
  401be6:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401be8:	2c00      	cmp	r4, #0
  401bea:	d144      	bne.n	401c76 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401bec:	4a60      	ldr	r2, [pc, #384]	; (401d70 <udd_ctrl_in_sent+0x1a0>)
  401bee:	8811      	ldrh	r1, [r2, #0]
  401bf0:	440b      	add	r3, r1
  401bf2:	b29b      	uxth	r3, r3
  401bf4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401bf6:	4a5d      	ldr	r2, [pc, #372]	; (401d6c <udd_ctrl_in_sent+0x19c>)
  401bf8:	88d2      	ldrh	r2, [r2, #6]
  401bfa:	429a      	cmp	r2, r3
  401bfc:	d003      	beq.n	401c06 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  401bfe:	4b5d      	ldr	r3, [pc, #372]	; (401d74 <udd_ctrl_in_sent+0x1a4>)
  401c00:	781b      	ldrb	r3, [r3, #0]
  401c02:	2b00      	cmp	r3, #0
  401c04:	d02b      	beq.n	401c5e <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401c06:	2204      	movs	r2, #4
  401c08:	4b56      	ldr	r3, [pc, #344]	; (401d64 <udd_ctrl_in_sent+0x194>)
  401c0a:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  401c0c:	4a5a      	ldr	r2, [pc, #360]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401c0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c10:	9301      	str	r3, [sp, #4]
  401c12:	9b01      	ldr	r3, [sp, #4]
  401c14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c18:	9301      	str	r3, [sp, #4]
  401c1a:	9b01      	ldr	r3, [sp, #4]
  401c1c:	f023 0301 	bic.w	r3, r3, #1
  401c20:	9301      	str	r3, [sp, #4]
  401c22:	9b01      	ldr	r3, [sp, #4]
  401c24:	6313      	str	r3, [r2, #48]	; 0x30
  401c26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c28:	f013 0f01 	tst.w	r3, #1
  401c2c:	d1fb      	bne.n	401c26 <udd_ctrl_in_sent+0x56>
  401c2e:	e014      	b.n	401c5a <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  401c30:	4a51      	ldr	r2, [pc, #324]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401c32:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c34:	9300      	str	r3, [sp, #0]
  401c36:	9b00      	ldr	r3, [sp, #0]
  401c38:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c3c:	9300      	str	r3, [sp, #0]
  401c3e:	9b00      	ldr	r3, [sp, #0]
  401c40:	f023 0301 	bic.w	r3, r3, #1
  401c44:	9300      	str	r3, [sp, #0]
  401c46:	9b00      	ldr	r3, [sp, #0]
  401c48:	6313      	str	r3, [r2, #48]	; 0x30
  401c4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c4c:	f013 0f01 	tst.w	r3, #1
  401c50:	d1fb      	bne.n	401c4a <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  401c52:	4b4a      	ldr	r3, [pc, #296]	; (401d7c <udd_ctrl_in_sent+0x1ac>)
  401c54:	4798      	blx	r3
		udd_ctrl_init();
  401c56:	4b4a      	ldr	r3, [pc, #296]	; (401d80 <udd_ctrl_in_sent+0x1b0>)
  401c58:	4798      	blx	r3
}
  401c5a:	b007      	add	sp, #28
  401c5c:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  401c5e:	4b43      	ldr	r3, [pc, #268]	; (401d6c <udd_ctrl_in_sent+0x19c>)
  401c60:	695b      	ldr	r3, [r3, #20]
  401c62:	2b00      	cmp	r3, #0
  401c64:	d05d      	beq.n	401d22 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401c66:	4798      	blx	r3
  401c68:	2800      	cmp	r0, #0
  401c6a:	d05a      	beq.n	401d22 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  401c6c:	2200      	movs	r2, #0
  401c6e:	4b3e      	ldr	r3, [pc, #248]	; (401d68 <udd_ctrl_in_sent+0x198>)
  401c70:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401c72:	4b3e      	ldr	r3, [pc, #248]	; (401d6c <udd_ctrl_in_sent+0x19c>)
  401c74:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401c76:	2c3f      	cmp	r4, #63	; 0x3f
  401c78:	d953      	bls.n	401d22 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  401c7a:	2200      	movs	r2, #0
  401c7c:	4b3d      	ldr	r3, [pc, #244]	; (401d74 <udd_ctrl_in_sent+0x1a4>)
  401c7e:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401c80:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401c82:	4b3a      	ldr	r3, [pc, #232]	; (401d6c <udd_ctrl_in_sent+0x19c>)
  401c84:	6899      	ldr	r1, [r3, #8]
  401c86:	4b38      	ldr	r3, [pc, #224]	; (401d68 <udd_ctrl_in_sent+0x198>)
  401c88:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401c8a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c8e:	fab3 f383 	clz	r3, r3
  401c92:	095b      	lsrs	r3, r3, #5
  401c94:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  401c96:	b672      	cpsid	i
  401c98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c9c:	2200      	movs	r2, #0
  401c9e:	4b39      	ldr	r3, [pc, #228]	; (401d84 <udd_ctrl_in_sent+0x1b4>)
  401ca0:	701a      	strb	r2, [r3, #0]
	return flags;
  401ca2:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  401ca4:	4b34      	ldr	r3, [pc, #208]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ca8:	f013 0f02 	tst.w	r3, #2
  401cac:	d13d      	bne.n	401d2a <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  401cae:	b14c      	cbz	r4, 401cc4 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401cb0:	4401      	add	r1, r0
  401cb2:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  401cb4:	4830      	ldr	r0, [pc, #192]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401cb6:	f812 3b01 	ldrb.w	r3, [r2], #1
  401cba:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  401cbc:	1a53      	subs	r3, r2, r1
  401cbe:	b2db      	uxtb	r3, r3
  401cc0:	42a3      	cmp	r3, r4
  401cc2:	d3f8      	bcc.n	401cb6 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  401cc4:	4b28      	ldr	r3, [pc, #160]	; (401d68 <udd_ctrl_in_sent+0x198>)
  401cc6:	881a      	ldrh	r2, [r3, #0]
  401cc8:	4414      	add	r4, r2
  401cca:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  401ccc:	4a2a      	ldr	r2, [pc, #168]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401cce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401cd0:	9303      	str	r3, [sp, #12]
  401cd2:	9b03      	ldr	r3, [sp, #12]
  401cd4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cd8:	9303      	str	r3, [sp, #12]
  401cda:	9b03      	ldr	r3, [sp, #12]
  401cdc:	f043 0310 	orr.w	r3, r3, #16
  401ce0:	9303      	str	r3, [sp, #12]
  401ce2:	9b03      	ldr	r3, [sp, #12]
  401ce4:	6313      	str	r3, [r2, #48]	; 0x30
  401ce6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ce8:	f013 0f10 	tst.w	r3, #16
  401cec:	d0fb      	beq.n	401ce6 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  401cee:	4a22      	ldr	r2, [pc, #136]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401cf0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401cf2:	9304      	str	r3, [sp, #16]
  401cf4:	9b04      	ldr	r3, [sp, #16]
  401cf6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cfa:	9304      	str	r3, [sp, #16]
  401cfc:	9b04      	ldr	r3, [sp, #16]
  401cfe:	f023 0301 	bic.w	r3, r3, #1
  401d02:	9304      	str	r3, [sp, #16]
  401d04:	9b04      	ldr	r3, [sp, #16]
  401d06:	6313      	str	r3, [r2, #48]	; 0x30
  401d08:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d0a:	f013 0f01 	tst.w	r3, #1
  401d0e:	d1fb      	bne.n	401d08 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  401d10:	2d00      	cmp	r5, #0
  401d12:	d0a2      	beq.n	401c5a <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  401d14:	2201      	movs	r2, #1
  401d16:	4b1b      	ldr	r3, [pc, #108]	; (401d84 <udd_ctrl_in_sent+0x1b4>)
  401d18:	701a      	strb	r2, [r3, #0]
  401d1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401d1e:	b662      	cpsie	i
  401d20:	e79b      	b.n	401c5a <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  401d22:	2201      	movs	r2, #1
  401d24:	4b13      	ldr	r3, [pc, #76]	; (401d74 <udd_ctrl_in_sent+0x1a4>)
  401d26:	701a      	strb	r2, [r3, #0]
  401d28:	e7ab      	b.n	401c82 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  401d2a:	b12d      	cbz	r5, 401d38 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  401d2c:	2201      	movs	r2, #1
  401d2e:	4b15      	ldr	r3, [pc, #84]	; (401d84 <udd_ctrl_in_sent+0x1b4>)
  401d30:	701a      	strb	r2, [r3, #0]
  401d32:	f3bf 8f5f 	dmb	sy
  401d36:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401d38:	2204      	movs	r2, #4
  401d3a:	4b0a      	ldr	r3, [pc, #40]	; (401d64 <udd_ctrl_in_sent+0x194>)
  401d3c:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401d3e:	4a0e      	ldr	r2, [pc, #56]	; (401d78 <udd_ctrl_in_sent+0x1a8>)
  401d40:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d42:	9302      	str	r3, [sp, #8]
  401d44:	9b02      	ldr	r3, [sp, #8]
  401d46:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d4a:	9302      	str	r3, [sp, #8]
  401d4c:	9b02      	ldr	r3, [sp, #8]
  401d4e:	f023 0301 	bic.w	r3, r3, #1
  401d52:	9302      	str	r3, [sp, #8]
  401d54:	9b02      	ldr	r3, [sp, #8]
  401d56:	6313      	str	r3, [r2, #48]	; 0x30
  401d58:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d5a:	f013 0f01 	tst.w	r3, #1
  401d5e:	d1fb      	bne.n	401d58 <udd_ctrl_in_sent+0x188>
  401d60:	e77b      	b.n	401c5a <udd_ctrl_in_sent+0x8a>
  401d62:	bf00      	nop
  401d64:	200007ea 	.word	0x200007ea
  401d68:	200007e6 	.word	0x200007e6
  401d6c:	20000854 	.word	0x20000854
  401d70:	200007e8 	.word	0x200007e8
  401d74:	200007e4 	.word	0x200007e4
  401d78:	40034000 	.word	0x40034000
  401d7c:	00401bc1 	.word	0x00401bc1
  401d80:	00401b39 	.word	0x00401b39
  401d84:	200001c0 	.word	0x200001c0

00401d88 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401d88:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  401d8a:	7c43      	ldrb	r3, [r0, #17]
  401d8c:	f013 0f10 	tst.w	r3, #16
  401d90:	d016      	beq.n	401dc0 <udd_ep_finish_job+0x38>
  401d92:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  401d94:	7c43      	ldrb	r3, [r0, #17]
  401d96:	f36f 1304 	bfc	r3, #4, #1
  401d9a:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401d9c:	6804      	ldr	r4, [r0, #0]
  401d9e:	b17c      	cbz	r4, 401dc0 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401da0:	f102 030c 	add.w	r3, r2, #12
  401da4:	4907      	ldr	r1, [pc, #28]	; (401dc4 <udd_ep_finish_job+0x3c>)
  401da6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401daa:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401dae:	bf18      	it	ne
  401db0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401db4:	6881      	ldr	r1, [r0, #8]
  401db6:	2d01      	cmp	r5, #1
  401db8:	bf14      	ite	ne
  401dba:	2000      	movne	r0, #0
  401dbc:	2001      	moveq	r0, #1
  401dbe:	47a0      	blx	r4
  401dc0:	bd38      	pop	{r3, r4, r5, pc}
  401dc2:	bf00      	nop
  401dc4:	40034000 	.word	0x40034000

00401dc8 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401dc8:	b430      	push	{r4, r5}
  401dca:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401dcc:	1e41      	subs	r1, r0, #1
  401dce:	0083      	lsls	r3, r0, #2
  401dd0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401dd4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  401dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  401dda:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  401ddc:	f012 0f02 	tst.w	r2, #2
  401de0:	d032      	beq.n	401e48 <udd_ep_ack_out_received+0x80>
  401de2:	f014 0f40 	tst.w	r4, #64	; 0x40
  401de6:	d108      	bne.n	401dfa <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401de8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401dec:	4c2a      	ldr	r4, [pc, #168]	; (401e98 <udd_ep_ack_out_received+0xd0>)
  401dee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401df2:	7c54      	ldrb	r4, [r2, #17]
  401df4:	f36f 0483 	bfc	r4, #2, #2
  401df8:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  401dfa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401dfe:	4c26      	ldr	r4, [pc, #152]	; (401e98 <udd_ep_ack_out_received+0xd0>)
  401e00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401e04:	7c52      	ldrb	r2, [r2, #17]
  401e06:	f012 0f0c 	tst.w	r2, #12
  401e0a:	d128      	bne.n	401e5e <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  401e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e0e:	9200      	str	r2, [sp, #0]
  401e10:	9a00      	ldr	r2, [sp, #0]
  401e12:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401e16:	9200      	str	r2, [sp, #0]
  401e18:	9a00      	ldr	r2, [sp, #0]
  401e1a:	f022 0202 	bic.w	r2, r2, #2
  401e1e:	9200      	str	r2, [sp, #0]
  401e20:	9a00      	ldr	r2, [sp, #0]
  401e22:	631a      	str	r2, [r3, #48]	; 0x30
  401e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e26:	f012 0f02 	tst.w	r2, #2
  401e2a:	d1fb      	bne.n	401e24 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401e2c:	b380      	cbz	r0, 401e90 <udd_ep_ack_out_received+0xc8>
  401e2e:	2803      	cmp	r0, #3
  401e30:	d02e      	beq.n	401e90 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  401e32:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401e36:	4b18      	ldr	r3, [pc, #96]	; (401e98 <udd_ep_ack_out_received+0xd0>)
  401e38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401e3c:	7c5a      	ldrb	r2, [r3, #17]
  401e3e:	2101      	movs	r1, #1
  401e40:	f361 0283 	bfi	r2, r1, #2, #2
  401e44:	745a      	strb	r2, [r3, #17]
  401e46:	e023      	b.n	401e90 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401e48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401e4c:	4c12      	ldr	r4, [pc, #72]	; (401e98 <udd_ep_ack_out_received+0xd0>)
  401e4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401e52:	7c54      	ldrb	r4, [r2, #17]
  401e54:	2501      	movs	r5, #1
  401e56:	f365 0483 	bfi	r4, r5, #2, #2
  401e5a:	7454      	strb	r4, [r2, #17]
  401e5c:	e7cd      	b.n	401dfa <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  401e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e60:	9201      	str	r2, [sp, #4]
  401e62:	9a01      	ldr	r2, [sp, #4]
  401e64:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401e68:	9201      	str	r2, [sp, #4]
  401e6a:	9a01      	ldr	r2, [sp, #4]
  401e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401e70:	9201      	str	r2, [sp, #4]
  401e72:	9a01      	ldr	r2, [sp, #4]
  401e74:	631a      	str	r2, [r3, #48]	; 0x30
  401e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e78:	f012 0f40 	tst.w	r2, #64	; 0x40
  401e7c:	d1fb      	bne.n	401e76 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  401e7e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401e82:	4b05      	ldr	r3, [pc, #20]	; (401e98 <udd_ep_ack_out_received+0xd0>)
  401e84:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401e88:	7c4b      	ldrb	r3, [r1, #17]
  401e8a:	f36f 0383 	bfc	r3, #2, #2
  401e8e:	744b      	strb	r3, [r1, #17]
	}
}
  401e90:	b002      	add	sp, #8
  401e92:	bc30      	pop	{r4, r5}
  401e94:	4770      	bx	lr
  401e96:	bf00      	nop
  401e98:	200007ec 	.word	0x200007ec

00401e9c <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ea0:	b083      	sub	sp, #12
  401ea2:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401ea4:	4681      	mov	r9, r0
  401ea6:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401ea8:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  401eac:	4b66      	ldr	r3, [pc, #408]	; (402048 <udd_ep_in_sent+0x1ac>)
  401eae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401eb2:	f893 c011 	ldrb.w	ip, [r3, #17]
  401eb6:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  401eba:	2800      	cmp	r0, #0
  401ebc:	f000 80b7 	beq.w	40202e <udd_ep_in_sent+0x192>
  401ec0:	2803      	cmp	r0, #3
  401ec2:	bf0c      	ite	eq
  401ec4:	2301      	moveq	r3, #1
  401ec6:	2302      	movne	r3, #2
  401ec8:	4563      	cmp	r3, ip
  401eca:	f340 80b2 	ble.w	402032 <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401ece:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401ed2:	4a5d      	ldr	r2, [pc, #372]	; (402048 <udd_ep_in_sent+0x1ac>)
  401ed4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ed8:	68da      	ldr	r2, [r3, #12]
  401eda:	689b      	ldr	r3, [r3, #8]
  401edc:	429a      	cmp	r2, r3
  401ede:	d309      	bcc.n	401ef4 <udd_ep_in_sent+0x58>
  401ee0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401ee4:	4c58      	ldr	r4, [pc, #352]	; (402048 <udd_ep_in_sent+0x1ac>)
  401ee6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  401eea:	7c49      	ldrb	r1, [r1, #17]
  401eec:	f011 0f40 	tst.w	r1, #64	; 0x40
  401ef0:	f000 80a3 	beq.w	40203a <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401ef4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401ef8:	4953      	ldr	r1, [pc, #332]	; (402048 <udd_ep_in_sent+0x1ac>)
  401efa:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  401efe:	686c      	ldr	r4, [r5, #4]
  401f00:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401f02:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401f04:	8a2b      	ldrh	r3, [r5, #16]
  401f06:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  401f0a:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  401f0c:	bf3a      	itte	cc
  401f0e:	460f      	movcc	r7, r1
		is_short_pkt = true;
  401f10:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401f14:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401f18:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401f1c:	494a      	ldr	r1, [pc, #296]	; (402048 <udd_ep_in_sent+0x1ac>)
  401f1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401f22:	443a      	add	r2, r7
  401f24:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401f26:	2f07      	cmp	r7, #7
  401f28:	d92b      	bls.n	401f82 <udd_ep_in_sent+0xe6>
  401f2a:	f104 0308 	add.w	r3, r4, #8
  401f2e:	463d      	mov	r5, r7
  401f30:	0082      	lsls	r2, r0, #2
  401f32:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401f36:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f3a:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  401f3e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f40:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401f44:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f46:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  401f4a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f4c:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  401f50:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f52:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401f56:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f58:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  401f5c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f5e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  401f62:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f64:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401f68:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  401f6a:	3d08      	subs	r5, #8
  401f6c:	3308      	adds	r3, #8
  401f6e:	2d07      	cmp	r5, #7
  401f70:	d8e3      	bhi.n	401f3a <udd_ep_in_sent+0x9e>
  401f72:	f1a7 0308 	sub.w	r3, r7, #8
  401f76:	f023 0307 	bic.w	r3, r3, #7
  401f7a:	3308      	adds	r3, #8
  401f7c:	441c      	add	r4, r3
  401f7e:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  401f82:	b14f      	cbz	r7, 401f98 <udd_ep_in_sent+0xfc>
  401f84:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401f86:	4931      	ldr	r1, [pc, #196]	; (40204c <udd_ep_in_sent+0x1b0>)
  401f88:	f109 0914 	add.w	r9, r9, #20
  401f8c:	f814 2b01 	ldrb.w	r2, [r4], #1
  401f90:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  401f94:	429c      	cmp	r4, r3
  401f96:	d1f9      	bne.n	401f8c <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  401f98:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401f9c:	4a2a      	ldr	r2, [pc, #168]	; (402048 <udd_ep_in_sent+0x1ac>)
  401f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401fa2:	f10c 0c01 	add.w	ip, ip, #1
  401fa6:	7c5a      	ldrb	r2, [r3, #17]
  401fa8:	f36c 0283 	bfi	r2, ip, #2, #2
  401fac:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401fae:	f1b8 0f00 	cmp.w	r8, #0
  401fb2:	d014      	beq.n	401fde <udd_ep_in_sent+0x142>
  401fb4:	0080      	lsls	r0, r0, #2
  401fb6:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401fba:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  401fbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401fc0:	9301      	str	r3, [sp, #4]
  401fc2:	9b01      	ldr	r3, [sp, #4]
  401fc4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401fc8:	9301      	str	r3, [sp, #4]
  401fca:	9b01      	ldr	r3, [sp, #4]
  401fcc:	f043 0310 	orr.w	r3, r3, #16
  401fd0:	9301      	str	r3, [sp, #4]
  401fd2:	9b01      	ldr	r3, [sp, #4]
  401fd4:	6303      	str	r3, [r0, #48]	; 0x30
  401fd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401fd8:	f013 0f10 	tst.w	r3, #16
  401fdc:	d0fb      	beq.n	401fd6 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401fde:	f1be 0f00 	cmp.w	lr, #0
  401fe2:	d008      	beq.n	401ff6 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401fe4:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401fe8:	4a17      	ldr	r2, [pc, #92]	; (402048 <udd_ep_in_sent+0x1ac>)
  401fea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401fee:	7c5a      	ldrb	r2, [r3, #17]
  401ff0:	f36f 1286 	bfc	r2, #6, #1
  401ff4:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401ff6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401ffa:	4a13      	ldr	r2, [pc, #76]	; (402048 <udd_ep_in_sent+0x1ac>)
  401ffc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402000:	68da      	ldr	r2, [r3, #12]
  402002:	689b      	ldr	r3, [r3, #8]
  402004:	429a      	cmp	r2, r3
  402006:	d31a      	bcc.n	40203e <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  402008:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40200c:	4a0e      	ldr	r2, [pc, #56]	; (402048 <udd_ep_in_sent+0x1ac>)
  40200e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402012:	7c5b      	ldrb	r3, [r3, #17]
  402014:	f013 0f40 	tst.w	r3, #64	; 0x40
  402018:	d113      	bne.n	402042 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  40201a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40201e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  402022:	7c73      	ldrb	r3, [r6, #17]
  402024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402028:	7473      	strb	r3, [r6, #17]
		return false;
  40202a:	2000      	movs	r0, #0
  40202c:	e002      	b.n	402034 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40202e:	2301      	movs	r3, #1
  402030:	e74a      	b.n	401ec8 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  402032:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  402034:	b003      	add	sp, #12
  402036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  40203a:	2000      	movs	r0, #0
  40203c:	e7fa      	b.n	402034 <udd_ep_in_sent+0x198>
	return true; // Pending
  40203e:	2001      	movs	r0, #1
  402040:	e7f8      	b.n	402034 <udd_ep_in_sent+0x198>
  402042:	2001      	movs	r0, #1
  402044:	e7f6      	b.n	402034 <udd_ep_in_sent+0x198>
  402046:	bf00      	nop
  402048:	200007ec 	.word	0x200007ec
  40204c:	40034000 	.word	0x40034000

00402050 <UDP_Handler>:
{
  402050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402054:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  402056:	4b87      	ldr	r3, [pc, #540]	; (402274 <UDP_Handler+0x224>)
  402058:	4798      	blx	r3
  40205a:	b920      	cbnz	r0, 402066 <UDP_Handler+0x16>
  40205c:	4b86      	ldr	r3, [pc, #536]	; (402278 <UDP_Handler+0x228>)
  40205e:	69db      	ldr	r3, [r3, #28]
  402060:	f413 7f80 	tst.w	r3, #256	; 0x100
  402064:	d03b      	beq.n	4020de <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  402066:	2022      	movs	r0, #34	; 0x22
  402068:	4b84      	ldr	r3, [pc, #528]	; (40227c <UDP_Handler+0x22c>)
  40206a:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  40206c:	4b82      	ldr	r3, [pc, #520]	; (402278 <UDP_Handler+0x228>)
  40206e:	699b      	ldr	r3, [r3, #24]
  402070:	f413 6f00 	tst.w	r3, #2048	; 0x800
  402074:	d004      	beq.n	402080 <UDP_Handler+0x30>
  402076:	4b80      	ldr	r3, [pc, #512]	; (402278 <UDP_Handler+0x228>)
  402078:	69db      	ldr	r3, [r3, #28]
  40207a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40207e:	d137      	bne.n	4020f0 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  402080:	4b7d      	ldr	r3, [pc, #500]	; (402278 <UDP_Handler+0x228>)
  402082:	69db      	ldr	r3, [r3, #28]
  402084:	f013 0f01 	tst.w	r3, #1
  402088:	f000 81ba 	beq.w	402400 <UDP_Handler+0x3b0>
	if (Is_udd_setup_received(0)) {
  40208c:	4b7a      	ldr	r3, [pc, #488]	; (402278 <UDP_Handler+0x228>)
  40208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402090:	f013 0f04 	tst.w	r3, #4
  402094:	d135      	bne.n	402102 <UDP_Handler+0xb2>
	if (Is_udd_in_sent(0)) {
  402096:	4b78      	ldr	r3, [pc, #480]	; (402278 <UDP_Handler+0x228>)
  402098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40209a:	f013 0f01 	tst.w	r3, #1
  40209e:	f040 80c5 	bne.w	40222c <UDP_Handler+0x1dc>
	if (Is_udd_bank0_received(0)) {
  4020a2:	4b75      	ldr	r3, [pc, #468]	; (402278 <UDP_Handler+0x228>)
  4020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020a6:	f013 0f02 	tst.w	r3, #2
  4020aa:	f040 80c2 	bne.w	402232 <UDP_Handler+0x1e2>
	if (Is_udd_stall(0)) {
  4020ae:	4b72      	ldr	r3, [pc, #456]	; (402278 <UDP_Handler+0x228>)
  4020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020b2:	f013 0f08 	tst.w	r3, #8
  4020b6:	f000 81a3 	beq.w	402400 <UDP_Handler+0x3b0>
		udd_ack_stall(0);
  4020ba:	4a6f      	ldr	r2, [pc, #444]	; (402278 <UDP_Handler+0x228>)
  4020bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4020be:	9300      	str	r3, [sp, #0]
  4020c0:	9b00      	ldr	r3, [sp, #0]
  4020c2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4020c6:	9300      	str	r3, [sp, #0]
  4020c8:	9b00      	ldr	r3, [sp, #0]
  4020ca:	f023 0308 	bic.w	r3, r3, #8
  4020ce:	9300      	str	r3, [sp, #0]
  4020d0:	9b00      	ldr	r3, [sp, #0]
  4020d2:	6313      	str	r3, [r2, #48]	; 0x30
  4020d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4020d6:	f013 0f08 	tst.w	r3, #8
  4020da:	d1fb      	bne.n	4020d4 <UDP_Handler+0x84>
  4020dc:	e005      	b.n	4020ea <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  4020de:	b672      	cpsid	i
  4020e0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4020e4:	2200      	movs	r2, #0
  4020e6:	4b66      	ldr	r3, [pc, #408]	; (402280 <UDP_Handler+0x230>)
  4020e8:	701a      	strb	r2, [r3, #0]
}
  4020ea:	b01b      	add	sp, #108	; 0x6c
  4020ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  4020f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4020f4:	4b60      	ldr	r3, [pc, #384]	; (402278 <UDP_Handler+0x228>)
  4020f6:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4020f8:	4b62      	ldr	r3, [pc, #392]	; (402284 <UDP_Handler+0x234>)
  4020fa:	4798      	blx	r3
		UDC_SOF_EVENT();
  4020fc:	4b62      	ldr	r3, [pc, #392]	; (402288 <UDP_Handler+0x238>)
  4020fe:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  402100:	e7f3      	b.n	4020ea <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  402102:	4b62      	ldr	r3, [pc, #392]	; (40228c <UDP_Handler+0x23c>)
  402104:	781b      	ldrb	r3, [r3, #0]
  402106:	b9cb      	cbnz	r3, 40213c <UDP_Handler+0xec>
	if (8 != udd_byte_count(0)) {
  402108:	4b5b      	ldr	r3, [pc, #364]	; (402278 <UDP_Handler+0x228>)
  40210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40210c:	f3c3 430a 	ubfx	r3, r3, #16, #11
  402110:	2b08      	cmp	r3, #8
  402112:	d018      	beq.n	402146 <UDP_Handler+0xf6>
		udd_ack_setup_received(0);
  402114:	4a58      	ldr	r2, [pc, #352]	; (402278 <UDP_Handler+0x228>)
  402116:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402118:	9301      	str	r3, [sp, #4]
  40211a:	9b01      	ldr	r3, [sp, #4]
  40211c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402120:	9301      	str	r3, [sp, #4]
  402122:	9b01      	ldr	r3, [sp, #4]
  402124:	f023 0304 	bic.w	r3, r3, #4
  402128:	9301      	str	r3, [sp, #4]
  40212a:	9b01      	ldr	r3, [sp, #4]
  40212c:	6313      	str	r3, [r2, #48]	; 0x30
  40212e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402130:	f013 0f04 	tst.w	r3, #4
  402134:	d1fb      	bne.n	40212e <UDP_Handler+0xde>
		udd_ctrl_stall_data();
  402136:	4b56      	ldr	r3, [pc, #344]	; (402290 <UDP_Handler+0x240>)
  402138:	4798      	blx	r3
  40213a:	e7d6      	b.n	4020ea <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  40213c:	4b55      	ldr	r3, [pc, #340]	; (402294 <UDP_Handler+0x244>)
  40213e:	4798      	blx	r3
		udd_ctrl_init();
  402140:	4b55      	ldr	r3, [pc, #340]	; (402298 <UDP_Handler+0x248>)
  402142:	4798      	blx	r3
  402144:	e7e0      	b.n	402108 <UDP_Handler+0xb8>
  402146:	4b55      	ldr	r3, [pc, #340]	; (40229c <UDP_Handler+0x24c>)
  402148:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  40214c:	494a      	ldr	r1, [pc, #296]	; (402278 <UDP_Handler+0x228>)
  40214e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402150:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  402154:	4283      	cmp	r3, r0
  402156:	d1fa      	bne.n	40214e <UDP_Handler+0xfe>
	if (udc_process_setup() == false) {
  402158:	4b51      	ldr	r3, [pc, #324]	; (4022a0 <UDP_Handler+0x250>)
  40215a:	4798      	blx	r3
  40215c:	b998      	cbnz	r0, 402186 <UDP_Handler+0x136>
		udd_ack_setup_received(0);
  40215e:	4a46      	ldr	r2, [pc, #280]	; (402278 <UDP_Handler+0x228>)
  402160:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402162:	9302      	str	r3, [sp, #8]
  402164:	9b02      	ldr	r3, [sp, #8]
  402166:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40216a:	9302      	str	r3, [sp, #8]
  40216c:	9b02      	ldr	r3, [sp, #8]
  40216e:	f023 0304 	bic.w	r3, r3, #4
  402172:	9302      	str	r3, [sp, #8]
  402174:	9b02      	ldr	r3, [sp, #8]
  402176:	6313      	str	r3, [r2, #48]	; 0x30
  402178:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40217a:	f013 0f04 	tst.w	r3, #4
  40217e:	d1fb      	bne.n	402178 <UDP_Handler+0x128>
		udd_ctrl_stall_data();
  402180:	4b43      	ldr	r3, [pc, #268]	; (402290 <UDP_Handler+0x240>)
  402182:	4798      	blx	r3
  402184:	e7b1      	b.n	4020ea <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  402186:	4b47      	ldr	r3, [pc, #284]	; (4022a4 <UDP_Handler+0x254>)
  402188:	f993 3000 	ldrsb.w	r3, [r3]
  40218c:	2b00      	cmp	r3, #0
  40218e:	db1d      	blt.n	4021cc <UDP_Handler+0x17c>
		udd_ack_setup_received(0);
  402190:	4a39      	ldr	r2, [pc, #228]	; (402278 <UDP_Handler+0x228>)
  402192:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402194:	9305      	str	r3, [sp, #20]
  402196:	9b05      	ldr	r3, [sp, #20]
  402198:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40219c:	9305      	str	r3, [sp, #20]
  40219e:	9b05      	ldr	r3, [sp, #20]
  4021a0:	f023 0304 	bic.w	r3, r3, #4
  4021a4:	9305      	str	r3, [sp, #20]
  4021a6:	9b05      	ldr	r3, [sp, #20]
  4021a8:	6313      	str	r3, [r2, #48]	; 0x30
  4021aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021ac:	f013 0f04 	tst.w	r3, #4
  4021b0:	d1fb      	bne.n	4021aa <UDP_Handler+0x15a>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4021b2:	4b3c      	ldr	r3, [pc, #240]	; (4022a4 <UDP_Handler+0x254>)
  4021b4:	88db      	ldrh	r3, [r3, #6]
  4021b6:	2b00      	cmp	r3, #0
  4021b8:	d035      	beq.n	402226 <UDP_Handler+0x1d6>
		udd_ctrl_prev_payload_nb_trans = 0;
  4021ba:	2300      	movs	r3, #0
  4021bc:	4a3a      	ldr	r2, [pc, #232]	; (4022a8 <UDP_Handler+0x258>)
  4021be:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4021c0:	4a3a      	ldr	r2, [pc, #232]	; (4022ac <UDP_Handler+0x25c>)
  4021c2:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4021c4:	2201      	movs	r2, #1
  4021c6:	4b31      	ldr	r3, [pc, #196]	; (40228c <UDP_Handler+0x23c>)
  4021c8:	701a      	strb	r2, [r3, #0]
  4021ca:	e78e      	b.n	4020ea <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  4021cc:	4a2a      	ldr	r2, [pc, #168]	; (402278 <UDP_Handler+0x228>)
  4021ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021d0:	9303      	str	r3, [sp, #12]
  4021d2:	9b03      	ldr	r3, [sp, #12]
  4021d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021d8:	9303      	str	r3, [sp, #12]
  4021da:	9b03      	ldr	r3, [sp, #12]
  4021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021e0:	9303      	str	r3, [sp, #12]
  4021e2:	9b03      	ldr	r3, [sp, #12]
  4021e4:	6313      	str	r3, [r2, #48]	; 0x30
  4021e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021e8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4021ec:	d0fb      	beq.n	4021e6 <UDP_Handler+0x196>
		udd_ack_setup_received(0);
  4021ee:	4a22      	ldr	r2, [pc, #136]	; (402278 <UDP_Handler+0x228>)
  4021f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021f2:	9304      	str	r3, [sp, #16]
  4021f4:	9b04      	ldr	r3, [sp, #16]
  4021f6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021fa:	9304      	str	r3, [sp, #16]
  4021fc:	9b04      	ldr	r3, [sp, #16]
  4021fe:	f023 0304 	bic.w	r3, r3, #4
  402202:	9304      	str	r3, [sp, #16]
  402204:	9b04      	ldr	r3, [sp, #16]
  402206:	6313      	str	r3, [r2, #48]	; 0x30
  402208:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40220a:	f013 0f04 	tst.w	r3, #4
  40220e:	d1fb      	bne.n	402208 <UDP_Handler+0x1b8>
		udd_ctrl_prev_payload_nb_trans = 0;
  402210:	2300      	movs	r3, #0
  402212:	4a25      	ldr	r2, [pc, #148]	; (4022a8 <UDP_Handler+0x258>)
  402214:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  402216:	4a25      	ldr	r2, [pc, #148]	; (4022ac <UDP_Handler+0x25c>)
  402218:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40221a:	2202      	movs	r2, #2
  40221c:	4b1b      	ldr	r3, [pc, #108]	; (40228c <UDP_Handler+0x23c>)
  40221e:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402220:	4b23      	ldr	r3, [pc, #140]	; (4022b0 <UDP_Handler+0x260>)
  402222:	4798      	blx	r3
  402224:	e761      	b.n	4020ea <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  402226:	4b23      	ldr	r3, [pc, #140]	; (4022b4 <UDP_Handler+0x264>)
  402228:	4798      	blx	r3
  40222a:	e75e      	b.n	4020ea <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  40222c:	4b20      	ldr	r3, [pc, #128]	; (4022b0 <UDP_Handler+0x260>)
  40222e:	4798      	blx	r3
  402230:	e75b      	b.n	4020ea <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402232:	4b16      	ldr	r3, [pc, #88]	; (40228c <UDP_Handler+0x23c>)
  402234:	781b      	ldrb	r3, [r3, #0]
  402236:	2b01      	cmp	r3, #1
  402238:	d03e      	beq.n	4022b8 <UDP_Handler+0x268>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  40223a:	2b02      	cmp	r3, #2
  40223c:	d004      	beq.n	402248 <UDP_Handler+0x1f8>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40223e:	2b04      	cmp	r3, #4
  402240:	d002      	beq.n	402248 <UDP_Handler+0x1f8>
			udd_ctrl_stall_data();
  402242:	4b13      	ldr	r3, [pc, #76]	; (402290 <UDP_Handler+0x240>)
  402244:	4798      	blx	r3
  402246:	e001      	b.n	40224c <UDP_Handler+0x1fc>
			udd_ctrl_endofrequest();
  402248:	4b12      	ldr	r3, [pc, #72]	; (402294 <UDP_Handler+0x244>)
  40224a:	4798      	blx	r3
		udd_ack_bank0_received(0);
  40224c:	4a0a      	ldr	r2, [pc, #40]	; (402278 <UDP_Handler+0x228>)
  40224e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402250:	9306      	str	r3, [sp, #24]
  402252:	9b06      	ldr	r3, [sp, #24]
  402254:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402258:	9306      	str	r3, [sp, #24]
  40225a:	9b06      	ldr	r3, [sp, #24]
  40225c:	f023 0302 	bic.w	r3, r3, #2
  402260:	9306      	str	r3, [sp, #24]
  402262:	9b06      	ldr	r3, [sp, #24]
  402264:	6313      	str	r3, [r2, #48]	; 0x30
  402266:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402268:	f013 0f02 	tst.w	r3, #2
  40226c:	d1fb      	bne.n	402266 <UDP_Handler+0x216>
		udd_ctrl_init();
  40226e:	4b0a      	ldr	r3, [pc, #40]	; (402298 <UDP_Handler+0x248>)
  402270:	4798      	blx	r3
  402272:	e73a      	b.n	4020ea <UDP_Handler+0x9a>
  402274:	00401a85 	.word	0x00401a85
  402278:	40034000 	.word	0x40034000
  40227c:	004016d9 	.word	0x004016d9
  402280:	200001c0 	.word	0x200001c0
  402284:	00400ca5 	.word	0x00400ca5
  402288:	004034f9 	.word	0x004034f9
  40228c:	200007ea 	.word	0x200007ea
  402290:	00401b51 	.word	0x00401b51
  402294:	00401bc1 	.word	0x00401bc1
  402298:	00401b39 	.word	0x00401b39
  40229c:	20000853 	.word	0x20000853
  4022a0:	00400ce5 	.word	0x00400ce5
  4022a4:	20000854 	.word	0x20000854
  4022a8:	200007e8 	.word	0x200007e8
  4022ac:	200007e6 	.word	0x200007e6
  4022b0:	00401bd1 	.word	0x00401bd1
  4022b4:	00401b89 	.word	0x00401b89
	nb_data = udd_byte_count(0);
  4022b8:	4b93      	ldr	r3, [pc, #588]	; (402508 <UDP_Handler+0x4b8>)
  4022ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4022bc:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4022c0:	4b92      	ldr	r3, [pc, #584]	; (40250c <UDP_Handler+0x4bc>)
  4022c2:	899b      	ldrh	r3, [r3, #12]
  4022c4:	4a92      	ldr	r2, [pc, #584]	; (402510 <UDP_Handler+0x4c0>)
  4022c6:	8815      	ldrh	r5, [r2, #0]
  4022c8:	186a      	adds	r2, r5, r1
  4022ca:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  4022cc:	bfbc      	itt	lt
  4022ce:	1b5b      	sublt	r3, r3, r5
  4022d0:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4022d2:	4b8e      	ldr	r3, [pc, #568]	; (40250c <UDP_Handler+0x4bc>)
  4022d4:	6898      	ldr	r0, [r3, #8]
  4022d6:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4022d8:	b171      	cbz	r1, 4022f8 <UDP_Handler+0x2a8>
  4022da:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4022dc:	4c8a      	ldr	r4, [pc, #552]	; (402508 <UDP_Handler+0x4b8>)
  4022de:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4022e0:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  4022e4:	1a13      	subs	r3, r2, r0
  4022e6:	b2db      	uxtb	r3, r3
  4022e8:	428b      	cmp	r3, r1
  4022ea:	d3f8      	bcc.n	4022de <UDP_Handler+0x28e>
	udd_ctrl_payload_nb_trans += nb_data;
  4022ec:	440d      	add	r5, r1
  4022ee:	b2ad      	uxth	r5, r5
  4022f0:	4b87      	ldr	r3, [pc, #540]	; (402510 <UDP_Handler+0x4c0>)
  4022f2:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4022f4:	2940      	cmp	r1, #64	; 0x40
  4022f6:	d01a      	beq.n	40232e <UDP_Handler+0x2de>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  4022f8:	4b84      	ldr	r3, [pc, #528]	; (40250c <UDP_Handler+0x4bc>)
  4022fa:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  4022fc:	695b      	ldr	r3, [r3, #20]
  4022fe:	b113      	cbz	r3, 402306 <UDP_Handler+0x2b6>
			if (!udd_g_ctrlreq.over_under_run()) {
  402300:	4798      	blx	r3
  402302:	2800      	cmp	r0, #0
  402304:	d030      	beq.n	402368 <UDP_Handler+0x318>
		udd_ack_bank0_received(0);
  402306:	4a80      	ldr	r2, [pc, #512]	; (402508 <UDP_Handler+0x4b8>)
  402308:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40230a:	9308      	str	r3, [sp, #32]
  40230c:	9b08      	ldr	r3, [sp, #32]
  40230e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402312:	9308      	str	r3, [sp, #32]
  402314:	9b08      	ldr	r3, [sp, #32]
  402316:	f023 0302 	bic.w	r3, r3, #2
  40231a:	9308      	str	r3, [sp, #32]
  40231c:	9b08      	ldr	r3, [sp, #32]
  40231e:	6313      	str	r3, [r2, #48]	; 0x30
  402320:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402322:	f013 0f02 	tst.w	r3, #2
  402326:	d1fb      	bne.n	402320 <UDP_Handler+0x2d0>
		udd_ctrl_send_zlp_in();
  402328:	4b7a      	ldr	r3, [pc, #488]	; (402514 <UDP_Handler+0x4c4>)
  40232a:	4798      	blx	r3
  40232c:	e6dd      	b.n	4020ea <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  40232e:	4b77      	ldr	r3, [pc, #476]	; (40250c <UDP_Handler+0x4bc>)
  402330:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  402332:	4b79      	ldr	r3, [pc, #484]	; (402518 <UDP_Handler+0x4c8>)
  402334:	881b      	ldrh	r3, [r3, #0]
  402336:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  402338:	429a      	cmp	r2, r3
  40233a:	dddd      	ble.n	4022f8 <UDP_Handler+0x2a8>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  40233c:	4b73      	ldr	r3, [pc, #460]	; (40250c <UDP_Handler+0x4bc>)
  40233e:	899b      	ldrh	r3, [r3, #12]
  402340:	42ab      	cmp	r3, r5
  402342:	d025      	beq.n	402390 <UDP_Handler+0x340>
	udd_ack_bank0_received(0);
  402344:	4a70      	ldr	r2, [pc, #448]	; (402508 <UDP_Handler+0x4b8>)
  402346:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402348:	930b      	str	r3, [sp, #44]	; 0x2c
  40234a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40234c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402350:	930b      	str	r3, [sp, #44]	; 0x2c
  402352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402354:	f023 0302 	bic.w	r3, r3, #2
  402358:	930b      	str	r3, [sp, #44]	; 0x2c
  40235a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40235c:	6313      	str	r3, [r2, #48]	; 0x30
  40235e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402360:	f013 0f02 	tst.w	r3, #2
  402364:	d1fb      	bne.n	40235e <UDP_Handler+0x30e>
  402366:	e6c0      	b.n	4020ea <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  402368:	4b6c      	ldr	r3, [pc, #432]	; (40251c <UDP_Handler+0x4cc>)
  40236a:	4798      	blx	r3
				udd_ack_bank0_received(0);
  40236c:	4a66      	ldr	r2, [pc, #408]	; (402508 <UDP_Handler+0x4b8>)
  40236e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402370:	9307      	str	r3, [sp, #28]
  402372:	9b07      	ldr	r3, [sp, #28]
  402374:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402378:	9307      	str	r3, [sp, #28]
  40237a:	9b07      	ldr	r3, [sp, #28]
  40237c:	f023 0302 	bic.w	r3, r3, #2
  402380:	9307      	str	r3, [sp, #28]
  402382:	9b07      	ldr	r3, [sp, #28]
  402384:	6313      	str	r3, [r2, #48]	; 0x30
  402386:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402388:	f013 0f02 	tst.w	r3, #2
  40238c:	d1fb      	bne.n	402386 <UDP_Handler+0x336>
  40238e:	e6ac      	b.n	4020ea <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  402390:	4b5e      	ldr	r3, [pc, #376]	; (40250c <UDP_Handler+0x4bc>)
  402392:	695b      	ldr	r3, [r3, #20]
  402394:	b153      	cbz	r3, 4023ac <UDP_Handler+0x35c>
		if (!udd_g_ctrlreq.over_under_run()) {
  402396:	4798      	blx	r3
  402398:	b1e8      	cbz	r0, 4023d6 <UDP_Handler+0x386>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40239a:	495f      	ldr	r1, [pc, #380]	; (402518 <UDP_Handler+0x4c8>)
  40239c:	4a5c      	ldr	r2, [pc, #368]	; (402510 <UDP_Handler+0x4c0>)
  40239e:	880b      	ldrh	r3, [r1, #0]
  4023a0:	8810      	ldrh	r0, [r2, #0]
  4023a2:	4403      	add	r3, r0
  4023a4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  4023a6:	2300      	movs	r3, #0
  4023a8:	8013      	strh	r3, [r2, #0]
  4023aa:	e7cb      	b.n	402344 <UDP_Handler+0x2f4>
			udd_ctrl_stall_data();
  4023ac:	4b5b      	ldr	r3, [pc, #364]	; (40251c <UDP_Handler+0x4cc>)
  4023ae:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4023b0:	4a55      	ldr	r2, [pc, #340]	; (402508 <UDP_Handler+0x4b8>)
  4023b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023b4:	9309      	str	r3, [sp, #36]	; 0x24
  4023b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023b8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023bc:	9309      	str	r3, [sp, #36]	; 0x24
  4023be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023c0:	f023 0302 	bic.w	r3, r3, #2
  4023c4:	9309      	str	r3, [sp, #36]	; 0x24
  4023c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023c8:	6313      	str	r3, [r2, #48]	; 0x30
  4023ca:	4613      	mov	r3, r2
  4023cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023ce:	f012 0f02 	tst.w	r2, #2
  4023d2:	d1fb      	bne.n	4023cc <UDP_Handler+0x37c>
  4023d4:	e689      	b.n	4020ea <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  4023d6:	4b51      	ldr	r3, [pc, #324]	; (40251c <UDP_Handler+0x4cc>)
  4023d8:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4023da:	4a4b      	ldr	r2, [pc, #300]	; (402508 <UDP_Handler+0x4b8>)
  4023dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023de:	930a      	str	r3, [sp, #40]	; 0x28
  4023e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4023e2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023e6:	930a      	str	r3, [sp, #40]	; 0x28
  4023e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4023ea:	f023 0302 	bic.w	r3, r3, #2
  4023ee:	930a      	str	r3, [sp, #40]	; 0x28
  4023f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4023f2:	6313      	str	r3, [r2, #48]	; 0x30
  4023f4:	4613      	mov	r3, r2
  4023f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023f8:	f012 0f02 	tst.w	r2, #2
  4023fc:	d1fb      	bne.n	4023f6 <UDP_Handler+0x3a6>
  4023fe:	e674      	b.n	4020ea <UDP_Handler+0x9a>
  402400:	4a47      	ldr	r2, [pc, #284]	; (402520 <UDP_Handler+0x4d0>)
	for (i = 0; i < nb_data; i++) {
  402402:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402404:	f8df e100 	ldr.w	lr, [pc, #256]	; 402508 <UDP_Handler+0x4b8>
  402408:	4618      	mov	r0, r3
  40240a:	e17f      	b.n	40270c <UDP_Handler+0x6bc>
	uint32_t pkt_size = ptr_job->size;
  40240c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  402410:	4b43      	ldr	r3, [pc, #268]	; (402520 <UDP_Handler+0x4d0>)
  402412:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402416:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  40241a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  40241e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402420:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  402424:	f1b9 0f00 	cmp.w	r9, #0
  402428:	f000 81e3 	beq.w	4027f2 <UDP_Handler+0x7a2>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40242c:	4b3c      	ldr	r3, [pc, #240]	; (402520 <UDP_Handler+0x4d0>)
  40242e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402432:	f8d3 e008 	ldr.w	lr, [r3, #8]
  402436:	68da      	ldr	r2, [r3, #12]
  402438:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40243c:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  40243e:	4548      	cmp	r0, r9
  402440:	f240 81cb 	bls.w	4027da <UDP_Handler+0x78a>
		ptr_job->buf_cnt += nb_data;
  402444:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  402448:	4b35      	ldr	r3, [pc, #212]	; (402520 <UDP_Handler+0x4d0>)
  40244a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  40244e:	eb02 0009 	add.w	r0, r2, r9
  402452:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  402454:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  402456:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40245a:	4411      	add	r1, r2
  40245c:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  40245e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  402460:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  402464:	1a5a      	subs	r2, r3, r1
  402466:	4282      	cmp	r2, r0
  402468:	d3f9      	bcc.n	40245e <UDP_Handler+0x40e>
	udd_ep_ack_out_received(ep);
  40246a:	4630      	mov	r0, r6
  40246c:	4b2d      	ldr	r3, [pc, #180]	; (402524 <UDP_Handler+0x4d4>)
  40246e:	4798      	blx	r3
	if ((b_full || b_short) &&
  402470:	f1bb 0f00 	cmp.w	fp, #0
  402474:	f000 81c0 	beq.w	4027f8 <UDP_Handler+0x7a8>
			!Is_udd_endpoint_stall_requested(ep)) {
  402478:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  40247a:	f013 0f20 	tst.w	r3, #32
  40247e:	f47f ae34 	bne.w	4020ea <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  402482:	4b21      	ldr	r3, [pc, #132]	; (402508 <UDP_Handler+0x4b8>)
  402484:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402486:	4b26      	ldr	r3, [pc, #152]	; (402520 <UDP_Handler+0x4d0>)
  402488:	00ba      	lsls	r2, r7, #2
  40248a:	19d1      	adds	r1, r2, r7
  40248c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  402490:	68cb      	ldr	r3, [r1, #12]
  402492:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402494:	4632      	mov	r2, r6
  402496:	2100      	movs	r1, #0
  402498:	4640      	mov	r0, r8
  40249a:	4b23      	ldr	r3, [pc, #140]	; (402528 <UDP_Handler+0x4d8>)
  40249c:	4798      	blx	r3
  40249e:	e624      	b.n	4020ea <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  4024a0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4024a4:	4b1e      	ldr	r3, [pc, #120]	; (402520 <UDP_Handler+0x4d0>)
  4024a6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4024aa:	7c53      	ldrb	r3, [r2, #17]
  4024ac:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4024b0:	3103      	adds	r1, #3
  4024b2:	f361 0383 	bfi	r3, r1, #2, #2
  4024b6:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4024b8:	7c53      	ldrb	r3, [r2, #17]
  4024ba:	f013 0f20 	tst.w	r3, #32
  4024be:	d05f      	beq.n	402580 <UDP_Handler+0x530>
				if (ptr_job->bank) {
  4024c0:	f013 0f0c 	tst.w	r3, #12
  4024c4:	d032      	beq.n	40252c <UDP_Handler+0x4dc>
					// Send remaining
					udd_set_transmit_ready(ep);
  4024c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4024c8:	930c      	str	r3, [sp, #48]	; 0x30
  4024ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4024cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024d0:	930c      	str	r3, [sp, #48]	; 0x30
  4024d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4024d4:	f043 0310 	orr.w	r3, r3, #16
  4024d8:	930c      	str	r3, [sp, #48]	; 0x30
  4024da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4024dc:	6323      	str	r3, [r4, #48]	; 0x30
  4024de:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4024e0:	f013 0f10 	tst.w	r3, #16
  4024e4:	d0fb      	beq.n	4024de <UDP_Handler+0x48e>
					udd_ack_in_sent(ep);
  4024e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4024e8:	930d      	str	r3, [sp, #52]	; 0x34
  4024ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4024ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024f0:	930d      	str	r3, [sp, #52]	; 0x34
  4024f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4024f4:	f023 0301 	bic.w	r3, r3, #1
  4024f8:	930d      	str	r3, [sp, #52]	; 0x34
  4024fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4024fc:	6323      	str	r3, [r4, #48]	; 0x30
  4024fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402500:	f013 0f01 	tst.w	r3, #1
  402504:	d1fb      	bne.n	4024fe <UDP_Handler+0x4ae>
  402506:	e5f0      	b.n	4020ea <UDP_Handler+0x9a>
  402508:	40034000 	.word	0x40034000
  40250c:	20000854 	.word	0x20000854
  402510:	200007e6 	.word	0x200007e6
  402514:	00401b89 	.word	0x00401b89
  402518:	200007e8 	.word	0x200007e8
  40251c:	00401b51 	.word	0x00401b51
  402520:	200007ec 	.word	0x200007ec
  402524:	00401dc9 	.word	0x00401dc9
  402528:	00401d89 	.word	0x00401d89
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  40252c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40252e:	930e      	str	r3, [sp, #56]	; 0x38
  402530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402532:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402536:	930e      	str	r3, [sp, #56]	; 0x38
  402538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40253a:	f023 0301 	bic.w	r3, r3, #1
  40253e:	930e      	str	r3, [sp, #56]	; 0x38
  402540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402542:	6323      	str	r3, [r4, #48]	; 0x30
  402544:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402546:	f013 0f01 	tst.w	r3, #1
  40254a:	d1fb      	bne.n	402544 <UDP_Handler+0x4f4>
					// Enable stall
					udd_enable_stall_handshake(ep);
  40254c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40254e:	930f      	str	r3, [sp, #60]	; 0x3c
  402550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402552:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402556:	930f      	str	r3, [sp, #60]	; 0x3c
  402558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40255a:	f043 0320 	orr.w	r3, r3, #32
  40255e:	930f      	str	r3, [sp, #60]	; 0x3c
  402560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402562:	6323      	str	r3, [r4, #48]	; 0x30
  402564:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402566:	f013 0f20 	tst.w	r3, #32
  40256a:	d0fb      	beq.n	402564 <UDP_Handler+0x514>
					// Halt executed
					ptr_job->b_stall_requested = false;
  40256c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  402570:	4ba3      	ldr	r3, [pc, #652]	; (402800 <UDP_Handler+0x7b0>)
  402572:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  402576:	7c5a      	ldrb	r2, [r3, #17]
  402578:	f36f 1245 	bfc	r2, #5, #1
  40257c:	745a      	strb	r2, [r3, #17]
  40257e:	e5b4      	b.n	4020ea <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  402580:	f013 0f80 	tst.w	r3, #128	; 0x80
  402584:	d138      	bne.n	4025f8 <UDP_Handler+0x5a8>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  402586:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40258a:	4b9d      	ldr	r3, [pc, #628]	; (402800 <UDP_Handler+0x7b0>)
  40258c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402590:	68da      	ldr	r2, [r3, #12]
  402592:	689b      	ldr	r3, [r3, #8]
  402594:	429a      	cmp	r2, r3
  402596:	d341      	bcc.n	40261c <UDP_Handler+0x5cc>
					!ptr_job->b_shortpacket &&
  402598:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40259c:	4b98      	ldr	r3, [pc, #608]	; (402800 <UDP_Handler+0x7b0>)
  40259e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4025a2:	7c5b      	ldrb	r3, [r3, #17]
  4025a4:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4025a8:	d138      	bne.n	40261c <UDP_Handler+0x5cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4025aa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4025ae:	fab3 f383 	clz	r3, r3
  4025b2:	095b      	lsrs	r3, r3, #5
  4025b4:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  4025b6:	b672      	cpsid	i
  4025b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4025bc:	2200      	movs	r2, #0
  4025be:	4b91      	ldr	r3, [pc, #580]	; (402804 <UDP_Handler+0x7b4>)
  4025c0:	701a      	strb	r2, [r3, #0]
	return flags;
  4025c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  4025c4:	4a90      	ldr	r2, [pc, #576]	; (402808 <UDP_Handler+0x7b8>)
  4025c6:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4025c8:	b12b      	cbz	r3, 4025d6 <UDP_Handler+0x586>
		cpu_irq_enable();
  4025ca:	2201      	movs	r2, #1
  4025cc:	4b8d      	ldr	r3, [pc, #564]	; (402804 <UDP_Handler+0x7b4>)
  4025ce:	701a      	strb	r2, [r3, #0]
  4025d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025d4:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  4025d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4025d8:	9311      	str	r3, [sp, #68]	; 0x44
  4025da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4025dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4025e0:	9311      	str	r3, [sp, #68]	; 0x44
  4025e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4025e4:	f023 0301 	bic.w	r3, r3, #1
  4025e8:	9311      	str	r3, [sp, #68]	; 0x44
  4025ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4025ec:	6323      	str	r3, [r4, #48]	; 0x30
  4025ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4025f0:	f013 0f01 	tst.w	r3, #1
  4025f4:	d1fb      	bne.n	4025ee <UDP_Handler+0x59e>
  4025f6:	e578      	b.n	4020ea <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  4025f8:	2314      	movs	r3, #20
  4025fa:	4a81      	ldr	r2, [pc, #516]	; (402800 <UDP_Handler+0x7b0>)
  4025fc:	fb03 2307 	mla	r3, r3, r7, r2
  402600:	7c59      	ldrb	r1, [r3, #17]
  402602:	f36f 11c7 	bfc	r1, #7, #1
  402606:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402608:	68da      	ldr	r2, [r3, #12]
  40260a:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  40260c:	4b7e      	ldr	r3, [pc, #504]	; (402808 <UDP_Handler+0x7b8>)
  40260e:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402610:	4632      	mov	r2, r6
  402612:	2100      	movs	r1, #0
  402614:	4640      	mov	r0, r8
  402616:	4b7d      	ldr	r3, [pc, #500]	; (40280c <UDP_Handler+0x7bc>)
  402618:	4798      	blx	r3
  40261a:	e7b4      	b.n	402586 <UDP_Handler+0x536>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  40261c:	2e00      	cmp	r6, #0
  40261e:	d05b      	beq.n	4026d8 <UDP_Handler+0x688>
  402620:	2e03      	cmp	r6, #3
  402622:	d059      	beq.n	4026d8 <UDP_Handler+0x688>
					&& ptr_job->bank > 0) {
  402624:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  402628:	4b75      	ldr	r3, [pc, #468]	; (402800 <UDP_Handler+0x7b0>)
  40262a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40262e:	7c5b      	ldrb	r3, [r3, #17]
  402630:	f013 0f0c 	tst.w	r3, #12
  402634:	d024      	beq.n	402680 <UDP_Handler+0x630>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  402636:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402638:	9312      	str	r3, [sp, #72]	; 0x48
  40263a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40263c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402640:	9312      	str	r3, [sp, #72]	; 0x48
  402642:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402644:	f043 0310 	orr.w	r3, r3, #16
  402648:	9312      	str	r3, [sp, #72]	; 0x48
  40264a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40264c:	6323      	str	r3, [r4, #48]	; 0x30
  40264e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402650:	f013 0f10 	tst.w	r3, #16
  402654:	d0fb      	beq.n	40264e <UDP_Handler+0x5fe>
				udd_ack_in_sent(ep);
  402656:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402658:	9313      	str	r3, [sp, #76]	; 0x4c
  40265a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40265c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402660:	9313      	str	r3, [sp, #76]	; 0x4c
  402662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402664:	f023 0301 	bic.w	r3, r3, #1
  402668:	9313      	str	r3, [sp, #76]	; 0x4c
  40266a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40266c:	6323      	str	r3, [r4, #48]	; 0x30
  40266e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402670:	f013 0f01 	tst.w	r3, #1
  402674:	d1fb      	bne.n	40266e <UDP_Handler+0x61e>
				udd_ep_in_sent(ep, false);
  402676:	2100      	movs	r1, #0
  402678:	4630      	mov	r0, r6
  40267a:	4b65      	ldr	r3, [pc, #404]	; (402810 <UDP_Handler+0x7c0>)
  40267c:	4798      	blx	r3
  40267e:	e534      	b.n	4020ea <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  402680:	2101      	movs	r1, #1
  402682:	4630      	mov	r0, r6
  402684:	4b62      	ldr	r3, [pc, #392]	; (402810 <UDP_Handler+0x7c0>)
  402686:	4798      	blx	r3
  402688:	b1a0      	cbz	r0, 4026b4 <UDP_Handler+0x664>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  40268a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40268c:	9314      	str	r3, [sp, #80]	; 0x50
  40268e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402690:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402694:	9314      	str	r3, [sp, #80]	; 0x50
  402696:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402698:	f023 0301 	bic.w	r3, r3, #1
  40269c:	9314      	str	r3, [sp, #80]	; 0x50
  40269e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4026a0:	6323      	str	r3, [r4, #48]	; 0x30
  4026a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4026a4:	f013 0f01 	tst.w	r3, #1
  4026a8:	d1fb      	bne.n	4026a2 <UDP_Handler+0x652>
				udd_ep_in_sent(ep, false);
  4026aa:	2100      	movs	r1, #0
  4026ac:	4630      	mov	r0, r6
  4026ae:	4b58      	ldr	r3, [pc, #352]	; (402810 <UDP_Handler+0x7c0>)
  4026b0:	4798      	blx	r3
  4026b2:	e51a      	b.n	4020ea <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  4026b4:	2314      	movs	r3, #20
  4026b6:	4a52      	ldr	r2, [pc, #328]	; (402800 <UDP_Handler+0x7b0>)
  4026b8:	fb03 2707 	mla	r7, r3, r7, r2
  4026bc:	7c7a      	ldrb	r2, [r7, #17]
  4026be:	f36f 12c7 	bfc	r2, #7, #1
  4026c2:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4026c4:	68fb      	ldr	r3, [r7, #12]
  4026c6:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  4026c8:	4b4f      	ldr	r3, [pc, #316]	; (402808 <UDP_Handler+0x7b8>)
  4026ca:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4026cc:	4632      	mov	r2, r6
  4026ce:	2100      	movs	r1, #0
  4026d0:	4640      	mov	r0, r8
  4026d2:	4b4e      	ldr	r3, [pc, #312]	; (40280c <UDP_Handler+0x7bc>)
  4026d4:	4798      	blx	r3
  4026d6:	e7d8      	b.n	40268a <UDP_Handler+0x63a>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4026d8:	2101      	movs	r1, #1
  4026da:	4630      	mov	r0, r6
  4026dc:	4b4c      	ldr	r3, [pc, #304]	; (402810 <UDP_Handler+0x7c0>)
  4026de:	4798      	blx	r3
				udd_ack_in_sent(ep);
  4026e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4026e2:	9315      	str	r3, [sp, #84]	; 0x54
  4026e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4026e6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026ea:	9315      	str	r3, [sp, #84]	; 0x54
  4026ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4026ee:	f023 0301 	bic.w	r3, r3, #1
  4026f2:	9315      	str	r3, [sp, #84]	; 0x54
  4026f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4026f6:	6323      	str	r3, [r4, #48]	; 0x30
  4026f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4026fa:	f013 0f01 	tst.w	r3, #1
  4026fe:	d1fb      	bne.n	4026f8 <UDP_Handler+0x6a8>
  402700:	e4f3      	b.n	4020ea <UDP_Handler+0x9a>
  402702:	3301      	adds	r3, #1
  402704:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  402706:	2b04      	cmp	r3, #4
  402708:	f000 808e 	beq.w	402828 <UDP_Handler+0x7d8>
  40270c:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40270e:	f8de 1018 	ldr.w	r1, [lr, #24]
  402712:	fa00 f503 	lsl.w	r5, r0, r3
  402716:	4229      	tst	r1, r5
  402718:	d0f3      	beq.n	402702 <UDP_Handler+0x6b2>
  40271a:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  40271c:	4690      	mov	r8, r2
  40271e:	009c      	lsls	r4, r3, #2
  402720:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402724:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  402728:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40272a:	f011 0f42 	tst.w	r1, #66	; 0x42
  40272e:	f47f ae6d 	bne.w	40240c <UDP_Handler+0x3bc>
		if (Is_udd_in_sent(ep)) {
  402732:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402734:	f011 0f01 	tst.w	r1, #1
  402738:	f47f aeb2 	bne.w	4024a0 <UDP_Handler+0x450>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  40273c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40273e:	f011 0f08 	tst.w	r1, #8
  402742:	d0de      	beq.n	402702 <UDP_Handler+0x6b2>
			udd_ack_stall(ep);
  402744:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402746:	9316      	str	r3, [sp, #88]	; 0x58
  402748:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40274a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40274e:	9316      	str	r3, [sp, #88]	; 0x58
  402750:	9b16      	ldr	r3, [sp, #88]	; 0x58
  402752:	f023 0308 	bic.w	r3, r3, #8
  402756:	9316      	str	r3, [sp, #88]	; 0x58
  402758:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40275a:	6323      	str	r3, [r4, #48]	; 0x30
  40275c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40275e:	f013 0f08 	tst.w	r3, #8
  402762:	d1fb      	bne.n	40275c <UDP_Handler+0x70c>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  402764:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40276e:	f43f acbc 	beq.w	4020ea <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  402772:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402774:	e4b9      	b.n	4020ea <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402776:	4b24      	ldr	r3, [pc, #144]	; (402808 <UDP_Handler+0x7b8>)
  402778:	69db      	ldr	r3, [r3, #28]
  40277a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40277e:	d058      	beq.n	402832 <UDP_Handler+0x7e2>
		udd_ack_wakeups();
  402780:	4c21      	ldr	r4, [pc, #132]	; (402808 <UDP_Handler+0x7b8>)
  402782:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  402786:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  402788:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  40278a:	2001      	movs	r0, #1
  40278c:	4b21      	ldr	r3, [pc, #132]	; (402814 <UDP_Handler+0x7c4>)
  40278e:	4798      	blx	r3
		UDC_RESUME_EVENT();
  402790:	4b21      	ldr	r3, [pc, #132]	; (402818 <UDP_Handler+0x7c8>)
  402792:	4798      	blx	r3
		udd_ack_suspend();
  402794:	f44f 7380 	mov.w	r3, #256	; 0x100
  402798:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  40279a:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  40279c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4027a0:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  4027a2:	e4a2      	b.n	4020ea <UDP_Handler+0x9a>
		udd_ack_suspend();
  4027a4:	4b18      	ldr	r3, [pc, #96]	; (402808 <UDP_Handler+0x7b8>)
  4027a6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4027aa:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4027ac:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4027ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4027b2:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4027b4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4027b8:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4027ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4027be:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4027c0:	2022      	movs	r0, #34	; 0x22
  4027c2:	4b16      	ldr	r3, [pc, #88]	; (40281c <UDP_Handler+0x7cc>)
  4027c4:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  4027c6:	2000      	movs	r0, #0
  4027c8:	4b12      	ldr	r3, [pc, #72]	; (402814 <UDP_Handler+0x7c4>)
  4027ca:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  4027cc:	4b14      	ldr	r3, [pc, #80]	; (402820 <UDP_Handler+0x7d0>)
  4027ce:	4798      	blx	r3
		goto udd_interrupt_end;
  4027d0:	e48b      	b.n	4020ea <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  4027d2:	4630      	mov	r0, r6
  4027d4:	4b13      	ldr	r3, [pc, #76]	; (402824 <UDP_Handler+0x7d4>)
  4027d6:	4798      	blx	r3
  4027d8:	e64e      	b.n	402478 <UDP_Handler+0x428>
		ptr_job->buf_cnt += nb_data;
  4027da:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  4027de:	4b08      	ldr	r3, [pc, #32]	; (402800 <UDP_Handler+0x7b0>)
  4027e0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  4027e4:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  4027e8:	2800      	cmp	r0, #0
  4027ea:	d0f2      	beq.n	4027d2 <UDP_Handler+0x782>
			b_full = true;
  4027ec:	f04f 0b01 	mov.w	fp, #1
  4027f0:	e633      	b.n	40245a <UDP_Handler+0x40a>
	udd_ep_ack_out_received(ep);
  4027f2:	4630      	mov	r0, r6
  4027f4:	4b0b      	ldr	r3, [pc, #44]	; (402824 <UDP_Handler+0x7d4>)
  4027f6:	4798      	blx	r3
	if ((b_full || b_short) &&
  4027f8:	45ca      	cmp	sl, r9
  4027fa:	f63f ae3d 	bhi.w	402478 <UDP_Handler+0x428>
  4027fe:	e474      	b.n	4020ea <UDP_Handler+0x9a>
  402800:	200007ec 	.word	0x200007ec
  402804:	200001c0 	.word	0x200001c0
  402808:	40034000 	.word	0x40034000
  40280c:	00401d89 	.word	0x00401d89
  402810:	00401e9d 	.word	0x00401e9d
  402814:	00401a95 	.word	0x00401a95
  402818:	004034ed 	.word	0x004034ed
  40281c:	0040172d 	.word	0x0040172d
  402820:	004034e1 	.word	0x004034e1
  402824:	00401dc9 	.word	0x00401dc9
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402828:	4b4b      	ldr	r3, [pc, #300]	; (402958 <UDP_Handler+0x908>)
  40282a:	699b      	ldr	r3, [r3, #24]
  40282c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402830:	d1a1      	bne.n	402776 <UDP_Handler+0x726>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402832:	4b49      	ldr	r3, [pc, #292]	; (402958 <UDP_Handler+0x908>)
  402834:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402836:	f413 7f00 	tst.w	r3, #512	; 0x200
  40283a:	d004      	beq.n	402846 <UDP_Handler+0x7f6>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40283c:	4b46      	ldr	r3, [pc, #280]	; (402958 <UDP_Handler+0x908>)
  40283e:	69db      	ldr	r3, [r3, #28]
  402840:	f413 7f00 	tst.w	r3, #512	; 0x200
  402844:	d19c      	bne.n	402780 <UDP_Handler+0x730>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402846:	4b44      	ldr	r3, [pc, #272]	; (402958 <UDP_Handler+0x908>)
  402848:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40284a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40284e:	d004      	beq.n	40285a <UDP_Handler+0x80a>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402850:	4b41      	ldr	r3, [pc, #260]	; (402958 <UDP_Handler+0x908>)
  402852:	69db      	ldr	r3, [r3, #28]
  402854:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402858:	d192      	bne.n	402780 <UDP_Handler+0x730>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  40285a:	4b3f      	ldr	r3, [pc, #252]	; (402958 <UDP_Handler+0x908>)
  40285c:	699b      	ldr	r3, [r3, #24]
  40285e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402862:	d004      	beq.n	40286e <UDP_Handler+0x81e>
  402864:	4b3c      	ldr	r3, [pc, #240]	; (402958 <UDP_Handler+0x908>)
  402866:	69db      	ldr	r3, [r3, #28]
  402868:	f413 7f80 	tst.w	r3, #256	; 0x100
  40286c:	d19a      	bne.n	4027a4 <UDP_Handler+0x754>
	if (Is_udd_reset()) {
  40286e:	4b3a      	ldr	r3, [pc, #232]	; (402958 <UDP_Handler+0x908>)
  402870:	69db      	ldr	r3, [r3, #28]
  402872:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402876:	f43f ac38 	beq.w	4020ea <UDP_Handler+0x9a>
		udd_ack_reset();
  40287a:	4c37      	ldr	r4, [pc, #220]	; (402958 <UDP_Handler+0x908>)
  40287c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402880:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402882:	4e36      	ldr	r6, [pc, #216]	; (40295c <UDP_Handler+0x90c>)
  402884:	2201      	movs	r2, #1
  402886:	4611      	mov	r1, r2
  402888:	4630      	mov	r0, r6
  40288a:	4d35      	ldr	r5, [pc, #212]	; (402960 <UDP_Handler+0x910>)
  40288c:	47a8      	blx	r5
  40288e:	2202      	movs	r2, #2
  402890:	2101      	movs	r1, #1
  402892:	f106 0014 	add.w	r0, r6, #20
  402896:	47a8      	blx	r5
  402898:	2203      	movs	r2, #3
  40289a:	2101      	movs	r1, #1
  40289c:	f106 0028 	add.w	r0, r6, #40	; 0x28
  4028a0:	47a8      	blx	r5
		udc_reset();
  4028a2:	4b30      	ldr	r3, [pc, #192]	; (402964 <UDP_Handler+0x914>)
  4028a4:	4798      	blx	r3
		udd_disable_address_state();
  4028a6:	6863      	ldr	r3, [r4, #4]
  4028a8:	f023 0301 	bic.w	r3, r3, #1
  4028ac:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  4028ae:	6863      	ldr	r3, [r4, #4]
  4028b0:	f023 0302 	bic.w	r3, r3, #2
  4028b4:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  4028b6:	68a3      	ldr	r3, [r4, #8]
  4028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4028bc:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  4028be:	68a3      	ldr	r3, [r4, #8]
  4028c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4028c4:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  4028c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4028c8:	9318      	str	r3, [sp, #96]	; 0x60
  4028ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4028cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4028d0:	9318      	str	r3, [sp, #96]	; 0x60
  4028d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4028d4:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  4028d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4028dc:	9318      	str	r3, [sp, #96]	; 0x60
  4028de:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4028e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4028e4:	9318      	str	r3, [sp, #96]	; 0x60
  4028e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4028e8:	6323      	str	r3, [r4, #48]	; 0x30
  4028ea:	4622      	mov	r2, r4
  4028ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4028ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4028f2:	d0fb      	beq.n	4028ec <UDP_Handler+0x89c>
	udd_enable_endpoint(0);
  4028f4:	4a18      	ldr	r2, [pc, #96]	; (402958 <UDP_Handler+0x908>)
  4028f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4028f8:	9319      	str	r3, [sp, #100]	; 0x64
  4028fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4028fc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402900:	9319      	str	r3, [sp, #100]	; 0x64
  402902:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402908:	9319      	str	r3, [sp, #100]	; 0x64
  40290a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40290c:	6313      	str	r3, [r2, #48]	; 0x30
  40290e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402910:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  402914:	d0fb      	beq.n	40290e <UDP_Handler+0x8be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402916:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40291a:	fab3 f383 	clz	r3, r3
  40291e:	095b      	lsrs	r3, r3, #5
  402920:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  402922:	b672      	cpsid	i
  402924:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402928:	2200      	movs	r2, #0
  40292a:	4b0f      	ldr	r3, [pc, #60]	; (402968 <UDP_Handler+0x918>)
  40292c:	701a      	strb	r2, [r3, #0]
	return flags;
  40292e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  402930:	2101      	movs	r1, #1
  402932:	4a09      	ldr	r2, [pc, #36]	; (402958 <UDP_Handler+0x908>)
  402934:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402936:	b123      	cbz	r3, 402942 <UDP_Handler+0x8f2>
		cpu_irq_enable();
  402938:	4b0b      	ldr	r3, [pc, #44]	; (402968 <UDP_Handler+0x918>)
  40293a:	7019      	strb	r1, [r3, #0]
  40293c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402940:	b662      	cpsie	i
		udd_ctrl_init();
  402942:	4b0a      	ldr	r3, [pc, #40]	; (40296c <UDP_Handler+0x91c>)
  402944:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  402946:	4b04      	ldr	r3, [pc, #16]	; (402958 <UDP_Handler+0x908>)
  402948:	f44f 7280 	mov.w	r2, #256	; 0x100
  40294c:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  40294e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402952:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402954:	f7ff bbc9 	b.w	4020ea <UDP_Handler+0x9a>
  402958:	40034000 	.word	0x40034000
  40295c:	200007ec 	.word	0x200007ec
  402960:	00401d89 	.word	0x00401d89
  402964:	00400c5d 	.word	0x00400c5d
  402968:	200001c0 	.word	0x200001c0
  40296c:	00401b39 	.word	0x00401b39

00402970 <udd_attach>:
{
  402970:	b510      	push	{r4, lr}
  402972:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402974:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402978:	fab3 f383 	clz	r3, r3
  40297c:	095b      	lsrs	r3, r3, #5
  40297e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402980:	b672      	cpsid	i
  402982:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402986:	2200      	movs	r2, #0
  402988:	4b14      	ldr	r3, [pc, #80]	; (4029dc <udd_attach+0x6c>)
  40298a:	701a      	strb	r2, [r3, #0]
	return flags;
  40298c:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  40298e:	2001      	movs	r0, #1
  402990:	4b13      	ldr	r3, [pc, #76]	; (4029e0 <udd_attach+0x70>)
  402992:	4798      	blx	r3
	udd_enable_periph_ck();
  402994:	2022      	movs	r0, #34	; 0x22
  402996:	4b13      	ldr	r3, [pc, #76]	; (4029e4 <udd_attach+0x74>)
  402998:	4798      	blx	r3
	udd_enable_transceiver();
  40299a:	4b13      	ldr	r3, [pc, #76]	; (4029e8 <udd_attach+0x78>)
  40299c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40299e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4029a2:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  4029a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  4029aa:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  4029ac:	f44f 7280 	mov.w	r2, #256	; 0x100
  4029b0:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  4029b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4029b6:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  4029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4029bc:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  4029be:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4029c2:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  4029c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4029c8:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4029ca:	b12c      	cbz	r4, 4029d8 <udd_attach+0x68>
		cpu_irq_enable();
  4029cc:	2201      	movs	r2, #1
  4029ce:	4b03      	ldr	r3, [pc, #12]	; (4029dc <udd_attach+0x6c>)
  4029d0:	701a      	strb	r2, [r3, #0]
  4029d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4029d6:	b662      	cpsie	i
}
  4029d8:	b002      	add	sp, #8
  4029da:	bd10      	pop	{r4, pc}
  4029dc:	200001c0 	.word	0x200001c0
  4029e0:	00401a95 	.word	0x00401a95
  4029e4:	004016d9 	.word	0x004016d9
  4029e8:	40034000 	.word	0x40034000

004029ec <udd_enable>:
{
  4029ec:	b530      	push	{r4, r5, lr}
  4029ee:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029f0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4029f4:	fab3 f383 	clz	r3, r3
  4029f8:	095b      	lsrs	r3, r3, #5
  4029fa:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4029fc:	b672      	cpsid	i
  4029fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402a02:	2400      	movs	r4, #0
  402a04:	4b27      	ldr	r3, [pc, #156]	; (402aa4 <udd_enable+0xb8>)
  402a06:	701c      	strb	r4, [r3, #0]
	return flags;
  402a08:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  402a0a:	2022      	movs	r0, #34	; 0x22
  402a0c:	4b26      	ldr	r3, [pc, #152]	; (402aa8 <udd_enable+0xbc>)
  402a0e:	4798      	blx	r3
	sysclk_enable_usb();
  402a10:	4b26      	ldr	r3, [pc, #152]	; (402aac <udd_enable+0xc0>)
  402a12:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402a14:	4b26      	ldr	r3, [pc, #152]	; (402ab0 <udd_enable+0xc4>)
  402a16:	2250      	movs	r2, #80	; 0x50
  402a18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402a1c:	2204      	movs	r2, #4
  402a1e:	605a      	str	r2, [r3, #4]
  402a20:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  402a22:	4824      	ldr	r0, [pc, #144]	; (402ab4 <udd_enable+0xc8>)
  402a24:	009a      	lsls	r2, r3, #2
  402a26:	18d1      	adds	r1, r2, r3
  402a28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  402a2c:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  402a2e:	441a      	add	r2, r3
  402a30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402a34:	f001 0183 	and.w	r1, r1, #131	; 0x83
  402a38:	f36f 11c7 	bfc	r1, #7, #1
  402a3c:	7451      	strb	r1, [r2, #17]
  402a3e:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402a40:	2b03      	cmp	r3, #3
  402a42:	d1ef      	bne.n	402a24 <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402a44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402a48:	4b1b      	ldr	r3, [pc, #108]	; (402ab8 <udd_enable+0xcc>)
  402a4a:	4798      	blx	r3
	udd_b_idle = false;
  402a4c:	2200      	movs	r2, #0
  402a4e:	4b1b      	ldr	r3, [pc, #108]	; (402abc <udd_enable+0xd0>)
  402a50:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  402a52:	4b1b      	ldr	r3, [pc, #108]	; (402ac0 <udd_enable+0xd4>)
  402a54:	781b      	ldrb	r3, [r3, #0]
  402a56:	2bff      	cmp	r3, #255	; 0xff
  402a58:	d022      	beq.n	402aa0 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a5a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402a5e:	fab3 f383 	clz	r3, r3
  402a62:	095b      	lsrs	r3, r3, #5
  402a64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402a66:	b672      	cpsid	i
  402a68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402a6c:	2200      	movs	r2, #0
  402a6e:	4b0d      	ldr	r3, [pc, #52]	; (402aa4 <udd_enable+0xb8>)
  402a70:	701a      	strb	r2, [r3, #0]
	return flags;
  402a72:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  402a74:	4a12      	ldr	r2, [pc, #72]	; (402ac0 <udd_enable+0xd4>)
  402a76:	7813      	ldrb	r3, [r2, #0]
  402a78:	3301      	adds	r3, #1
  402a7a:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402a7c:	b129      	cbz	r1, 402a8a <udd_enable+0x9e>
		cpu_irq_enable();
  402a7e:	2201      	movs	r2, #1
  402a80:	4b08      	ldr	r3, [pc, #32]	; (402aa4 <udd_enable+0xb8>)
  402a82:	701a      	strb	r2, [r3, #0]
  402a84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402a88:	b662      	cpsie	i
	udd_attach();
  402a8a:	4b0e      	ldr	r3, [pc, #56]	; (402ac4 <udd_enable+0xd8>)
  402a8c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  402a8e:	b12d      	cbz	r5, 402a9c <udd_enable+0xb0>
		cpu_irq_enable();
  402a90:	2201      	movs	r2, #1
  402a92:	4b04      	ldr	r3, [pc, #16]	; (402aa4 <udd_enable+0xb8>)
  402a94:	701a      	strb	r2, [r3, #0]
  402a96:	f3bf 8f5f 	dmb	sy
  402a9a:	b662      	cpsie	i
}
  402a9c:	b003      	add	sp, #12
  402a9e:	bd30      	pop	{r4, r5, pc}
  402aa0:	e7fe      	b.n	402aa0 <udd_enable+0xb4>
  402aa2:	bf00      	nop
  402aa4:	200001c0 	.word	0x200001c0
  402aa8:	004016d9 	.word	0x004016d9
  402aac:	004001c9 	.word	0x004001c9
  402ab0:	e000e100 	.word	0xe000e100
  402ab4:	200007ec 	.word	0x200007ec
  402ab8:	004017a1 	.word	0x004017a1
  402abc:	200007e5 	.word	0x200007e5
  402ac0:	20000848 	.word	0x20000848
  402ac4:	00402971 	.word	0x00402971

00402ac8 <udd_is_high_speed>:
}
  402ac8:	2000      	movs	r0, #0
  402aca:	4770      	bx	lr

00402acc <udd_set_address>:
	udd_disable_address_state();
  402acc:	4b0d      	ldr	r3, [pc, #52]	; (402b04 <udd_set_address+0x38>)
  402ace:	685a      	ldr	r2, [r3, #4]
  402ad0:	f022 0201 	bic.w	r2, r2, #1
  402ad4:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402ad6:	689a      	ldr	r2, [r3, #8]
  402ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402adc:	609a      	str	r2, [r3, #8]
	if (address) {
  402ade:	4602      	mov	r2, r0
  402ae0:	b170      	cbz	r0, 402b00 <udd_set_address+0x34>
		udd_configure_address(address);
  402ae2:	6898      	ldr	r0, [r3, #8]
  402ae4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  402ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402aec:	4310      	orrs	r0, r2
  402aee:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402af0:	689a      	ldr	r2, [r3, #8]
  402af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402af6:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402af8:	685a      	ldr	r2, [r3, #4]
  402afa:	f042 0201 	orr.w	r2, r2, #1
  402afe:	605a      	str	r2, [r3, #4]
  402b00:	4770      	bx	lr
  402b02:	bf00      	nop
  402b04:	40034000 	.word	0x40034000

00402b08 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402b08:	4b05      	ldr	r3, [pc, #20]	; (402b20 <udd_getaddress+0x18>)
  402b0a:	685b      	ldr	r3, [r3, #4]
  402b0c:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402b10:	bf1d      	ittte	ne
  402b12:	4b03      	ldrne	r3, [pc, #12]	; (402b20 <udd_getaddress+0x18>)
  402b14:	6898      	ldrne	r0, [r3, #8]
  402b16:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  402b1a:	2000      	moveq	r0, #0
}
  402b1c:	4770      	bx	lr
  402b1e:	bf00      	nop
  402b20:	40034000 	.word	0x40034000

00402b24 <udd_get_frame_number>:
	return udd_frame_number();
  402b24:	4b02      	ldr	r3, [pc, #8]	; (402b30 <udd_get_frame_number+0xc>)
  402b26:	6818      	ldr	r0, [r3, #0]
}
  402b28:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402b2c:	4770      	bx	lr
  402b2e:	bf00      	nop
  402b30:	40034000 	.word	0x40034000

00402b34 <udd_get_micro_frame_number>:
}
  402b34:	2000      	movs	r0, #0
  402b36:	4770      	bx	lr

00402b38 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  402b38:	4b01      	ldr	r3, [pc, #4]	; (402b40 <udd_set_setup_payload+0x8>)
  402b3a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402b3c:	8199      	strh	r1, [r3, #12]
  402b3e:	4770      	bx	lr
  402b40:	20000854 	.word	0x20000854

00402b44 <udd_ep_alloc>:
{
  402b44:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b46:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  402b48:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  402b4c:	2c03      	cmp	r4, #3
  402b4e:	d867      	bhi.n	402c20 <udd_ep_alloc+0xdc>
  402b50:	00a3      	lsls	r3, r4, #2
  402b52:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402b56:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  402b5a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  402b5c:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402b60:	d161      	bne.n	402c26 <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402b62:	f001 0503 	and.w	r5, r1, #3
  402b66:	2d01      	cmp	r5, #1
  402b68:	d050      	beq.n	402c0c <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402b6a:	1f25      	subs	r5, r4, #4
  402b6c:	b2ed      	uxtb	r5, r5
  402b6e:	2d02      	cmp	r5, #2
  402b70:	bf34      	ite	cc
  402b72:	f44f 7500 	movcc.w	r5, #512	; 0x200
  402b76:	2540      	movcs	r5, #64	; 0x40
  402b78:	4295      	cmp	r5, r2
  402b7a:	db58      	blt.n	402c2e <udd_ep_alloc+0xea>
  402b7c:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  402b7e:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  402b80:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  402b84:	4d2b      	ldr	r5, [pc, #172]	; (402c34 <udd_ep_alloc+0xf0>)
  402b86:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  402b8a:	f105 0710 	add.w	r7, r5, #16
  402b8e:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  402b92:	f362 0e09 	bfi	lr, r2, #0, #10
  402b96:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  402b9a:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402ba0:	f36f 1245 	bfc	r2, #5, #1
  402ba4:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402ba6:	2800      	cmp	r0, #0
  402ba8:	db35      	blt.n	402c16 <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  402baa:	4e23      	ldr	r6, [pc, #140]	; (402c38 <udd_ep_alloc+0xf4>)
  402bac:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  402bae:	2201      	movs	r2, #1
  402bb0:	fa02 f404 	lsl.w	r4, r2, r4
  402bb4:	4325      	orrs	r5, r4
  402bb6:	62b5      	str	r5, [r6, #40]	; 0x28
  402bb8:	4635      	mov	r5, r6
  402bba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402bbc:	4214      	tst	r4, r2
  402bbe:	d0fc      	beq.n	402bba <udd_ep_alloc+0x76>
  402bc0:	4d1d      	ldr	r5, [pc, #116]	; (402c38 <udd_ep_alloc+0xf4>)
  402bc2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402bc4:	ea22 0404 	bic.w	r4, r2, r4
  402bc8:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  402bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402bcc:	9201      	str	r2, [sp, #4]
  402bce:	9a01      	ldr	r2, [sp, #4]
  402bd0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402bd4:	9201      	str	r2, [sp, #4]
  402bd6:	9a01      	ldr	r2, [sp, #4]
  402bd8:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402be0:	9201      	str	r2, [sp, #4]
  402be2:	2800      	cmp	r0, #0
  402be4:	ea4f 2201 	mov.w	r2, r1, lsl #8
  402be8:	f402 7240 	and.w	r2, r2, #768	; 0x300
  402bec:	bfb4      	ite	lt
  402bee:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  402bf2:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  402bf6:	9901      	ldr	r1, [sp, #4]
  402bf8:	4311      	orrs	r1, r2
  402bfa:	9101      	str	r1, [sp, #4]
  402bfc:	9901      	ldr	r1, [sp, #4]
  402bfe:	6319      	str	r1, [r3, #48]	; 0x30
  402c00:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402c02:	ea32 0101 	bics.w	r1, r2, r1
  402c06:	d1fb      	bne.n	402c00 <udd_ep_alloc+0xbc>
	return true;
  402c08:	2001      	movs	r0, #1
  402c0a:	e00a      	b.n	402c22 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402c0c:	b16c      	cbz	r4, 402c2a <udd_ep_alloc+0xe6>
  402c0e:	2c03      	cmp	r4, #3
  402c10:	d1ab      	bne.n	402b6a <udd_ep_alloc+0x26>
		return false;
  402c12:	2000      	movs	r0, #0
  402c14:	e005      	b.n	402c22 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  402c16:	787a      	ldrb	r2, [r7, #1]
  402c18:	f36f 0283 	bfc	r2, #2, #2
  402c1c:	707a      	strb	r2, [r7, #1]
  402c1e:	e7c4      	b.n	402baa <udd_ep_alloc+0x66>
		return false;
  402c20:	2000      	movs	r0, #0
}
  402c22:	b003      	add	sp, #12
  402c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  402c26:	2000      	movs	r0, #0
  402c28:	e7fb      	b.n	402c22 <udd_ep_alloc+0xde>
		return false;
  402c2a:	2000      	movs	r0, #0
  402c2c:	e7f9      	b.n	402c22 <udd_ep_alloc+0xde>
		return false;
  402c2e:	2000      	movs	r0, #0
  402c30:	e7f7      	b.n	402c22 <udd_ep_alloc+0xde>
  402c32:	bf00      	nop
  402c34:	200007ec 	.word	0x200007ec
  402c38:	40034000 	.word	0x40034000

00402c3c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c3c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c40:	2a03      	cmp	r2, #3
  402c42:	d822      	bhi.n	402c8a <udd_ep_free+0x4e>
{
  402c44:	b500      	push	{lr}
  402c46:	b083      	sub	sp, #12
  402c48:	0091      	lsls	r1, r2, #2
  402c4a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402c4e:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  402c52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c54:	9301      	str	r3, [sp, #4]
  402c56:	9b01      	ldr	r3, [sp, #4]
  402c58:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c5c:	9301      	str	r3, [sp, #4]
  402c5e:	9b01      	ldr	r3, [sp, #4]
  402c60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  402c64:	9301      	str	r3, [sp, #4]
  402c66:	9b01      	ldr	r3, [sp, #4]
  402c68:	630b      	str	r3, [r1, #48]	; 0x30
  402c6a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c6c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  402c70:	d1fb      	bne.n	402c6a <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402c72:	1e50      	subs	r0, r2, #1
  402c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c78:	2101      	movs	r1, #1
  402c7a:	4b04      	ldr	r3, [pc, #16]	; (402c8c <udd_ep_free+0x50>)
  402c7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c80:	4b03      	ldr	r3, [pc, #12]	; (402c90 <udd_ep_free+0x54>)
  402c82:	4798      	blx	r3
}
  402c84:	b003      	add	sp, #12
  402c86:	f85d fb04 	ldr.w	pc, [sp], #4
  402c8a:	4770      	bx	lr
  402c8c:	200007ec 	.word	0x200007ec
  402c90:	00401d89 	.word	0x00401d89

00402c94 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c94:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c98:	2803      	cmp	r0, #3
  402c9a:	d815      	bhi.n	402cc8 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  402c9c:	1e43      	subs	r3, r0, #1
  402c9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402ca2:	4a0a      	ldr	r2, [pc, #40]	; (402ccc <udd_ep_is_halted+0x38>)
  402ca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402ca8:	7c5b      	ldrb	r3, [r3, #17]
  402caa:	f013 0f20 	tst.w	r3, #32
  402cae:	d109      	bne.n	402cc4 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402cb0:	300c      	adds	r0, #12
  402cb2:	4b07      	ldr	r3, [pc, #28]	; (402cd0 <udd_ep_is_halted+0x3c>)
  402cb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  402cb8:	f013 0f28 	tst.w	r3, #40	; 0x28
  402cbc:	bf14      	ite	ne
  402cbe:	2001      	movne	r0, #1
  402cc0:	2000      	moveq	r0, #0
  402cc2:	4770      	bx	lr
  402cc4:	2001      	movs	r0, #1
  402cc6:	4770      	bx	lr
		return false;
  402cc8:	2000      	movs	r0, #0
}
  402cca:	4770      	bx	lr
  402ccc:	200007ec 	.word	0x200007ec
  402cd0:	40034000 	.word	0x40034000

00402cd4 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402cd4:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402cd8:	2903      	cmp	r1, #3
  402cda:	d85f      	bhi.n	402d9c <udd_ep_set_halt+0xc8>
{
  402cdc:	b410      	push	{r4}
  402cde:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402ce0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402ce4:	fab3 f383 	clz	r3, r3
  402ce8:	095b      	lsrs	r3, r3, #5
  402cea:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402cec:	b672      	cpsid	i
  402cee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402cf2:	2200      	movs	r2, #0
  402cf4:	4b2c      	ldr	r3, [pc, #176]	; (402da8 <udd_ep_set_halt+0xd4>)
  402cf6:	701a      	strb	r2, [r3, #0]
	return flags;
  402cf8:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402cfa:	f010 0f80 	tst.w	r0, #128	; 0x80
  402cfe:	d124      	bne.n	402d4a <udd_ep_set_halt+0x76>
  402d00:	008a      	lsls	r2, r1, #2
  402d02:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402d06:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  402d0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d0c:	9300      	str	r3, [sp, #0]
  402d0e:	9b00      	ldr	r3, [sp, #0]
  402d10:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d14:	9300      	str	r3, [sp, #0]
  402d16:	9b00      	ldr	r3, [sp, #0]
  402d18:	f043 0320 	orr.w	r3, r3, #32
  402d1c:	9300      	str	r3, [sp, #0]
  402d1e:	9b00      	ldr	r3, [sp, #0]
  402d20:	6313      	str	r3, [r2, #48]	; 0x30
  402d22:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d24:	f013 0f20 	tst.w	r3, #32
  402d28:	d0fb      	beq.n	402d22 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  402d2a:	2301      	movs	r3, #1
  402d2c:	fa03 f101 	lsl.w	r1, r3, r1
  402d30:	4b1e      	ldr	r3, [pc, #120]	; (402dac <udd_ep_set_halt+0xd8>)
  402d32:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402d34:	2c00      	cmp	r4, #0
  402d36:	d035      	beq.n	402da4 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402d38:	2001      	movs	r0, #1
  402d3a:	4b1b      	ldr	r3, [pc, #108]	; (402da8 <udd_ep_set_halt+0xd4>)
  402d3c:	7018      	strb	r0, [r3, #0]
  402d3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402d42:	b662      	cpsie	i
}
  402d44:	b003      	add	sp, #12
  402d46:	bc10      	pop	{r4}
  402d48:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402d4a:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402d4c:	f101 020c 	add.w	r2, r1, #12
  402d50:	4816      	ldr	r0, [pc, #88]	; (402dac <udd_ep_set_halt+0xd8>)
  402d52:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  402d56:	f012 0f10 	tst.w	r2, #16
  402d5a:	d109      	bne.n	402d70 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  402d5c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402d60:	4813      	ldr	r0, [pc, #76]	; (402db0 <udd_ep_set_halt+0xdc>)
  402d62:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402d66:	7c52      	ldrb	r2, [r2, #17]
  402d68:	f3c2 0281 	ubfx	r2, r2, #2, #2
  402d6c:	2a01      	cmp	r2, #1
  402d6e:	ddc7      	ble.n	402d00 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  402d70:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402d74:	4b0e      	ldr	r3, [pc, #56]	; (402db0 <udd_ep_set_halt+0xdc>)
  402d76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402d7a:	7c5a      	ldrb	r2, [r3, #17]
  402d7c:	f042 0220 	orr.w	r2, r2, #32
  402d80:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402d82:	2301      	movs	r3, #1
  402d84:	fa03 f101 	lsl.w	r1, r3, r1
  402d88:	4b08      	ldr	r3, [pc, #32]	; (402dac <udd_ep_set_halt+0xd8>)
  402d8a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402d8c:	b144      	cbz	r4, 402da0 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  402d8e:	2001      	movs	r0, #1
  402d90:	4b05      	ldr	r3, [pc, #20]	; (402da8 <udd_ep_set_halt+0xd4>)
  402d92:	7018      	strb	r0, [r3, #0]
  402d94:	f3bf 8f5f 	dmb	sy
  402d98:	b662      	cpsie	i
  402d9a:	e7d3      	b.n	402d44 <udd_ep_set_halt+0x70>
		return false;
  402d9c:	2000      	movs	r0, #0
  402d9e:	4770      	bx	lr
		return true;
  402da0:	2001      	movs	r0, #1
  402da2:	e7cf      	b.n	402d44 <udd_ep_set_halt+0x70>
	return true;
  402da4:	2001      	movs	r0, #1
  402da6:	e7cd      	b.n	402d44 <udd_ep_set_halt+0x70>
  402da8:	200001c0 	.word	0x200001c0
  402dac:	40034000 	.word	0x40034000
  402db0:	200007ec 	.word	0x200007ec

00402db4 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  402db4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402db8:	2803      	cmp	r0, #3
  402dba:	d85e      	bhi.n	402e7a <udd_ep_clear_halt+0xc6>
{
  402dbc:	b530      	push	{r4, r5, lr}
  402dbe:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  402dc0:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  402dc2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  402dc6:	4b2f      	ldr	r3, [pc, #188]	; (402e84 <udd_ep_clear_halt+0xd0>)
  402dc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402dcc:	7c5a      	ldrb	r2, [r3, #17]
  402dce:	f36f 1245 	bfc	r2, #5, #1
  402dd2:	745a      	strb	r2, [r3, #17]
  402dd4:	0083      	lsls	r3, r0, #2
  402dd6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402dda:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402de0:	f012 0f20 	tst.w	r2, #32
  402de4:	d04b      	beq.n	402e7e <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  402de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402de8:	9200      	str	r2, [sp, #0]
  402dea:	9a00      	ldr	r2, [sp, #0]
  402dec:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402df0:	9200      	str	r2, [sp, #0]
  402df2:	9a00      	ldr	r2, [sp, #0]
  402df4:	f022 0220 	bic.w	r2, r2, #32
  402df8:	9200      	str	r2, [sp, #0]
  402dfa:	9a00      	ldr	r2, [sp, #0]
  402dfc:	631a      	str	r2, [r3, #48]	; 0x30
  402dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e00:	f012 0f20 	tst.w	r2, #32
  402e04:	d1fb      	bne.n	402dfe <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  402e06:	4d20      	ldr	r5, [pc, #128]	; (402e88 <udd_ep_clear_halt+0xd4>)
  402e08:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  402e0a:	2201      	movs	r2, #1
  402e0c:	fa02 f000 	lsl.w	r0, r2, r0
  402e10:	4301      	orrs	r1, r0
  402e12:	62a9      	str	r1, [r5, #40]	; 0x28
  402e14:	4629      	mov	r1, r5
  402e16:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402e18:	4210      	tst	r0, r2
  402e1a:	d0fc      	beq.n	402e16 <udd_ep_clear_halt+0x62>
  402e1c:	491a      	ldr	r1, [pc, #104]	; (402e88 <udd_ep_clear_halt+0xd4>)
  402e1e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402e20:	ea22 0000 	bic.w	r0, r2, r0
  402e24:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  402e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e28:	9201      	str	r2, [sp, #4]
  402e2a:	9a01      	ldr	r2, [sp, #4]
  402e2c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402e30:	9201      	str	r2, [sp, #4]
  402e32:	9a01      	ldr	r2, [sp, #4]
  402e34:	f022 0208 	bic.w	r2, r2, #8
  402e38:	9201      	str	r2, [sp, #4]
  402e3a:	9a01      	ldr	r2, [sp, #4]
  402e3c:	631a      	str	r2, [r3, #48]	; 0x30
  402e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e40:	f012 0f08 	tst.w	r2, #8
  402e44:	d1fb      	bne.n	402e3e <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  402e46:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  402e4a:	4a0e      	ldr	r2, [pc, #56]	; (402e84 <udd_ep_clear_halt+0xd0>)
  402e4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402e50:	7c5b      	ldrb	r3, [r3, #17]
  402e52:	f013 0f10 	tst.w	r3, #16
  402e56:	d101      	bne.n	402e5c <udd_ep_clear_halt+0xa8>
	return true;
  402e58:	2001      	movs	r0, #1
  402e5a:	e011      	b.n	402e80 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  402e5c:	4611      	mov	r1, r2
  402e5e:	00a2      	lsls	r2, r4, #2
  402e60:	1913      	adds	r3, r2, r4
  402e62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402e66:	7c58      	ldrb	r0, [r3, #17]
  402e68:	f36f 1004 	bfc	r0, #4, #1
  402e6c:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  402e6e:	4414      	add	r4, r2
  402e70:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  402e74:	4798      	blx	r3
	return true;
  402e76:	2001      	movs	r0, #1
  402e78:	e002      	b.n	402e80 <udd_ep_clear_halt+0xcc>
		return false;
  402e7a:	2000      	movs	r0, #0
  402e7c:	4770      	bx	lr
	return true;
  402e7e:	2001      	movs	r0, #1
}
  402e80:	b003      	add	sp, #12
  402e82:	bd30      	pop	{r4, r5, pc}
  402e84:	200007ec 	.word	0x200007ec
  402e88:	40034000 	.word	0x40034000

00402e8c <udd_ep_run>:
{
  402e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e8e:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402e90:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402e94:	2f03      	cmp	r7, #3
  402e96:	f200 80a2 	bhi.w	402fde <udd_ep_run+0x152>
  402e9a:	00bc      	lsls	r4, r7, #2
  402e9c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402ea0:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  402ea4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402ea6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402eaa:	f000 809b 	beq.w	402fe4 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  402eae:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  402eb0:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402eb4:	4e50      	ldr	r6, [pc, #320]	; (402ff8 <udd_ep_run+0x16c>)
  402eb6:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402eba:	7c76      	ldrb	r6, [r6, #17]
  402ebc:	f016 0f20 	tst.w	r6, #32
  402ec0:	f040 8092 	bne.w	402fe8 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402ec4:	6b26      	ldr	r6, [r4, #48]	; 0x30
  402ec6:	f016 0f20 	tst.w	r6, #32
  402eca:	f040 808f 	bne.w	402fec <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402ece:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402ed2:	fab6 f686 	clz	r6, r6
  402ed6:	0976      	lsrs	r6, r6, #5
  402ed8:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402eda:	b672      	cpsid	i
  402edc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402ee0:	f04f 0e00 	mov.w	lr, #0
  402ee4:	4e45      	ldr	r6, [pc, #276]	; (402ffc <udd_ep_run+0x170>)
  402ee6:	f886 e000 	strb.w	lr, [r6]
	return flags;
  402eea:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  402eee:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402ef2:	4e41      	ldr	r6, [pc, #260]	; (402ff8 <udd_ep_run+0x16c>)
  402ef4:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402ef8:	7c76      	ldrb	r6, [r6, #17]
  402efa:	f016 0f10 	tst.w	r6, #16
  402efe:	d00a      	beq.n	402f16 <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402f00:	f1bc 0f00 	cmp.w	ip, #0
  402f04:	d074      	beq.n	402ff0 <udd_ep_run+0x164>
		cpu_irq_enable();
  402f06:	2201      	movs	r2, #1
  402f08:	4b3c      	ldr	r3, [pc, #240]	; (402ffc <udd_ep_run+0x170>)
  402f0a:	701a      	strb	r2, [r3, #0]
  402f0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402f10:	b662      	cpsie	i
		return false; // Job already on going
  402f12:	2000      	movs	r0, #0
  402f14:	e064      	b.n	402fe0 <udd_ep_run+0x154>
	ptr_job->busy = true;
  402f16:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402f1a:	4e37      	ldr	r6, [pc, #220]	; (402ff8 <udd_ep_run+0x16c>)
  402f1c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402f20:	f896 e011 	ldrb.w	lr, [r6, #17]
  402f24:	f04e 0e10 	orr.w	lr, lr, #16
  402f28:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402f2c:	f1bc 0f00 	cmp.w	ip, #0
  402f30:	d007      	beq.n	402f42 <udd_ep_run+0xb6>
		cpu_irq_enable();
  402f32:	f04f 0e01 	mov.w	lr, #1
  402f36:	4e31      	ldr	r6, [pc, #196]	; (402ffc <udd_ep_run+0x170>)
  402f38:	f886 e000 	strb.w	lr, [r6]
  402f3c:	f3bf 8f5f 	dmb	sy
  402f40:	b662      	cpsie	i
	ptr_job->buf = buf;
  402f42:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402ff8 <udd_ep_run+0x16c>
  402f46:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  402f4a:	00b6      	lsls	r6, r6, #2
  402f4c:	eb0c 0e06 	add.w	lr, ip, r6
  402f50:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402f54:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  402f58:	2200      	movs	r2, #0
  402f5a:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  402f5e:	9a08      	ldr	r2, [sp, #32]
  402f60:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402f64:	b911      	cbnz	r1, 402f6c <udd_ep_run+0xe0>
  402f66:	fab3 f183 	clz	r1, r3
  402f6a:	0949      	lsrs	r1, r1, #5
  402f6c:	4a22      	ldr	r2, [pc, #136]	; (402ff8 <udd_ep_run+0x16c>)
  402f6e:	00ae      	lsls	r6, r5, #2
  402f70:	1973      	adds	r3, r6, r5
  402f72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402f76:	7c5b      	ldrb	r3, [r3, #17]
  402f78:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  402f7c:	4435      	add	r5, r6
  402f7e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  402f82:	f36f 13c7 	bfc	r3, #7, #1
  402f86:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f88:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402f8c:	fab3 f383 	clz	r3, r3
  402f90:	095b      	lsrs	r3, r3, #5
  402f92:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402f94:	b672      	cpsid	i
  402f96:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402f9a:	2200      	movs	r2, #0
  402f9c:	4b17      	ldr	r3, [pc, #92]	; (402ffc <udd_ep_run+0x170>)
  402f9e:	701a      	strb	r2, [r3, #0]
	return flags;
  402fa0:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  402fa2:	2301      	movs	r3, #1
  402fa4:	40bb      	lsls	r3, r7
  402fa6:	4a16      	ldr	r2, [pc, #88]	; (403000 <udd_ep_run+0x174>)
  402fa8:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  402faa:	f010 0f80 	tst.w	r0, #128	; 0x80
  402fae:	d107      	bne.n	402fc0 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  402fb0:	b305      	cbz	r5, 402ff4 <udd_ep_run+0x168>
		cpu_irq_enable();
  402fb2:	2001      	movs	r0, #1
  402fb4:	4b11      	ldr	r3, [pc, #68]	; (402ffc <udd_ep_run+0x170>)
  402fb6:	7018      	strb	r0, [r3, #0]
  402fb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402fbc:	b662      	cpsie	i
  402fbe:	e00f      	b.n	402fe0 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  402fc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402fc2:	f013 0f11 	tst.w	r3, #17
  402fc6:	d1f3      	bne.n	402fb0 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  402fc8:	2101      	movs	r1, #1
  402fca:	4638      	mov	r0, r7
  402fcc:	4b0d      	ldr	r3, [pc, #52]	; (403004 <udd_ep_run+0x178>)
  402fce:	4798      	blx	r3
  402fd0:	2800      	cmp	r0, #0
  402fd2:	d0ed      	beq.n	402fb0 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  402fd4:	2100      	movs	r1, #0
  402fd6:	4638      	mov	r0, r7
  402fd8:	4b0a      	ldr	r3, [pc, #40]	; (403004 <udd_ep_run+0x178>)
  402fda:	4798      	blx	r3
  402fdc:	e7e8      	b.n	402fb0 <udd_ep_run+0x124>
		return false;
  402fde:	2000      	movs	r0, #0
}
  402fe0:	b003      	add	sp, #12
  402fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  402fe4:	2000      	movs	r0, #0
  402fe6:	e7fb      	b.n	402fe0 <udd_ep_run+0x154>
  402fe8:	2000      	movs	r0, #0
  402fea:	e7f9      	b.n	402fe0 <udd_ep_run+0x154>
  402fec:	2000      	movs	r0, #0
  402fee:	e7f7      	b.n	402fe0 <udd_ep_run+0x154>
		return false; // Job already on going
  402ff0:	2000      	movs	r0, #0
  402ff2:	e7f5      	b.n	402fe0 <udd_ep_run+0x154>
	return true;
  402ff4:	2001      	movs	r0, #1
  402ff6:	e7f3      	b.n	402fe0 <udd_ep_run+0x154>
  402ff8:	200007ec 	.word	0x200007ec
  402ffc:	200001c0 	.word	0x200001c0
  403000:	40034000 	.word	0x40034000
  403004:	00401e9d 	.word	0x00401e9d

00403008 <udd_ep_abort>:
{
  403008:	b5f0      	push	{r4, r5, r6, r7, lr}
  40300a:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  40300c:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  403010:	2d03      	cmp	r5, #3
  403012:	d840      	bhi.n	403096 <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403014:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403018:	fab3 f383 	clz	r3, r3
  40301c:	095b      	lsrs	r3, r3, #5
  40301e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  403020:	b672      	cpsid	i
  403022:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403026:	2200      	movs	r2, #0
  403028:	4b4b      	ldr	r3, [pc, #300]	; (403158 <udd_ep_abort+0x150>)
  40302a:	701a      	strb	r2, [r3, #0]
	return flags;
  40302c:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  40302e:	2401      	movs	r4, #1
  403030:	40ac      	lsls	r4, r5
  403032:	4a4a      	ldr	r2, [pc, #296]	; (40315c <udd_ep_abort+0x154>)
  403034:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  403036:	b12b      	cbz	r3, 403044 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  403038:	2201      	movs	r2, #1
  40303a:	4b47      	ldr	r3, [pc, #284]	; (403158 <udd_ep_abort+0x150>)
  40303c:	701a      	strb	r2, [r3, #0]
  40303e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403042:	b662      	cpsie	i
	if (b_dir_in) {
  403044:	f010 0f80 	tst.w	r0, #128	; 0x80
  403048:	d127      	bne.n	40309a <udd_ep_abort+0x92>
  40304a:	00ae      	lsls	r6, r5, #2
  40304c:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  403050:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  403054:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403056:	f013 0f42 	tst.w	r3, #66	; 0x42
  40305a:	d006      	beq.n	40306a <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  40305c:	4f40      	ldr	r7, [pc, #256]	; (403160 <udd_ep_abort+0x158>)
  40305e:	4628      	mov	r0, r5
  403060:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  403062:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403064:	f013 0f42 	tst.w	r3, #66	; 0x42
  403068:	d1f9      	bne.n	40305e <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  40306a:	4a3c      	ldr	r2, [pc, #240]	; (40315c <udd_ep_abort+0x154>)
  40306c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40306e:	4323      	orrs	r3, r4
  403070:	6293      	str	r3, [r2, #40]	; 0x28
  403072:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403074:	421c      	tst	r4, r3
  403076:	d0fc      	beq.n	403072 <udd_ep_abort+0x6a>
  403078:	4a38      	ldr	r2, [pc, #224]	; (40315c <udd_ep_abort+0x154>)
  40307a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40307c:	ea23 0404 	bic.w	r4, r3, r4
  403080:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403082:	1e68      	subs	r0, r5, #1
  403084:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403088:	462a      	mov	r2, r5
  40308a:	2101      	movs	r1, #1
  40308c:	4b35      	ldr	r3, [pc, #212]	; (403164 <udd_ep_abort+0x15c>)
  40308e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403092:	4b35      	ldr	r3, [pc, #212]	; (403168 <udd_ep_abort+0x160>)
  403094:	4798      	blx	r3
}
  403096:	b007      	add	sp, #28
  403098:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40309a:	00ab      	lsls	r3, r5, #2
  40309c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4030a0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  4030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030a6:	f012 0f10 	tst.w	r2, #16
  4030aa:	d03a      	beq.n	403122 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4030ac:	b34d      	cbz	r5, 403102 <udd_ep_abort+0xfa>
  4030ae:	2d03      	cmp	r5, #3
  4030b0:	d027      	beq.n	403102 <udd_ep_abort+0xfa>
  4030b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030b4:	9201      	str	r2, [sp, #4]
  4030b6:	9a01      	ldr	r2, [sp, #4]
  4030b8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4030bc:	9201      	str	r2, [sp, #4]
  4030be:	9a01      	ldr	r2, [sp, #4]
  4030c0:	f022 0210 	bic.w	r2, r2, #16
  4030c4:	9201      	str	r2, [sp, #4]
  4030c6:	9a01      	ldr	r2, [sp, #4]
  4030c8:	631a      	str	r2, [r3, #48]	; 0x30
  4030ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030cc:	f012 0f10 	tst.w	r2, #16
  4030d0:	d1fb      	bne.n	4030ca <udd_ep_abort+0xc2>
  4030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030d4:	f012 0f10 	tst.w	r2, #16
  4030d8:	d1fb      	bne.n	4030d2 <udd_ep_abort+0xca>
  4030da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030dc:	9202      	str	r2, [sp, #8]
  4030de:	9a02      	ldr	r2, [sp, #8]
  4030e0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4030e4:	9202      	str	r2, [sp, #8]
  4030e6:	9a02      	ldr	r2, [sp, #8]
  4030e8:	f042 0210 	orr.w	r2, r2, #16
  4030ec:	9202      	str	r2, [sp, #8]
  4030ee:	9a02      	ldr	r2, [sp, #8]
  4030f0:	631a      	str	r2, [r3, #48]	; 0x30
  4030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030f4:	f012 0f10 	tst.w	r2, #16
  4030f8:	d0fb      	beq.n	4030f2 <udd_ep_abort+0xea>
  4030fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030fc:	f012 0f10 	tst.w	r2, #16
  403100:	d0fb      	beq.n	4030fa <udd_ep_abort+0xf2>
  403102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403104:	9203      	str	r2, [sp, #12]
  403106:	9a03      	ldr	r2, [sp, #12]
  403108:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40310c:	9203      	str	r2, [sp, #12]
  40310e:	9a03      	ldr	r2, [sp, #12]
  403110:	f022 0210 	bic.w	r2, r2, #16
  403114:	9203      	str	r2, [sp, #12]
  403116:	9a03      	ldr	r2, [sp, #12]
  403118:	631a      	str	r2, [r3, #48]	; 0x30
  40311a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40311c:	f012 0f10 	tst.w	r2, #16
  403120:	d1fb      	bne.n	40311a <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  403122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403124:	9204      	str	r2, [sp, #16]
  403126:	9a04      	ldr	r2, [sp, #16]
  403128:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40312c:	9204      	str	r2, [sp, #16]
  40312e:	9a04      	ldr	r2, [sp, #16]
  403130:	f022 0201 	bic.w	r2, r2, #1
  403134:	9204      	str	r2, [sp, #16]
  403136:	9a04      	ldr	r2, [sp, #16]
  403138:	631a      	str	r2, [r3, #48]	; 0x30
  40313a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40313c:	f012 0f01 	tst.w	r2, #1
  403140:	d1fb      	bne.n	40313a <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  403142:	1e6b      	subs	r3, r5, #1
  403144:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  403148:	4b06      	ldr	r3, [pc, #24]	; (403164 <udd_ep_abort+0x15c>)
  40314a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40314e:	7c5a      	ldrb	r2, [r3, #17]
  403150:	f36f 0283 	bfc	r2, #2, #2
  403154:	745a      	strb	r2, [r3, #17]
  403156:	e788      	b.n	40306a <udd_ep_abort+0x62>
  403158:	200001c0 	.word	0x200001c0
  40315c:	40034000 	.word	0x40034000
  403160:	00401dc9 	.word	0x00401dc9
  403164:	200007ec 	.word	0x200007ec
  403168:	00401d89 	.word	0x00401d89

0040316c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40316c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40316e:	010b      	lsls	r3, r1, #4
  403170:	4293      	cmp	r3, r2
  403172:	d914      	bls.n	40319e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403174:	00c9      	lsls	r1, r1, #3
  403176:	084b      	lsrs	r3, r1, #1
  403178:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40317c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403180:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403182:	1e5c      	subs	r4, r3, #1
  403184:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403188:	428c      	cmp	r4, r1
  40318a:	d901      	bls.n	403190 <usart_set_async_baudrate+0x24>
		return 1;
  40318c:	2001      	movs	r0, #1
  40318e:	e017      	b.n	4031c0 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403190:	6841      	ldr	r1, [r0, #4]
  403192:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403196:	6041      	str	r1, [r0, #4]
  403198:	e00c      	b.n	4031b4 <usart_set_async_baudrate+0x48>
		return 1;
  40319a:	2001      	movs	r0, #1
  40319c:	e010      	b.n	4031c0 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40319e:	0859      	lsrs	r1, r3, #1
  4031a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4031a4:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4031a8:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4031aa:	1e5c      	subs	r4, r3, #1
  4031ac:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4031b0:	428c      	cmp	r4, r1
  4031b2:	d8f2      	bhi.n	40319a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4031b4:	0412      	lsls	r2, r2, #16
  4031b6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4031ba:	431a      	orrs	r2, r3
  4031bc:	6202      	str	r2, [r0, #32]

	return 0;
  4031be:	2000      	movs	r0, #0
}
  4031c0:	bc10      	pop	{r4}
  4031c2:	4770      	bx	lr

004031c4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4031c4:	4b0a      	ldr	r3, [pc, #40]	; (4031f0 <usart_reset+0x2c>)
  4031c6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4031ca:	2300      	movs	r3, #0
  4031cc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4031ce:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4031d0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4031d2:	2388      	movs	r3, #136	; 0x88
  4031d4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4031d6:	2324      	movs	r3, #36	; 0x24
  4031d8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4031da:	f44f 7380 	mov.w	r3, #256	; 0x100
  4031de:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4031e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4031e4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  4031e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4031ea:	6003      	str	r3, [r0, #0]
  4031ec:	4770      	bx	lr
  4031ee:	bf00      	nop
  4031f0:	55534100 	.word	0x55534100

004031f4 <usart_init_rs232>:
{
  4031f4:	b570      	push	{r4, r5, r6, lr}
  4031f6:	4605      	mov	r5, r0
  4031f8:	460c      	mov	r4, r1
  4031fa:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4031fc:	4b0f      	ldr	r3, [pc, #60]	; (40323c <usart_init_rs232+0x48>)
  4031fe:	4798      	blx	r3
	ul_reg_val = 0;
  403200:	2200      	movs	r2, #0
  403202:	4b0f      	ldr	r3, [pc, #60]	; (403240 <usart_init_rs232+0x4c>)
  403204:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403206:	b1a4      	cbz	r4, 403232 <usart_init_rs232+0x3e>
  403208:	4632      	mov	r2, r6
  40320a:	6821      	ldr	r1, [r4, #0]
  40320c:	4628      	mov	r0, r5
  40320e:	4b0d      	ldr	r3, [pc, #52]	; (403244 <usart_init_rs232+0x50>)
  403210:	4798      	blx	r3
  403212:	4602      	mov	r2, r0
  403214:	b978      	cbnz	r0, 403236 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403216:	6863      	ldr	r3, [r4, #4]
  403218:	68a1      	ldr	r1, [r4, #8]
  40321a:	430b      	orrs	r3, r1
  40321c:	6921      	ldr	r1, [r4, #16]
  40321e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403220:	68e1      	ldr	r1, [r4, #12]
  403222:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403224:	4906      	ldr	r1, [pc, #24]	; (403240 <usart_init_rs232+0x4c>)
  403226:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  403228:	6869      	ldr	r1, [r5, #4]
  40322a:	430b      	orrs	r3, r1
  40322c:	606b      	str	r3, [r5, #4]
}
  40322e:	4610      	mov	r0, r2
  403230:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  403232:	2201      	movs	r2, #1
  403234:	e7fb      	b.n	40322e <usart_init_rs232+0x3a>
  403236:	2201      	movs	r2, #1
  403238:	e7f9      	b.n	40322e <usart_init_rs232+0x3a>
  40323a:	bf00      	nop
  40323c:	004031c5 	.word	0x004031c5
  403240:	20000828 	.word	0x20000828
  403244:	0040316d 	.word	0x0040316d

00403248 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  403248:	2340      	movs	r3, #64	; 0x40
  40324a:	6003      	str	r3, [r0, #0]
  40324c:	4770      	bx	lr

0040324e <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
  40324e:	2380      	movs	r3, #128	; 0x80
  403250:	6003      	str	r3, [r0, #0]
  403252:	4770      	bx	lr

00403254 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  403254:	2310      	movs	r3, #16
  403256:	6003      	str	r3, [r0, #0]
  403258:	4770      	bx	lr

0040325a <usart_reset_rx>:
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40325a:	2324      	movs	r3, #36	; 0x24
  40325c:	6003      	str	r3, [r0, #0]
  40325e:	4770      	bx	lr

00403260 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  403260:	6081      	str	r1, [r0, #8]
  403262:	4770      	bx	lr

00403264 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
  403264:	60c1      	str	r1, [r0, #12]
  403266:	4770      	bx	lr

00403268 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
  403268:	6900      	ldr	r0, [r0, #16]
}
  40326a:	4770      	bx	lr

0040326c <usart_get_status>:
	return p_usart->US_CSR;
  40326c:	6940      	ldr	r0, [r0, #20]
}
  40326e:	4770      	bx	lr

00403270 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403270:	6943      	ldr	r3, [r0, #20]
  403272:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
  403276:	bf1d      	ittte	ne
  403278:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40327c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40327e:	2000      	movne	r0, #0
		return 1;
  403280:	2001      	moveq	r0, #1
}
  403282:	4770      	bx	lr

00403284 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403284:	6943      	ldr	r3, [r0, #20]
  403286:	f013 0f01 	tst.w	r3, #1
  40328a:	d005      	beq.n	403298 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40328c:	6983      	ldr	r3, [r0, #24]
  40328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403292:	600b      	str	r3, [r1, #0]
	return 0;
  403294:	2000      	movs	r0, #0
  403296:	4770      	bx	lr
		return 1;
  403298:	2001      	movs	r0, #1
}
  40329a:	4770      	bx	lr

0040329c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40329c:	e7fe      	b.n	40329c <Dummy_Handler>
	...

004032a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4032a0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4032a2:	4b1c      	ldr	r3, [pc, #112]	; (403314 <Reset_Handler+0x74>)
  4032a4:	4a1c      	ldr	r2, [pc, #112]	; (403318 <Reset_Handler+0x78>)
  4032a6:	429a      	cmp	r2, r3
  4032a8:	d010      	beq.n	4032cc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  4032aa:	4b1c      	ldr	r3, [pc, #112]	; (40331c <Reset_Handler+0x7c>)
  4032ac:	4a19      	ldr	r2, [pc, #100]	; (403314 <Reset_Handler+0x74>)
  4032ae:	429a      	cmp	r2, r3
  4032b0:	d20c      	bcs.n	4032cc <Reset_Handler+0x2c>
  4032b2:	3b01      	subs	r3, #1
  4032b4:	1a9b      	subs	r3, r3, r2
  4032b6:	f023 0303 	bic.w	r3, r3, #3
  4032ba:	3304      	adds	r3, #4
  4032bc:	4413      	add	r3, r2
  4032be:	4916      	ldr	r1, [pc, #88]	; (403318 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
  4032c0:	f851 0b04 	ldr.w	r0, [r1], #4
  4032c4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4032c8:	429a      	cmp	r2, r3
  4032ca:	d1f9      	bne.n	4032c0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4032cc:	4b14      	ldr	r3, [pc, #80]	; (403320 <Reset_Handler+0x80>)
  4032ce:	4a15      	ldr	r2, [pc, #84]	; (403324 <Reset_Handler+0x84>)
  4032d0:	429a      	cmp	r2, r3
  4032d2:	d20a      	bcs.n	4032ea <Reset_Handler+0x4a>
  4032d4:	3b01      	subs	r3, #1
  4032d6:	1a9b      	subs	r3, r3, r2
  4032d8:	f023 0303 	bic.w	r3, r3, #3
  4032dc:	3304      	adds	r3, #4
  4032de:	4413      	add	r3, r2
		*pDest++ = 0;
  4032e0:	2100      	movs	r1, #0
  4032e2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4032e6:	4293      	cmp	r3, r2
  4032e8:	d1fb      	bne.n	4032e2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4032ea:	4b0f      	ldr	r3, [pc, #60]	; (403328 <Reset_Handler+0x88>)
  4032ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  4032f0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4032f4:	490d      	ldr	r1, [pc, #52]	; (40332c <Reset_Handler+0x8c>)
  4032f6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4032f8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4032fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  403300:	d203      	bcs.n	40330a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  403302:	688b      	ldr	r3, [r1, #8]
  403304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403308:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  40330a:	4b09      	ldr	r3, [pc, #36]	; (403330 <Reset_Handler+0x90>)
  40330c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40330e:	4b09      	ldr	r3, [pc, #36]	; (403334 <Reset_Handler+0x94>)
  403310:	4798      	blx	r3
  403312:	e7fe      	b.n	403312 <Reset_Handler+0x72>
  403314:	20000000 	.word	0x20000000
  403318:	00403938 	.word	0x00403938
  40331c:	200005f0 	.word	0x200005f0
  403320:	2000086c 	.word	0x2000086c
  403324:	200005f0 	.word	0x200005f0
  403328:	00400000 	.word	0x00400000
  40332c:	e000ed00 	.word	0xe000ed00
  403330:	004037a9 	.word	0x004037a9
  403334:	00403449 	.word	0x00403449

00403338 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403338:	4b3c      	ldr	r3, [pc, #240]	; (40342c <SystemCoreClockUpdate+0xf4>)
  40333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40333c:	f003 0303 	and.w	r3, r3, #3
  403340:	2b03      	cmp	r3, #3
  403342:	d80e      	bhi.n	403362 <SystemCoreClockUpdate+0x2a>
  403344:	e8df f003 	tbb	[pc, r3]
  403348:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  40334c:	4b38      	ldr	r3, [pc, #224]	; (403430 <SystemCoreClockUpdate+0xf8>)
  40334e:	695b      	ldr	r3, [r3, #20]
  403350:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403354:	bf14      	ite	ne
  403356:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40335a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40335e:	4b35      	ldr	r3, [pc, #212]	; (403434 <SystemCoreClockUpdate+0xfc>)
  403360:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  403362:	4b32      	ldr	r3, [pc, #200]	; (40342c <SystemCoreClockUpdate+0xf4>)
  403364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403366:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40336a:	2b70      	cmp	r3, #112	; 0x70
  40336c:	d055      	beq.n	40341a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40336e:	4b2f      	ldr	r3, [pc, #188]	; (40342c <SystemCoreClockUpdate+0xf4>)
  403370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403372:	4930      	ldr	r1, [pc, #192]	; (403434 <SystemCoreClockUpdate+0xfc>)
  403374:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403378:	680b      	ldr	r3, [r1, #0]
  40337a:	40d3      	lsrs	r3, r2
  40337c:	600b      	str	r3, [r1, #0]
  40337e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403380:	4b2a      	ldr	r3, [pc, #168]	; (40342c <SystemCoreClockUpdate+0xf4>)
  403382:	6a1b      	ldr	r3, [r3, #32]
  403384:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403388:	d003      	beq.n	403392 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40338a:	4a2b      	ldr	r2, [pc, #172]	; (403438 <SystemCoreClockUpdate+0x100>)
  40338c:	4b29      	ldr	r3, [pc, #164]	; (403434 <SystemCoreClockUpdate+0xfc>)
  40338e:	601a      	str	r2, [r3, #0]
  403390:	e7e7      	b.n	403362 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403392:	4a2a      	ldr	r2, [pc, #168]	; (40343c <SystemCoreClockUpdate+0x104>)
  403394:	4b27      	ldr	r3, [pc, #156]	; (403434 <SystemCoreClockUpdate+0xfc>)
  403396:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403398:	4b24      	ldr	r3, [pc, #144]	; (40342c <SystemCoreClockUpdate+0xf4>)
  40339a:	6a1b      	ldr	r3, [r3, #32]
  40339c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4033a0:	2b10      	cmp	r3, #16
  4033a2:	d005      	beq.n	4033b0 <SystemCoreClockUpdate+0x78>
  4033a4:	2b20      	cmp	r3, #32
  4033a6:	d1dc      	bne.n	403362 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
  4033a8:	4a23      	ldr	r2, [pc, #140]	; (403438 <SystemCoreClockUpdate+0x100>)
  4033aa:	4b22      	ldr	r3, [pc, #136]	; (403434 <SystemCoreClockUpdate+0xfc>)
  4033ac:	601a      	str	r2, [r3, #0]
				break;
  4033ae:	e7d8      	b.n	403362 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
  4033b0:	4a23      	ldr	r2, [pc, #140]	; (403440 <SystemCoreClockUpdate+0x108>)
  4033b2:	4b20      	ldr	r3, [pc, #128]	; (403434 <SystemCoreClockUpdate+0xfc>)
  4033b4:	601a      	str	r2, [r3, #0]
				break;
  4033b6:	e7d4      	b.n	403362 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4033b8:	4b1c      	ldr	r3, [pc, #112]	; (40342c <SystemCoreClockUpdate+0xf4>)
  4033ba:	6a1b      	ldr	r3, [r3, #32]
  4033bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4033c0:	d018      	beq.n	4033f4 <SystemCoreClockUpdate+0xbc>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4033c2:	4a1d      	ldr	r2, [pc, #116]	; (403438 <SystemCoreClockUpdate+0x100>)
  4033c4:	4b1b      	ldr	r3, [pc, #108]	; (403434 <SystemCoreClockUpdate+0xfc>)
  4033c6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  4033c8:	4b18      	ldr	r3, [pc, #96]	; (40342c <SystemCoreClockUpdate+0xf4>)
  4033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4033cc:	f003 0303 	and.w	r3, r3, #3
  4033d0:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4033d2:	4a16      	ldr	r2, [pc, #88]	; (40342c <SystemCoreClockUpdate+0xf4>)
  4033d4:	bf07      	ittee	eq
  4033d6:	6a91      	ldreq	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  4033d8:	6a92      	ldreq	r2, [r2, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4033da:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4033dc:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4033de:	4815      	ldr	r0, [pc, #84]	; (403434 <SystemCoreClockUpdate+0xfc>)
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4033e0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4033e4:	6803      	ldr	r3, [r0, #0]
  4033e6:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4033ea:	b2d2      	uxtb	r2, r2
  4033ec:	fbb3 f3f2 	udiv	r3, r3, r2
  4033f0:	6003      	str	r3, [r0, #0]
  4033f2:	e7b6      	b.n	403362 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4033f4:	4a11      	ldr	r2, [pc, #68]	; (40343c <SystemCoreClockUpdate+0x104>)
  4033f6:	4b0f      	ldr	r3, [pc, #60]	; (403434 <SystemCoreClockUpdate+0xfc>)
  4033f8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4033fa:	4b0c      	ldr	r3, [pc, #48]	; (40342c <SystemCoreClockUpdate+0xf4>)
  4033fc:	6a1b      	ldr	r3, [r3, #32]
  4033fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403402:	2b10      	cmp	r3, #16
  403404:	d005      	beq.n	403412 <SystemCoreClockUpdate+0xda>
  403406:	2b20      	cmp	r3, #32
  403408:	d1de      	bne.n	4033c8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40340a:	4a0b      	ldr	r2, [pc, #44]	; (403438 <SystemCoreClockUpdate+0x100>)
  40340c:	4b09      	ldr	r3, [pc, #36]	; (403434 <SystemCoreClockUpdate+0xfc>)
  40340e:	601a      	str	r2, [r3, #0]
				break;
  403410:	e7da      	b.n	4033c8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  403412:	4a0b      	ldr	r2, [pc, #44]	; (403440 <SystemCoreClockUpdate+0x108>)
  403414:	4b07      	ldr	r3, [pc, #28]	; (403434 <SystemCoreClockUpdate+0xfc>)
  403416:	601a      	str	r2, [r3, #0]
				break;
  403418:	e7d6      	b.n	4033c8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40341a:	4a06      	ldr	r2, [pc, #24]	; (403434 <SystemCoreClockUpdate+0xfc>)
  40341c:	6813      	ldr	r3, [r2, #0]
  40341e:	4909      	ldr	r1, [pc, #36]	; (403444 <SystemCoreClockUpdate+0x10c>)
  403420:	fba1 1303 	umull	r1, r3, r1, r3
  403424:	085b      	lsrs	r3, r3, #1
  403426:	6013      	str	r3, [r2, #0]
  403428:	4770      	bx	lr
  40342a:	bf00      	nop
  40342c:	400e0400 	.word	0x400e0400
  403430:	400e1410 	.word	0x400e1410
  403434:	200001c4 	.word	0x200001c4
  403438:	00b71b00 	.word	0x00b71b00
  40343c:	003d0900 	.word	0x003d0900
  403440:	007a1200 	.word	0x007a1200
  403444:	aaaaaaab 	.word	0xaaaaaaab

00403448 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
  403448:	b580      	push	{r7, lr}

	irq_initialize_vectors();
	cpu_irq_enable();
  40344a:	2101      	movs	r1, #1
  40344c:	4b1c      	ldr	r3, [pc, #112]	; (4034c0 <main+0x78>)
  40344e:	7019      	strb	r1, [r3, #0]
  403450:	f3bf 8f5f 	dmb	sy
  403454:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
  403456:	4b1b      	ldr	r3, [pc, #108]	; (4034c4 <main+0x7c>)
  403458:	2200      	movs	r2, #0
  40345a:	701a      	strb	r2, [r3, #0]
  40345c:	705a      	strb	r2, [r3, #1]
  40345e:	709a      	strb	r2, [r3, #2]
  403460:	70da      	strb	r2, [r3, #3]
  403462:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  403464:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();

#if !SAM0
	sysclk_init();
  403466:	4b18      	ldr	r3, [pc, #96]	; (4034c8 <main+0x80>)
  403468:	4798      	blx	r3
	board_init();
  40346a:	4b18      	ldr	r3, [pc, #96]	; (4034cc <main+0x84>)
  40346c:	4798      	blx	r3
#else
	system_init();
#endif
	ui_init();
  40346e:	4b18      	ldr	r3, [pc, #96]	; (4034d0 <main+0x88>)
  403470:	4798      	blx	r3
	ui_powerdown();
  403472:	4b18      	ldr	r3, [pc, #96]	; (4034d4 <main+0x8c>)
  403474:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
  403476:	4b18      	ldr	r3, [pc, #96]	; (4034d8 <main+0x90>)
  403478:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  40347a:	4c11      	ldr	r4, [pc, #68]	; (4034c0 <main+0x78>)
  40347c:	2500      	movs	r5, #0
  40347e:	462f      	mov	r7, r5
	while (!(*lock_ptr)) {
  403480:	4e10      	ldr	r6, [pc, #64]	; (4034c4 <main+0x7c>)
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  403482:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4034dc <main+0x94>
  403486:	e004      	b.n	403492 <main+0x4a>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
  403488:	2301      	movs	r3, #1
  40348a:	7023      	strb	r3, [r4, #0]
  40348c:	f3bf 8f5f 	dmb	sy
  403490:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
  403492:	b672      	cpsid	i
  403494:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403498:	7027      	strb	r7, [r4, #0]
	while (!(*lock_ptr)) {
  40349a:	7833      	ldrb	r3, [r6, #0]
  40349c:	2b00      	cmp	r3, #0
  40349e:	d1f3      	bne.n	403488 <main+0x40>
  4034a0:	4b08      	ldr	r3, [pc, #32]	; (4034c4 <main+0x7c>)
  4034a2:	4628      	mov	r0, r5
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  4034a4:	3001      	adds	r0, #1
  4034a6:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  4034a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4034ac:	2a00      	cmp	r2, #0
  4034ae:	d0f9      	beq.n	4034a4 <main+0x5c>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  4034b0:	2800      	cmp	r0, #0
  4034b2:	d0e9      	beq.n	403488 <main+0x40>
  4034b4:	b672      	cpsid	i
  4034b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4034ba:	7025      	strb	r5, [r4, #0]
	pmc_sleep(sleep_mode);
  4034bc:	47c0      	blx	r8
  4034be:	e7e8      	b.n	403492 <main+0x4a>
  4034c0:	200001c0 	.word	0x200001c0
  4034c4:	20000848 	.word	0x20000848
  4034c8:	00400219 	.word	0x00400219
  4034cc:	00401139 	.word	0x00401139
  4034d0:	0040013d 	.word	0x0040013d
  4034d4:	00400155 	.word	0x00400155
  4034d8:	00400c51 	.word	0x00400c51
  4034dc:	004017ed 	.word	0x004017ed

004034e0 <main_suspend_action>:
		sleepmgr_enter_sleep();
	}
}

void main_suspend_action(void)
{
  4034e0:	b508      	push	{r3, lr}
	ui_powerdown();
  4034e2:	4b01      	ldr	r3, [pc, #4]	; (4034e8 <main_suspend_action+0x8>)
  4034e4:	4798      	blx	r3
  4034e6:	bd08      	pop	{r3, pc}
  4034e8:	00400155 	.word	0x00400155

004034ec <main_resume_action>:
}

void main_resume_action(void)
{
  4034ec:	b508      	push	{r3, lr}
	ui_wakeup();
  4034ee:	4b01      	ldr	r3, [pc, #4]	; (4034f4 <main_resume_action+0x8>)
  4034f0:	4798      	blx	r3
  4034f2:	bd08      	pop	{r3, pc}
  4034f4:	00400169 	.word	0x00400169

004034f8 <main_sof_action>:
}

void main_sof_action(void)
{
  4034f8:	b508      	push	{r3, lr}
	if (!main_b_cdc_enable)
  4034fa:	4b04      	ldr	r3, [pc, #16]	; (40350c <main_sof_action+0x14>)
  4034fc:	781b      	ldrb	r3, [r3, #0]
  4034fe:	b903      	cbnz	r3, 403502 <main_sof_action+0xa>
  403500:	bd08      	pop	{r3, pc}
		return;
	ui_process(udd_get_frame_number());
  403502:	4b03      	ldr	r3, [pc, #12]	; (403510 <main_sof_action+0x18>)
  403504:	4798      	blx	r3
  403506:	4b03      	ldr	r3, [pc, #12]	; (403514 <main_sof_action+0x1c>)
  403508:	4798      	blx	r3
  40350a:	e7f9      	b.n	403500 <main_sof_action+0x8>
  40350c:	2000082c 	.word	0x2000082c
  403510:	00402b25 	.word	0x00402b25
  403514:	004001a5 	.word	0x004001a5

00403518 <main_cdc_enable>:
	ui_wakeup_enable();
}
#endif

bool main_cdc_enable(uint8_t port)
{
  403518:	b510      	push	{r4, lr}
	main_b_cdc_enable = true;
  40351a:	2401      	movs	r4, #1
  40351c:	4b02      	ldr	r3, [pc, #8]	; (403528 <main_cdc_enable+0x10>)
  40351e:	701c      	strb	r4, [r3, #0]
	// Open communication
	uart_open(port);
  403520:	4b02      	ldr	r3, [pc, #8]	; (40352c <main_cdc_enable+0x14>)
  403522:	4798      	blx	r3
	return true;
}
  403524:	4620      	mov	r0, r4
  403526:	bd10      	pop	{r4, pc}
  403528:	2000082c 	.word	0x2000082c
  40352c:	00403731 	.word	0x00403731

00403530 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
  403530:	b508      	push	{r3, lr}
	main_b_cdc_enable = false;
  403532:	2200      	movs	r2, #0
  403534:	4b02      	ldr	r3, [pc, #8]	; (403540 <main_cdc_disable+0x10>)
  403536:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
  403538:	4b02      	ldr	r3, [pc, #8]	; (403544 <main_cdc_disable+0x14>)
  40353a:	4798      	blx	r3
  40353c:	bd08      	pop	{r3, pc}
  40353e:	bf00      	nop
  403540:	2000082c 	.word	0x2000082c
  403544:	00403791 	.word	0x00403791

00403548 <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
  403548:	b508      	push	{r3, lr}
	if (b_enable) {
  40354a:	b911      	cbnz	r1, 403552 <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
  40354c:	4b02      	ldr	r3, [pc, #8]	; (403558 <main_cdc_set_dtr+0x10>)
  40354e:	4798      	blx	r3
  403550:	bd08      	pop	{r3, pc}
		ui_com_open(port);
  403552:	4b02      	ldr	r3, [pc, #8]	; (40355c <main_cdc_set_dtr+0x14>)
  403554:	4798      	blx	r3
  403556:	bd08      	pop	{r3, pc}
  403558:	00400189 	.word	0x00400189
  40355c:	00400179 	.word	0x00400179

00403560 <UART0_Handler>:
#endif

static sam_usart_opt_t usart_options;

ISR(USART_HANDLER)
{
  403560:	b510      	push	{r4, lr}
  403562:	b082      	sub	sp, #8
	uint32_t sr = usart_get_status(USART_BASE);
  403564:	4823      	ldr	r0, [pc, #140]	; (4035f4 <UART0_Handler+0x94>)
  403566:	4b24      	ldr	r3, [pc, #144]	; (4035f8 <UART0_Handler+0x98>)
  403568:	4798      	blx	r3
  40356a:	4604      	mov	r4, r0
	if (sr & US_CSR_RXRDY) {
  40356c:	f010 0f01 	tst.w	r0, #1
  403570:	d104      	bne.n	40357c <UART0_Handler+0x1c>
		}
		ui_com_tx_stop();
		return;
	}

	if (sr & US_CSR_TXRDY) {
  403572:	f010 0f02 	tst.w	r0, #2
  403576:	d125      	bne.n	4035c4 <UART0_Handler+0x64>
			usart_disable_tx(USART_BASE);
			usart_disable_interrupt(USART_BASE, US_IDR_TXRDY);
			ui_com_rx_stop();
		}
	}
}
  403578:	b002      	add	sp, #8
  40357a:	bd10      	pop	{r4, pc}
		ui_com_tx_start();
  40357c:	4b1f      	ldr	r3, [pc, #124]	; (4035fc <UART0_Handler+0x9c>)
  40357e:	4798      	blx	r3
		bool b_error = usart_read(USART_BASE, &value) ||
  403580:	a901      	add	r1, sp, #4
  403582:	481c      	ldr	r0, [pc, #112]	; (4035f4 <UART0_Handler+0x94>)
  403584:	4b1e      	ldr	r3, [pc, #120]	; (403600 <UART0_Handler+0xa0>)
  403586:	4798      	blx	r3
  403588:	b960      	cbnz	r0, 4035a4 <UART0_Handler+0x44>
		if (b_error) {
  40358a:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
  40358e:	d109      	bne.n	4035a4 <UART0_Handler+0x44>
		if (!udi_cdc_is_tx_ready()) {
  403590:	4b1c      	ldr	r3, [pc, #112]	; (403604 <UART0_Handler+0xa4>)
  403592:	4798      	blx	r3
  403594:	b990      	cbnz	r0, 4035bc <UART0_Handler+0x5c>
			udi_cdc_signal_overrun();
  403596:	4b1c      	ldr	r3, [pc, #112]	; (403608 <UART0_Handler+0xa8>)
  403598:	4798      	blx	r3
			ui_com_overflow();
  40359a:	4b1c      	ldr	r3, [pc, #112]	; (40360c <UART0_Handler+0xac>)
  40359c:	4798      	blx	r3
		ui_com_tx_stop();
  40359e:	4b1c      	ldr	r3, [pc, #112]	; (403610 <UART0_Handler+0xb0>)
  4035a0:	4798      	blx	r3
  4035a2:	e7e9      	b.n	403578 <UART0_Handler+0x18>
			usart_reset_rx(USART_BASE);
  4035a4:	4c13      	ldr	r4, [pc, #76]	; (4035f4 <UART0_Handler+0x94>)
  4035a6:	4620      	mov	r0, r4
  4035a8:	4b1a      	ldr	r3, [pc, #104]	; (403614 <UART0_Handler+0xb4>)
  4035aa:	4798      	blx	r3
			usart_enable_rx(USART_BASE);
  4035ac:	4620      	mov	r0, r4
  4035ae:	4b1a      	ldr	r3, [pc, #104]	; (403618 <UART0_Handler+0xb8>)
  4035b0:	4798      	blx	r3
			udi_cdc_signal_framing_error();
  4035b2:	4b1a      	ldr	r3, [pc, #104]	; (40361c <UART0_Handler+0xbc>)
  4035b4:	4798      	blx	r3
			ui_com_error();
  4035b6:	4b1a      	ldr	r3, [pc, #104]	; (403620 <UART0_Handler+0xc0>)
  4035b8:	4798      	blx	r3
  4035ba:	e7e9      	b.n	403590 <UART0_Handler+0x30>
			udi_cdc_putc(value);
  4035bc:	9801      	ldr	r0, [sp, #4]
  4035be:	4b19      	ldr	r3, [pc, #100]	; (403624 <UART0_Handler+0xc4>)
  4035c0:	4798      	blx	r3
  4035c2:	e7ec      	b.n	40359e <UART0_Handler+0x3e>
		if (udi_cdc_is_rx_ready()) {
  4035c4:	4b18      	ldr	r3, [pc, #96]	; (403628 <UART0_Handler+0xc8>)
  4035c6:	4798      	blx	r3
  4035c8:	b950      	cbnz	r0, 4035e0 <UART0_Handler+0x80>
			usart_disable_tx(USART_BASE);
  4035ca:	4c0a      	ldr	r4, [pc, #40]	; (4035f4 <UART0_Handler+0x94>)
  4035cc:	4620      	mov	r0, r4
  4035ce:	4b17      	ldr	r3, [pc, #92]	; (40362c <UART0_Handler+0xcc>)
  4035d0:	4798      	blx	r3
			usart_disable_interrupt(USART_BASE, US_IDR_TXRDY);
  4035d2:	2102      	movs	r1, #2
  4035d4:	4620      	mov	r0, r4
  4035d6:	4b16      	ldr	r3, [pc, #88]	; (403630 <UART0_Handler+0xd0>)
  4035d8:	4798      	blx	r3
			ui_com_rx_stop();
  4035da:	4b16      	ldr	r3, [pc, #88]	; (403634 <UART0_Handler+0xd4>)
  4035dc:	4798      	blx	r3
  4035de:	e7cb      	b.n	403578 <UART0_Handler+0x18>
			ui_com_rx_start();
  4035e0:	4b15      	ldr	r3, [pc, #84]	; (403638 <UART0_Handler+0xd8>)
  4035e2:	4798      	blx	r3
			int c = udi_cdc_getc();
  4035e4:	4b15      	ldr	r3, [pc, #84]	; (40363c <UART0_Handler+0xdc>)
  4035e6:	4798      	blx	r3
			usart_write(USART_BASE, c);
  4035e8:	4601      	mov	r1, r0
  4035ea:	4802      	ldr	r0, [pc, #8]	; (4035f4 <UART0_Handler+0x94>)
  4035ec:	4b14      	ldr	r3, [pc, #80]	; (403640 <UART0_Handler+0xe0>)
  4035ee:	4798      	blx	r3
  4035f0:	e7c2      	b.n	403578 <UART0_Handler+0x18>
  4035f2:	bf00      	nop
  4035f4:	400e0600 	.word	0x400e0600
  4035f8:	0040326d 	.word	0x0040326d
  4035fc:	0040019d 	.word	0x0040019d
  403600:	00403285 	.word	0x00403285
  403604:	004009f9 	.word	0x004009f9
  403608:	0040065d 	.word	0x0040065d
  40360c:	004001a3 	.word	0x004001a3
  403610:	0040019f 	.word	0x0040019f
  403614:	0040325b 	.word	0x0040325b
  403618:	00403255 	.word	0x00403255
  40361c:	00400649 	.word	0x00400649
  403620:	004001a1 	.word	0x004001a1
  403624:	00400aa5 	.word	0x00400aa5
  403628:	0040088d 	.word	0x0040088d
  40362c:	0040324f 	.word	0x0040324f
  403630:	00403265 	.word	0x00403265
  403634:	0040019b 	.word	0x0040019b
  403638:	00400199 	.word	0x00400199
  40363c:	00400959 	.word	0x00400959
  403640:	00403271 	.word	0x00403271

00403644 <uart_rx_notify>:


void uart_rx_notify(uint8_t port)
{
  403644:	b510      	push	{r4, lr}
	UNUSED(port);
	// If UART is open
	if (usart_get_interrupt_mask(USART_BASE)
  403646:	4808      	ldr	r0, [pc, #32]	; (403668 <uart_rx_notify+0x24>)
  403648:	4b08      	ldr	r3, [pc, #32]	; (40366c <uart_rx_notify+0x28>)
  40364a:	4798      	blx	r3
  40364c:	f010 0f01 	tst.w	r0, #1
  403650:	d100      	bne.n	403654 <uart_rx_notify+0x10>
  403652:	bd10      	pop	{r4, pc}
		& US_IMR_RXRDY) {
		// Enable UART TX interrupt to send a new value
		usart_enable_tx(USART_BASE);
  403654:	4c04      	ldr	r4, [pc, #16]	; (403668 <uart_rx_notify+0x24>)
  403656:	4620      	mov	r0, r4
  403658:	4b05      	ldr	r3, [pc, #20]	; (403670 <uart_rx_notify+0x2c>)
  40365a:	4798      	blx	r3
		usart_enable_interrupt(USART_BASE, US_IER_TXRDY);
  40365c:	2102      	movs	r1, #2
  40365e:	4620      	mov	r0, r4
  403660:	4b04      	ldr	r3, [pc, #16]	; (403674 <uart_rx_notify+0x30>)
  403662:	4798      	blx	r3
	}
}
  403664:	e7f5      	b.n	403652 <uart_rx_notify+0xe>
  403666:	bf00      	nop
  403668:	400e0600 	.word	0x400e0600
  40366c:	00403269 	.word	0x00403269
  403670:	00403249 	.word	0x00403249
  403674:	00403261 	.word	0x00403261

00403678 <uart_config>:


void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
  403678:	b570      	push	{r4, r5, r6, lr}
	uint32_t stopbits, parity, databits;
	uint32_t imr;
	UNUSED(port);

	switch (cfg->bCharFormat) {
  40367a:	790b      	ldrb	r3, [r1, #4]
  40367c:	2b01      	cmp	r3, #1
  40367e:	d00c      	beq.n	40369a <uart_config+0x22>
		stopbits = US_MR_NBSTOP_1_5_BIT;
		break;
	case CDC_STOP_BITS_1:
	default:
		// Default stop bit = 1 stop bit
		stopbits = US_MR_NBSTOP_1_BIT;
  403680:	2b02      	cmp	r3, #2
  403682:	bf0c      	ite	eq
  403684:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
  403688:	2000      	movne	r0, #0
		break;
	}

	switch (cfg->bParityType) {
  40368a:	794b      	ldrb	r3, [r1, #5]
  40368c:	3b01      	subs	r3, #1
  40368e:	2b03      	cmp	r3, #3
  403690:	d80f      	bhi.n	4036b2 <uart_config+0x3a>
  403692:	e8df f003 	tbb	[pc, r3]
  403696:	1105      	.short	0x1105
  403698:	0b08      	.short	0x0b08
		stopbits = US_MR_NBSTOP_1_5_BIT;
  40369a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40369e:	e7f4      	b.n	40368a <uart_config+0x12>
	case CDC_PAR_EVEN:
		parity = US_MR_PAR_EVEN;
		break;
	case CDC_PAR_ODD:
		parity = US_MR_PAR_ODD;
  4036a0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4036a4:	e009      	b.n	4036ba <uart_config+0x42>
		break;
	case CDC_PAR_MARK:
		parity = US_MR_PAR_MARK;
  4036a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
		break;
  4036aa:	e006      	b.n	4036ba <uart_config+0x42>
	case CDC_PAR_SPACE:
		parity = US_MR_PAR_SPACE;
  4036ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
		break;
  4036b0:	e003      	b.n	4036ba <uart_config+0x42>
	default:
	case CDC_PAR_NONE:
		parity = US_MR_PAR_NO;
  4036b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
		break;
  4036b6:	e000      	b.n	4036ba <uart_config+0x42>
		parity = US_MR_PAR_EVEN;
  4036b8:	2200      	movs	r2, #0
	}
	
	switch(cfg->bDataBits) {
  4036ba:	798b      	ldrb	r3, [r1, #6]
  4036bc:	1f5c      	subs	r4, r3, #5
  4036be:	2c02      	cmp	r4, #2
	case 5: case 6: case 7:
		databits = cfg->bDataBits - 5;
  4036c0:	bf94      	ite	ls
  4036c2:	4623      	movls	r3, r4
		break;
	default:
	case 8:
		databits = US_MR_CHRL_8_BIT;
  4036c4:	23c0      	movhi	r3, #192	; 0xc0
		break;
	}

	// Options for USART.
	usart_options.baudrate = LE32_TO_CPU(cfg->dwDTERate);
  4036c6:	6809      	ldr	r1, [r1, #0]
  4036c8:	4d10      	ldr	r5, [pc, #64]	; (40370c <uart_config+0x94>)
  4036ca:	6029      	str	r1, [r5, #0]
	usart_options.char_length = databits;
  4036cc:	606b      	str	r3, [r5, #4]
	usart_options.parity_type = parity;
  4036ce:	60aa      	str	r2, [r5, #8]
	usart_options.stop_bits = stopbits;
  4036d0:	60e8      	str	r0, [r5, #12]
	usart_options.channel_mode = US_MR_CHMODE_NORMAL;
  4036d2:	2300      	movs	r3, #0
  4036d4:	612b      	str	r3, [r5, #16]
	imr = usart_get_interrupt_mask(USART_BASE);
  4036d6:	4c0e      	ldr	r4, [pc, #56]	; (403710 <uart_config+0x98>)
  4036d8:	4620      	mov	r0, r4
  4036da:	4b0e      	ldr	r3, [pc, #56]	; (403714 <uart_config+0x9c>)
  4036dc:	4798      	blx	r3
  4036de:	4606      	mov	r6, r0
	usart_disable_interrupt(USART_BASE, 0xFFFFFFFF);
  4036e0:	f04f 31ff 	mov.w	r1, #4294967295
  4036e4:	4620      	mov	r0, r4
  4036e6:	4b0c      	ldr	r3, [pc, #48]	; (403718 <uart_config+0xa0>)
  4036e8:	4798      	blx	r3
	usart_init_rs232(USART_BASE, &usart_options,
  4036ea:	4a0c      	ldr	r2, [pc, #48]	; (40371c <uart_config+0xa4>)
  4036ec:	4629      	mov	r1, r5
  4036ee:	4620      	mov	r0, r4
  4036f0:	4b0b      	ldr	r3, [pc, #44]	; (403720 <uart_config+0xa8>)
  4036f2:	4798      	blx	r3
			sysclk_get_peripheral_bus_hz(USART_BASE));
	// Restore both RX and TX
	usart_enable_tx(USART_BASE);
  4036f4:	4620      	mov	r0, r4
  4036f6:	4b0b      	ldr	r3, [pc, #44]	; (403724 <uart_config+0xac>)
  4036f8:	4798      	blx	r3
	usart_enable_rx(USART_BASE);
  4036fa:	4620      	mov	r0, r4
  4036fc:	4b0a      	ldr	r3, [pc, #40]	; (403728 <uart_config+0xb0>)
  4036fe:	4798      	blx	r3
	usart_enable_interrupt(USART_BASE, imr);
  403700:	4631      	mov	r1, r6
  403702:	4620      	mov	r0, r4
  403704:	4b09      	ldr	r3, [pc, #36]	; (40372c <uart_config+0xb4>)
  403706:	4798      	blx	r3
  403708:	bd70      	pop	{r4, r5, r6, pc}
  40370a:	bf00      	nop
  40370c:	20000830 	.word	0x20000830
  403710:	400e0600 	.word	0x400e0600
  403714:	00403269 	.word	0x00403269
  403718:	00403265 	.word	0x00403265
  40371c:	03d09000 	.word	0x03d09000
  403720:	004031f5 	.word	0x004031f5
  403724:	00403249 	.word	0x00403249
  403728:	00403255 	.word	0x00403255
  40372c:	00403261 	.word	0x00403261

00403730 <uart_open>:
}

void uart_open(uint8_t port)
{
  403730:	b510      	push	{r4, lr}
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403732:	4b0e      	ldr	r3, [pc, #56]	; (40376c <uart_open+0x3c>)
  403734:	2230      	movs	r2, #48	; 0x30
  403736:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  40373a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40373e:	601a      	str	r2, [r3, #0]
  403740:	2008      	movs	r0, #8
  403742:	4b0b      	ldr	r3, [pc, #44]	; (403770 <uart_open+0x40>)
  403744:	4798      	blx	r3
	NVIC_SetPriority(USART_INT_IRQn, USART_INT_LEVEL);
	NVIC_EnableIRQ(USART_INT_IRQn);

	// Initialize it in RS232 mode.
	USART_PERIPH_CLK_ENABLE();
	if (usart_init_rs232(USART_BASE, &usart_options,
  403746:	4a0b      	ldr	r2, [pc, #44]	; (403774 <uart_open+0x44>)
  403748:	490b      	ldr	r1, [pc, #44]	; (403778 <uart_open+0x48>)
  40374a:	480c      	ldr	r0, [pc, #48]	; (40377c <uart_open+0x4c>)
  40374c:	4b0c      	ldr	r3, [pc, #48]	; (403780 <uart_open+0x50>)
  40374e:	4798      	blx	r3
  403750:	b100      	cbz	r0, 403754 <uart_open+0x24>
  403752:	bd10      	pop	{r4, pc}
	}
	// Enable USART
	USART_ENABLE();

	// Enable both RX and TX
	usart_enable_tx(USART_BASE);
  403754:	4c09      	ldr	r4, [pc, #36]	; (40377c <uart_open+0x4c>)
  403756:	4620      	mov	r0, r4
  403758:	4b0a      	ldr	r3, [pc, #40]	; (403784 <uart_open+0x54>)
  40375a:	4798      	blx	r3
	usart_enable_rx(USART_BASE);
  40375c:	4620      	mov	r0, r4
  40375e:	4b0a      	ldr	r3, [pc, #40]	; (403788 <uart_open+0x58>)
  403760:	4798      	blx	r3
	// Enable interrupts
	usart_enable_interrupt(USART_BASE, US_IER_RXRDY | US_IER_TXRDY);
  403762:	2103      	movs	r1, #3
  403764:	4620      	mov	r0, r4
  403766:	4b09      	ldr	r3, [pc, #36]	; (40378c <uart_open+0x5c>)
  403768:	4798      	blx	r3
  40376a:	e7f2      	b.n	403752 <uart_open+0x22>
  40376c:	e000e100 	.word	0xe000e100
  403770:	004016d9 	.word	0x004016d9
  403774:	03d09000 	.word	0x03d09000
  403778:	20000830 	.word	0x20000830
  40377c:	400e0600 	.word	0x400e0600
  403780:	004031f5 	.word	0x004031f5
  403784:	00403249 	.word	0x00403249
  403788:	00403255 	.word	0x00403255
  40378c:	00403261 	.word	0x00403261

00403790 <uart_close>:
}

void uart_close(uint8_t port)
{
  403790:	b508      	push	{r3, lr}
	UNUSED(port);
	// Disable interrupts
	usart_disable_interrupt(USART_BASE, 0xFFFFFFFF);
  403792:	f04f 31ff 	mov.w	r1, #4294967295
  403796:	4802      	ldr	r0, [pc, #8]	; (4037a0 <uart_close+0x10>)
  403798:	4b02      	ldr	r3, [pc, #8]	; (4037a4 <uart_close+0x14>)
  40379a:	4798      	blx	r3
  40379c:	bd08      	pop	{r3, pc}
  40379e:	bf00      	nop
  4037a0:	400e0600 	.word	0x400e0600
  4037a4:	00403265 	.word	0x00403265

004037a8 <__libc_init_array>:
  4037a8:	b570      	push	{r4, r5, r6, lr}
  4037aa:	4e0f      	ldr	r6, [pc, #60]	; (4037e8 <__libc_init_array+0x40>)
  4037ac:	4d0f      	ldr	r5, [pc, #60]	; (4037ec <__libc_init_array+0x44>)
  4037ae:	1b76      	subs	r6, r6, r5
  4037b0:	10b6      	asrs	r6, r6, #2
  4037b2:	bf18      	it	ne
  4037b4:	2400      	movne	r4, #0
  4037b6:	d005      	beq.n	4037c4 <__libc_init_array+0x1c>
  4037b8:	3401      	adds	r4, #1
  4037ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4037be:	4798      	blx	r3
  4037c0:	42a6      	cmp	r6, r4
  4037c2:	d1f9      	bne.n	4037b8 <__libc_init_array+0x10>
  4037c4:	4e0a      	ldr	r6, [pc, #40]	; (4037f0 <__libc_init_array+0x48>)
  4037c6:	4d0b      	ldr	r5, [pc, #44]	; (4037f4 <__libc_init_array+0x4c>)
  4037c8:	f000 f8a4 	bl	403914 <_init>
  4037cc:	1b76      	subs	r6, r6, r5
  4037ce:	10b6      	asrs	r6, r6, #2
  4037d0:	bf18      	it	ne
  4037d2:	2400      	movne	r4, #0
  4037d4:	d006      	beq.n	4037e4 <__libc_init_array+0x3c>
  4037d6:	3401      	adds	r4, #1
  4037d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4037dc:	4798      	blx	r3
  4037de:	42a6      	cmp	r6, r4
  4037e0:	d1f9      	bne.n	4037d6 <__libc_init_array+0x2e>
  4037e2:	bd70      	pop	{r4, r5, r6, pc}
  4037e4:	bd70      	pop	{r4, r5, r6, pc}
  4037e6:	bf00      	nop
  4037e8:	00403920 	.word	0x00403920
  4037ec:	00403920 	.word	0x00403920
  4037f0:	00403928 	.word	0x00403928
  4037f4:	00403920 	.word	0x00403920

004037f8 <register_fini>:
  4037f8:	4b02      	ldr	r3, [pc, #8]	; (403804 <register_fini+0xc>)
  4037fa:	b113      	cbz	r3, 403802 <register_fini+0xa>
  4037fc:	4802      	ldr	r0, [pc, #8]	; (403808 <register_fini+0x10>)
  4037fe:	f000 b805 	b.w	40380c <atexit>
  403802:	4770      	bx	lr
  403804:	00000000 	.word	0x00000000
  403808:	00403819 	.word	0x00403819

0040380c <atexit>:
  40380c:	2300      	movs	r3, #0
  40380e:	4601      	mov	r1, r0
  403810:	461a      	mov	r2, r3
  403812:	4618      	mov	r0, r3
  403814:	f000 b81a 	b.w	40384c <__register_exitproc>

00403818 <__libc_fini_array>:
  403818:	b538      	push	{r3, r4, r5, lr}
  40381a:	4c0a      	ldr	r4, [pc, #40]	; (403844 <__libc_fini_array+0x2c>)
  40381c:	4d0a      	ldr	r5, [pc, #40]	; (403848 <__libc_fini_array+0x30>)
  40381e:	1b64      	subs	r4, r4, r5
  403820:	10a4      	asrs	r4, r4, #2
  403822:	d00a      	beq.n	40383a <__libc_fini_array+0x22>
  403824:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403828:	3b01      	subs	r3, #1
  40382a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40382e:	3c01      	subs	r4, #1
  403830:	f855 3904 	ldr.w	r3, [r5], #-4
  403834:	4798      	blx	r3
  403836:	2c00      	cmp	r4, #0
  403838:	d1f9      	bne.n	40382e <__libc_fini_array+0x16>
  40383a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40383e:	f000 b873 	b.w	403928 <_fini>
  403842:	bf00      	nop
  403844:	00403938 	.word	0x00403938
  403848:	00403934 	.word	0x00403934

0040384c <__register_exitproc>:
  40384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403850:	4c27      	ldr	r4, [pc, #156]	; (4038f0 <__register_exitproc+0xa4>)
  403852:	4607      	mov	r7, r0
  403854:	6826      	ldr	r6, [r4, #0]
  403856:	4688      	mov	r8, r1
  403858:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  40385c:	4692      	mov	sl, r2
  40385e:	4699      	mov	r9, r3
  403860:	2c00      	cmp	r4, #0
  403862:	d03c      	beq.n	4038de <__register_exitproc+0x92>
  403864:	6865      	ldr	r5, [r4, #4]
  403866:	2d1f      	cmp	r5, #31
  403868:	dc1a      	bgt.n	4038a0 <__register_exitproc+0x54>
  40386a:	f105 0e01 	add.w	lr, r5, #1
  40386e:	b17f      	cbz	r7, 403890 <__register_exitproc+0x44>
  403870:	2001      	movs	r0, #1
  403872:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403876:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
  40387a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40387e:	fa00 f205 	lsl.w	r2, r0, r5
  403882:	4311      	orrs	r1, r2
  403884:	2f02      	cmp	r7, #2
  403886:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40388a:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
  40388e:	d020      	beq.n	4038d2 <__register_exitproc+0x86>
  403890:	3502      	adds	r5, #2
  403892:	f8c4 e004 	str.w	lr, [r4, #4]
  403896:	2000      	movs	r0, #0
  403898:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
  40389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038a0:	4b14      	ldr	r3, [pc, #80]	; (4038f4 <__register_exitproc+0xa8>)
  4038a2:	b30b      	cbz	r3, 4038e8 <__register_exitproc+0x9c>
  4038a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4038a8:	f3af 8000 	nop.w
  4038ac:	4604      	mov	r4, r0
  4038ae:	b1d8      	cbz	r0, 4038e8 <__register_exitproc+0x9c>
  4038b0:	2000      	movs	r0, #0
  4038b2:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
  4038b6:	f04f 0e01 	mov.w	lr, #1
  4038ba:	6060      	str	r0, [r4, #4]
  4038bc:	6023      	str	r3, [r4, #0]
  4038be:	4605      	mov	r5, r0
  4038c0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4038c4:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  4038c8:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  4038cc:	2f00      	cmp	r7, #0
  4038ce:	d0df      	beq.n	403890 <__register_exitproc+0x44>
  4038d0:	e7ce      	b.n	403870 <__register_exitproc+0x24>
  4038d2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4038d6:	431a      	orrs	r2, r3
  4038d8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4038dc:	e7d8      	b.n	403890 <__register_exitproc+0x44>
  4038de:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4038e2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4038e6:	e7bd      	b.n	403864 <__register_exitproc+0x18>
  4038e8:	f04f 30ff 	mov.w	r0, #4294967295
  4038ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038f0:	00403910 	.word	0x00403910
  4038f4:	00000000 	.word	0x00000000

004038f8 <LED_DESCRIPTOR>:
  4038f8:	00000013 00000000 00000014 00000000     ................
  403908:	00000054 00000001                       T.......

00403910 <_global_impure_ptr>:
  403910:	200001c8                                ... 

00403914 <_init>:
  403914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403916:	bf00      	nop
  403918:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40391a:	bc08      	pop	{r3}
  40391c:	469e      	mov	lr, r3
  40391e:	4770      	bx	lr

00403920 <__init_array_start>:
  403920:	004037f9 	.word	0x004037f9

00403924 <__frame_dummy_init_array_entry>:
  403924:	004000f5                                ..@.

00403928 <_fini>:
  403928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40392a:	bf00      	nop
  40392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40392e:	bc08      	pop	{r3}
  403930:	469e      	mov	lr, r3
  403932:	4770      	bx	lr

00403934 <__fini_array_start>:
  403934:	004000d1 	.word	0x004000d1

Disassembly of section .relocate:

20000000 <SystemInit>:
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7240 	mov.w	r2, #768	; 0x300
20000004:	4b1f      	ldr	r3, [pc, #124]	; (20000084 <SystemInit+0x84>)
20000006:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000008:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
2000000c:	6a1b      	ldr	r3, [r3, #32]
2000000e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000012:	d107      	bne.n	20000024 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000014:	4a1c      	ldr	r2, [pc, #112]	; (20000088 <SystemInit+0x88>)
20000016:	4b1d      	ldr	r3, [pc, #116]	; (2000008c <SystemInit+0x8c>)
20000018:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000001a:	461a      	mov	r2, r3
2000001c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000001e:	f013 0f01 	tst.w	r3, #1
20000022:	d0fb      	beq.n	2000001c <SystemInit+0x1c>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000024:	4a1a      	ldr	r2, [pc, #104]	; (20000090 <SystemInit+0x90>)
20000026:	4b19      	ldr	r3, [pc, #100]	; (2000008c <SystemInit+0x8c>)
20000028:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000002a:	461a      	mov	r2, r3
2000002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000032:	d0fb      	beq.n	2000002c <SystemInit+0x2c>
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000034:	4a15      	ldr	r2, [pc, #84]	; (2000008c <SystemInit+0x8c>)
20000036:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000038:	f023 0303 	bic.w	r3, r3, #3
2000003c:	f043 0301 	orr.w	r3, r3, #1
20000040:	6313      	str	r3, [r2, #48]	; 0x30
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f013 0f08 	tst.w	r3, #8
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x42>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000004a:	4a12      	ldr	r2, [pc, #72]	; (20000094 <SystemInit+0x94>)
2000004c:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <SystemInit+0x8c>)
2000004e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000050:	461a      	mov	r2, r3
20000052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000054:	f013 0f02 	tst.w	r3, #2
20000058:	d0fb      	beq.n	20000052 <SystemInit+0x52>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000005a:	2211      	movs	r2, #17
2000005c:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <SystemInit+0x8c>)
2000005e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000060:	461a      	mov	r2, r3
20000062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000064:	f013 0f08 	tst.w	r3, #8
20000068:	d0fb      	beq.n	20000062 <SystemInit+0x62>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000006a:	2212      	movs	r2, #18
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <SystemInit+0x8c>)
2000006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000070:	461a      	mov	r2, r3
20000072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000074:	f013 0f08 	tst.w	r3, #8
20000078:	d0fb      	beq.n	20000072 <SystemInit+0x72>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000007a:	4a07      	ldr	r2, [pc, #28]	; (20000098 <SystemInit+0x98>)
2000007c:	4b07      	ldr	r3, [pc, #28]	; (2000009c <SystemInit+0x9c>)
2000007e:	601a      	str	r2, [r3, #0]
20000080:	4770      	bx	lr
20000082:	bf00      	nop
20000084:	400e0a00 	.word	0x400e0a00
20000088:	00370809 	.word	0x00370809
2000008c:	400e0400 	.word	0x400e0400
20000090:	01370809 	.word	0x01370809
20000094:	201f3f03 	.word	0x201f3f03
20000098:	03d09000 	.word	0x03d09000
2000009c:	200001c4 	.word	0x200001c4

200000a0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a0:	4b0c      	ldr	r3, [pc, #48]	; (200000d4 <system_init_flash+0x34>)
200000a2:	4298      	cmp	r0, r3
200000a4:	d90c      	bls.n	200000c0 <system_init_flash+0x20>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000a6:	4b0c      	ldr	r3, [pc, #48]	; (200000d8 <system_init_flash+0x38>)
200000a8:	4298      	cmp	r0, r3
200000aa:	d90d      	bls.n	200000c8 <system_init_flash+0x28>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000ac:	4b0b      	ldr	r3, [pc, #44]	; (200000dc <system_init_flash+0x3c>)
200000ae:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000b0:	bf94      	ite	ls
200000b2:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000b6:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000ba:	4b09      	ldr	r3, [pc, #36]	; (200000e0 <system_init_flash+0x40>)
200000bc:	601a      	str	r2, [r3, #0]
200000be:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000c0:	2200      	movs	r2, #0
200000c2:	4b07      	ldr	r3, [pc, #28]	; (200000e0 <system_init_flash+0x40>)
200000c4:	601a      	str	r2, [r3, #0]
200000c6:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000c8:	f44f 7280 	mov.w	r2, #256	; 0x100
200000cc:	4b04      	ldr	r3, [pc, #16]	; (200000e0 <system_init_flash+0x40>)
200000ce:	601a      	str	r2, [r3, #0]
200000d0:	4770      	bx	lr
200000d2:	bf00      	nop
200000d4:	0103663f 	.word	0x0103663f
200000d8:	01c9c37f 	.word	0x01c9c37f
200000dc:	0337f97f 	.word	0x0337f97f
200000e0:	400e0a00 	.word	0x400e0a00

200000e4 <udi_api_cdc_comm>:
200000e4:	004002a9 0040027d 004005ad 00400291     ..@.}.@...@...@.
200000f4:	00000000                                ....

200000f8 <udi_api_cdc_data>:
200000f8:	0040079d 00400585 0040028d 00400291     ..@...@...@...@.
20000108:	00400491                                ..@.

2000010c <udc_config>:
2000010c:	20000164 20000118 00000000              d.. ... ....

20000118 <udc_config_fs>:
20000118:	20000120 20000178                        .. x.. 

20000120 <udc_desc_fs>:
20000120:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000130:	24050001 04011000 05020224 01000624     ...$....$...$...
20000140:	03012405 83050701 10004003 00010409     .$.......@......
20000150:	00000a02 81050700 00004002 02020507     .........@......
20000160:	00000040                                @...

20000164 <udc_device_desc>:
20000164:	02000112 40000002 240403eb 02010100     .......@...$....
20000174:	00000100                                ....

20000178 <udi_apis>:
20000178:	200000e4 200000f8                       ... ... 

20000180 <udc_string_desc>:
20000180:	00000300 00000000 00000000 00000000     ................
	...

200001a0 <udc_string_desc_languageid>:
200001a0:	04090304                                ....

200001a4 <udc_string_manufacturer_name>:
200001a4:	454d5441 5341204c 00000046              ATMEL ASF...

200001b0 <udc_string_product_name>:
200001b0:	20434443 74726956 206c6175 006d6f43     CDC Virtual Com.

200001c0 <g_interrupt_enabled>:
200001c0:	00000001                                ....

200001c4 <SystemCoreClock>:
200001c4:	003d0900                                ..=.

200001c8 <impure_data>:
200001c8:	00000000 200004b4 2000051c 20000584     ....... ... ... 
	...
20000270:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000280:	0005deec 0000000b 00000000 00000000     ................
	...
